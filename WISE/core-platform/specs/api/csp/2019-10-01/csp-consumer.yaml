openapi: 3.0.1
info:
  title: ${api_name}
  description: ${api_name} ${api_version}
  version: ${api_version}
servers:
  - url: https://${domain_name}/${api_version}
    description: ${server_description}
  - url: https://${domain_name}/${api_stage}
    description: ${server_description}
paths:
  #code in: cmd/lambda/csp/consumer
  /consumer:
    get:
      tags:
        - Consumer
      description: Get list of consumers
      operationId: GetConsumer
      parameters:
        - name: offset
          in: query
          description: Offset of items to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Max number of item to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          required: false
          explode: true
          style: form
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Consumer"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Consumer
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  #code in: cmd/lambda/csp/consumer
  /consumer/{consumerId}:
    get:
      tags:
        - Consumer
      description: Get a consumer by id
      operationId: GetConsumerID
      parameters:
        - name: consumerId
          in: path
          description: Consumer id to fetch
          required: true
          style: simple
          explode: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Consumer"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    patch:
      tags:
      - Consumer
      description: Patch consumer
      operationId: PathConsumerID
      parameters:
        - name: consumerId
          in: path
          description: Consumer id to patch
          required: true
          style: simple
          explode: true
          schema:
            type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ConsumerPatchBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Consumer"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Consumer
      parameters:
        - name: consumerId
          in: path
          description: Consumer id to fetch
          required: true
          style: simple
          explode: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  #code in: cmd/lambda/csp/consumer/verification
  /consumer/{consumerId}/verification:
    post:
      tags:
        - Consumer
      description: Verify a consumer by id
      operationId: PostConsumerID
      parameters:
        - name: consumerId
          in: path
          description: Consumer id
          required: true
          style: simple
          explode: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConsumerStatus"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_verification_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Consumer
      parameters:
        - name: consumerId
          in: path
          description: Consumer id
          required: true
          style: simple
          explode: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  #code in: cmd/lambda/csp/consumer/document/docsubmit
  /consumer/{consumerId}/{documentId}/send:
    post:
      description: SendDocument
      operationId: PostSendDocument
      tags:
        - SendDocument
      parameters:
        - name: consumerId
          in: path
          description: consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: document id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_document_submit_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - SendDocument
      parameters:
        - name: consumerId
          in: path
          description: consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: document id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /consumer/{consumerId}/reupload:
    post:
      description: Re upload document
      operationId: PostReuploadDocument
      tags:
        - Consumer Document Reupload
      parameters:
        - name: consumerId
          in: path
          description: consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_document_reupload_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Consumer Document Reupload
      parameters:
        - name: consumerId
          in: path
          description: consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  # code in: cmd/lambda/csp/consumer/document
  /consumer/{consumerId}/document:
    post:
      tags:
        - Consumer Documents
      description: Create Consumer Document
      operationId: ConsumerDocumentCreated
      parameters:
        - name: consumerId
          in: path
          description: consumer Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessDocumentPostBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerDocument"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Servier Error
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    get:
      tags:
        - Consumer Documents
      description: List of consumer documents
      operationId: GetConsumerDocuments
      parameters:
        - name: consumerId
          in: path
          description: consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of items to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Max number of item to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConsumerDocument"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Consumer Documents
      parameters:
        - name: consumerId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  # code in: cmd/lambda/csp/consumer/document
  /consumer/{consumerId}/document/{documentId}:
    get:
      tags:
        - Consumer Documents
      description: Get a consumer document
      operationId: GetConsumerDocument
      parameters:
        - name: consumerId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: document id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerDocument"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    delete:
      description: DELETE
      tags:
        - Consumer Documents
      operationId: DeleteConsumerDocument
      parameters:
        - name: consumerId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: documentent id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerDocument"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Consumer Documents
      parameters:
        - name: consumerId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Documenent id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    patch:
      tags:
        - Consumer Documents
      description: Update a consumer document
      operationId: UpdateConsumerDocument
      parameters:
        - name: consumerId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ConsumerDocumentPatchBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerDocument"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
  # code in: cmd/lambda/csp/consumer/document/url
  /consumer/{consumerId}/document/{documentId}/url:
    get:
      tags:
        - Consumer Document URL
      description: Get consumer document signed url (valid for 15 minutes)
      operationId: GetConsumerDocumentUrl
      parameters:
        - name: consumerId
          in: path
          description: Consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignedUrl"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        connectionType: INTERNET
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responseTemplates:
          application/json: |
            {}
        responses:
          default:
            statusCode: 200
        type: aws_proxy
        uri: ${csp_consumer_document_url_lambda}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Consumer Document URL
      parameters:
        - name: consumerId
          in: path
          description: consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    # code in: cmd/lambda/csp/consumer/document/status
    # code in: cmd/lambda/csp/consumer/document/status
  #code in: cmd/lambda/csp/consumer/document/status
  /consumer/{consumerId}/document/{documentId}/status:
    get:
      tags:
        - Consumer Document Status
      description: Get consumer document Status
      operationId: GetConsumerDocumentStatus
      parameters:
        - name: consumerId
          in: path
          description: Consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentStatus"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        connectionType: INTERNET
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responseTemplates:
          application/json: |
            {}
        responses:
          default:
            statusCode: 200
        type: aws_proxy
        uri: ${csp_consumer_document_status_lambda}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Consumer Document Status
      parameters:
        - name: consumerId
          in: path
          description: consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  # code in: cmd/lambda/csp/consumer/status
  /consumer/{consumerId}/status:
    get:
      tags:
        - Consumer KYC status
      description: Consumer KYC Status
      operationId: ConsumerGetStatus
      parameters:
        - name: consumerId
          in: path
          description: consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerStatus"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_status_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      description: OPTIONS
      tags:
        - Consumer KYC status
      operationId: ConsumerOptionsStatus
      parameters:
        - name: consumerId
          in: path
          description: Consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  # code in: cmd/lambda/csp/consumer/state
  /consumer/{consumerId}/state:
    get:
      tags:
        - Consumer Review states
      description: Consumer Review states
      operationId: ConsumerGetStates
      parameters:
        - name: consumerId
          in: path
          description: consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConsumerReviewState"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_state_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      description: OPTIONS
      tags:
        - Consumer Review states
      operationId: ConsumerOptionsStates
      parameters:
        - name: consumerId
          in: path
          description: Consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  # code in: cmd/lambda/csp/consumer/item
  /consumer/{consumerId}/item:
    get:
      tags:
        - Consumer Item
      description: Consumer Review Item
      operationId: GetConsumerReviewItem
      parameters:
        - name: consumerId
          in: path
          description: consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerReview"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_consumer_item_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      description: OPTIONS
      tags:
        - Consumer Item
      operationId: ConsumerReviewItemOptions
      parameters:
        - name: consumerId
          in: path
          description: Consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
components:
  schemas:
    AddressType:
      title: AddressType
      type: string
      description: Address  Enum
      enum:
        - legal
        - mailing
    Address:
      title: Address
      type: object
      properties:
        addressType:
          $ref: "#/components/schemas/AddressType"
        streetAddress:
          type: string
          description: Street address
        addressLine2:
          type: string
          description: Unit, suite, or PO Box
          nullable: true
        city:
          type: string
          description: City name
        state:
          type: string
          description: State or province name or short form
        country:
          type: string
          description: Country code (ISO 3166 2-Alpha)
        postalCode:
          type: string
          description: Postal or zip code
        latitude:
          type: number
          description: Latitude of address
          format: float64
          nullable: true
        longitude:
          type: number
          description: Longitude of address
          format: float64
          nullable: true
      description: Address Object
      readOnly: true
    ActivityType:
      title: Activity Type Enum
      type: string
      description: Activity Type Enum
      enum:
        - cash
        - check
        - domesticWireTransfer
        - internationalWireTransfer
        - domesticACH
        - internationalACH
    ActivityTypeArray:
      title: ActivityTypeArray
      description: Activity Type Array
      type: array
      items:
        $ref: "#/components/schemas/ActivityType"
    BusinessDocumentType:
      title: Business Document Type Enum
      type: string
      description: Business Document Type Enum
      enum:
        - articlesOfIncorporation
        - articlesOfOrganization
        - assumedNameCertificate
        - businessLicense
        - certificateOfPartnership
        - partnershipAgreement
        - certificateOfFormation
    ConsumerDocument:
      title: BusinessDocument
      type: object
      properties:
        id:
          type: string
          description: Business document id number
        businessId:
          type: string
          description: Business id number
        createdUserId:
          type: string
          description: User id that created the business
        number:
          type: string
          description: Business document number (e.g. Passport Number)
        docType:
          $ref: "#/components/schemas/BusinessDocumentType"
        issuingAuth:
          type: string
          description: Issuing authority (e.g. CA SOS)
        issuingState:
          type: string
          description: Issuing state or province (e.g. CA or BC)
          nullable: true
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
        issuedDate:
          type: string
          description: Date Issued
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
          nullable: true
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        updated:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: Business Document Object
    BusinessDocumentPostBody:
      title: BusinessDocumentPostBody
      type: object
      properties:
        number:
          type: string
          description: The document number
        createdUserId:
          type: string
          description: The user whom created this document
        doctype:
          oneOf:
            - $ref: "#/components/schemas/BusinessDocumentType"
          description: The document type e.g `Articles of Formation`
        issuingAuth:
          type: string
          description: Issuing authority (e.g. CA SOS)
        issuingState:
          type: string
          description: Issuing State e.g `CA`
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
        issuedDate:
          type: string
          description: Date Issued
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
        useFormation:
          type: boolean
          nullable: true
          description: Use this document as business formation document
        content:
          type: string
          description: Base64 encoded file content
          format: byte
    ConsumerDocumentPatchBody:
      title: ConsumerDocumentPatchBody
      type: object
      properties:
        number:
          type: string
          description: Business document number (e.g. Passport Number)
          nullable: true
        docType:
          oneOf:
            - $ref: "#/components/schemas/BusinessDocumentType"
            - nullable: true
        issuingAuth:
          type: string
          description: Issuing authority (e.g. CA SOS)
          nullable: true
        issuingState:
          type: string
          description: Issuing state or province (e.g. CA or BC)
          nullable: true
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
          nullable: true
        issuedDate:
          type: string
          description: Date Issued
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
          nullable: true
        content:
          type: string
          description: Base64 encoded file contents
          format: byte
          nullable: true
        updatingContent:
          type: boolean
          nullable: true
      description: Business Document Patch Object
      writeOnly: true
    SignedUrl:
      title: Document Signed URL
      type: object
      properties:
        url:
          type: string
          description: The signed url e.g `https://docId.fileID`
      description: The Document signed url
    DocumentStatus:
      title: Document Status
      type: object
      properties:
        submitted:
          type: string
          description: the submitted timestamp
        documentId:
          type: string
          description: the document id
        bankDocumentId:
          type: string
          description: the id from the bank
        created:
          type: string
          description: the created timestamp
      description: The Document Status
    BusinessMemberTitleType:
      title: Business Member Title Type Enum
      type: string
      description: Business Member Title Type Enum
      enum:
        - chiefExecutiveOfficer
        - chiefFinancialOfficer
        - chiefOperatingOfficer
        - president
        - vicePresident
        - seniorVicePresident
        - treasurer
        - generalPartner
        - other
    UserTaxIdType:
      title: User Tax Id Enum
      type: string
      description: User Tax Id Types
      enum:
        - ssn
        - itin
    ResidencyStatus:
      title: ResidencyStatus
      type: string
      description: Residency Status Enum
      enum:
        - citizen
        - resident
        - nonResident
    UserResidency:
      title: UserResidency
      required:
        - address
      type: object
      properties:
        country:
          type: string
        status:
          $ref: "#/components/schemas/ResidencyStatus"
      description: User Residency Object
      writeOnly: true
    Occupation:
      title: Occupation
      type: string
      description: Occupation Enum
      enum:
        - financeAccountingTax
        - fireFirstResponders
        - healthcare
        - homemaker
        - laborGeneral
        - laborSkilled
        - lawEnforcementSecurity
        - legalServices
        - privateInvestor
        - professionalAdministrative
        - professionalManagement
        - professionalOther
        - professionalTechnical
        - retired
        - sales
        - selfEmployed
        - student
        - transportation
        - unemployed
    IncomeType:
      title: IncomeType
      type: string
      description: Income Type Enum
      enum:
        - inheritance
        - salary
        - companySales
        - propertySales
        - investments
        - lifeInsurance
        - divorceSettlement
        - othe
    IncomeTypeArray:
      title: IncomeTypeArray
      description: Income Type Array
      type: array
      items:
        $ref: "#/components/schemas/IncomeType"
    ConsumerPatchBody:
      title: User Object
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
          nullable: true
        consumerId:
          type: string
        firstName:
          type: string
        middleName:
          type: string
          nullable: true
        lastName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        phone:
          type: string
        phoneVerified:
          type: boolean
        dateOfBirth:
          type: string
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        taxId:
          type: string
        taxIdType:
          oneOf:
            - $ref: "#/components/schemas/UserTaxIdType"
        legalAddress:
          $ref: "#/components/schemas/Address"
        residency:
          oneOf:
            - $ref: "#/components/schemas/UserResidency"
            - nullable: true
        citizenshipCountries:
          type: array
          items:
            type: string
        occupation:
          oneOf:
            - $ref: "#/components/schemas/Occupation"
        incomeType:
          oneOf:
            - $ref: "#/components/schemas/IncomeTypeArray"
        activityType:
          oneOf:
            - $ref: "#/components/schemas/ActivityTypeArray"
            - nullable: true
        titleType:
          $ref: "#/components/schemas/BusinessMemberTitleType"
        titleOther:
          type: string
          nullable: true
        ownership:
          type: number
          format: float64
        isControllingManger:
          type: boolean
        kycStatus:
          type: string
          nullable: true
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        updated:
          type: string
          description: Date updated
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: Business Member Object
    Consumer:
      title: User Object
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
          nullable: true
        consumerId:
          type: string
        firstName:
          type: string
        middleName:
          type: string
          nullable: true
        lastName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        phone:
          type: string
        phoneVerified:
          type: boolean
        dateOfBirth:
          type: string
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        taxId:
          type: string
        taxIdType:
          oneOf:
            - $ref: "#/components/schemas/UserTaxIdType"
        legalAddress:
          $ref: "#/components/schemas/Address"
        residency:
          oneOf:
            - $ref: "#/components/schemas/UserResidency"
            - nullable: true
        citizenshipCountries:
          type: array
          items:
            type: string
        occupation:
          oneOf:
            - $ref: "#/components/schemas/Occupation"
        incomeType:
          oneOf:
            - $ref: "#/components/schemas/IncomeTypeArray"
        activityType:
          oneOf:
            - $ref: "#/components/schemas/ActivityTypeArray"
            - nullable: true
        titleType:
          $ref: "#/components/schemas/BusinessMemberTitleType"
        titleOther:
          type: string
          nullable: true
        ownership:
          type: number
          format: float64
        isControllingManger:
          type: boolean
        kycStatus:
          type: string
          nullable: true
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        updated:
          type: string
          description: Date updated
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: Business Member Object
      readOnly: true
    Success:
      title: Success
      properties:
        message:
          type: string
    ConsumerStatus:
      title: Business Status
      properties:
        status:
          type: string
        items:
          type: array
          items:
            type: string
        notes:
          type: array
          items:
            type: string
    ConsumerReview:
      title: ConsumerReview
      type: object
      properties:
        id:
          type: string
        consumerName:
          type: string
          description: The name of the consumer on review
          nullable: true
        status:
          type: string
        notes:
          type: string
        consumerId:
          type: string
        idvs:
          type: array
          items:
            type: string
      readOnly: true
      description: Consumer Review
    ConsumerReviewState:
      title: ConsumerReviewState
      type: object
      properties:
        id:
          type: string
        consumerId:
          type: string
        status:
          type: string
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
