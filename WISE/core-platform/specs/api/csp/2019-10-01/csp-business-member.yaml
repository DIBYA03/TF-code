openapi: 3.0.1
info:
  title: ${api_name}
  description: ${api_name} ${api_version}
  version: ${api_version}
servers:
  - url: https://${domain_name}/${api_version}
    description: ${server_description}
  - url: https://${domain_name}/${api_stage}
    description: ${server_description}
paths:
  /business/{businessId}/member:
    get:
      tags:
        - Business Members
      description: Get a list of business members
      operationId: GetBusinessMembers
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of items to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Max number of item to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessMember"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    post:
      tags:
        - Business Members
      description: Create Member
      operationId: postBusinessMember
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: "#/components/schemas/BusinessMemberPatchBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessMember"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Business Members
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock

  /business/{businessId}/member/{memberId}:
    patch:
      tags:
        - Business Members
      description: Update business
      operationId: patchBusinessMember
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: "#/components/schemas/BusinessMemberPatchBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessMember"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    get:
      tags:
        - Business Members
      description: Get a business member
      operationId: GetBusinessMember
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessMember"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Business Members
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  # code in: cmd/lambda/csp/business/member/verification
  /business/{businessId}/member/{memberId}/verification:
    get:
      tags:
        - Business Members
      description: get business member verification status
      operationId: GetBusinessMemberVerification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Verification"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_verification_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    post:
      tags:
        - Business Members
      description: Verify business member
      operationId: postBusinessMember
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Verification"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_verification_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Business Members
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  # code in: cmd/lambda/csp/business/member/verification/phone
  /business/{businessId}/member/{memberId}/verifyphone:
    post:
      tags:
        - Phone Verification
      description: Verify phone
      operationId: PostPhoneVerification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_phone_verification_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    get:
      tags:
        - Phone Verification
      description: Verify phone
      operationId: GetPhoneVerification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_phone_verification_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Phone Verification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    # code in: cmd/lambda/csp/business/member/verification/email
  /business/{businessId}/member/{memberId}/verifyemail:
    post:
      tags:
        - Email Verification
      description: Verify phone
      operationId: PostEmailVerification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_email_verification_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    get:
      tags:
        - Email Verification
      description: Verify phone
      operationId: GetEmailVerification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_email_verification_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Email Verification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/member/{memberId}/alloy:
    post:
      tags:
        - Alloy KYC Verification
      description: Run alloy KYC Verification
      operationId: PostAlloyVerification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_alloy_verification_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    get:
      tags:
        - Alloy KYC Verification
      description: Get Alloy KYC Verification
      operationId: GetAlloyVerification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_alloy_verification_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Alloy KYC Verification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock

  /business/{businessId}/member/{memberId}/clear/risk_inform_person:
    post:
      tags:
        - Clear KYC Verification
      description: Run clear KYC Verification
      operationId: PostClearVerification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_clear_verification_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    get:
      tags:
        - Clear KYC Verification
      description: Get Clear KYC Verification
      operationId: GetClearVerification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string        
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_clear_verification_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Clear KYC Verification
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
components:
  schemas:
    AddressType:
      title: AddressType
      type: string
      description: Address  Enum
      enum:
        - legal
        - mailing
    Address:
      title: Address
      type: object
      properties:
        addressType:
          $ref: "#/components/schemas/AddressType"
        streetAddress:
          type: string
          description: Street address
        addressLine2:
          type: string
          description: Unit, suite, or PO Box
          nullable: true
        city:
          type: string
          description: City name
        state:
          type: string
          description: State or province name or short form
        country:
          type: string
          description: Country code (ISO 3166 2-Alpha)
        postalCode:
          type: string
          description: Postal or zip code
        latitude:
          type: number
          description: Latitude of address
          format: float64
          nullable: true
        longitude:
          type: number
          description: Longitude of address
          format: float64
          nullable: true
      description: Address Object
      readOnly: true
    Verification:
      title: Verification Response
      properties:
        status:
          type: string
        items:
          type: array
          items:
            type: string
        notes:
          type: array
          items:
            type: string
    KYCStatus:
      title: KYCStatusType
      type: string
      description: KYC status enum
      enum:
        - notStarted
        - bankPending
        - bankApproved
        - bankReview
        - bankDeclined
        - cspPending
        - cspApproved
        - cspDeclined
        - cspReview    
    ActivityType:
      title: Activity Type Enum
      type: string
      description: Activity Type Enum
      enum:
        - cash
        - check
        - domesticWireTransfer
        - internationalWireTransfer
        - domesticACH
        - internationalACH
    ActivityTypeArray:
      title: ActivityTypeArray
      description: Activity Type Array
      type: array
      items:
        $ref: "#/components/schemas/ActivityType"
    BusinessMemberTitleType:
      title: Business Member Title Type Enum
      type: string
      description: Business Member Title Type Enum
      enum:
        - chiefExecutiveOfficer
        - chiefFinancialOfficer
        - chiefOperatingOfficer
        - president
        - vicePresident
        - seniorVicePresident
        - treasurer
        - generalPartner
        - other
    UserTaxIdType:
      title: User Tax Id Enum
      type: string
      description: User Tax Id Types
      enum:
        - ssn
        - itin
    ResidencyStatus:
      title: ResidencyStatus
      type: string
      description: Residency Status Enum
      enum:
        - citizen
        - resident
        - nonResident
    UserResidency:
      title: UserResidency
      required:
        - address
      type: object
      properties:
        country:
          type: string
        status:
          $ref: "#/components/schemas/ResidencyStatus"
      description: User Residency Object
      writeOnly: true
    Occupation:
      title: Occupation
      type: string
      description: Occupation Enum
      enum:
        - financeAccountingTax
        - fireFirstResponders
        - healthcare
        - homemaker
        - laborGeneral
        - laborSkilled
        - lawEnforcementSecurity
        - legalServices
        - privateInvestor
        - professionalAdministrative
        - professionalManagement
        - professionalOther
        - professionalTechnical
        - retired
        - sales
        - selfEmployed
        - student
        - transportation
        - unemployed
    IncomeType:
      title: IncomeType
      type: string
      description: Income Type Enum
      enum:
        - inheritance
        - salary
        - companySales
        - propertySales
        - investments
        - lifeInsurance
        - divorceSettlement
        - othe
    IncomeTypeArray:
      title: IncomeTypeArray
      description: Income Type Array
      type: array
      items:
        $ref: "#/components/schemas/IncomeType"
    BusinessMember:
      title: Business Member Object
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
          nullable: true
        businessId:
          type: string
        firstName:
          type: string
        middleName:
          type: string
          nullable: true
        lastName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        phone:
          type: string
        phoneVerified:
          type: boolean
        dateOfBirth:
          type: string
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        taxId:
          type: string
        taxIdType:
          oneOf:
            - $ref: "#/components/schemas/UserTaxIdType"
        legalAddress:
          $ref: "#/components/schemas/Address"
        residency:
          oneOf:
            - $ref: "#/components/schemas/UserResidency"
            - nullable: true
        citizenshipCountries:
          type: array
          items:
            type: string
        occupation:
          oneOf:
            - $ref: "#/components/schemas/Occupation"
        incomeType:
          oneOf:
            - $ref: "#/components/schemas/IncomeTypeArray"
        activityType:
          oneOf:
            - $ref: "#/components/schemas/ActivityTypeArray"
            - nullable: true
        titleType:
          $ref: "#/components/schemas/BusinessMemberTitleType"
        titleOther:
          type: string
          nullable: true
        ownership:
          type: number
          format: float64
        isControllingManger:
          type: boolean
        kycStatus:
          $ref: "#/components/schemas/KYCStatus"
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        updated:
          type: string
          description: Date updated
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: Business Member Object
      readOnly: true
    BusinessMemberPatchBody:
      title: Business Member Patch Object
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
          nullable: true
        businessId:
          type: string
        firstName:
          type: string
          nullable: true
        middleName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        dateOfBirth:
          type: string
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        taxId:
          type: string
          nullable: true
        taxIdType:
          oneOf:
          - $ref: '#/components/schemas/UserTaxIdType'
          - nullable: true
        legalAddress:
          $ref: '#/components/schemas/Address'
          nullable: true
        residency:
          oneOf:
          - $ref: '#/components/schemas/UserResidency'
          - nullable: true
        citizenshipCountries:
          type: array
          nullable: true
          items:
            type: string
        occupation:
          oneOf:
          - $ref: '#/components/schemas/Occupation'
          - nullable: true
        incomeType:
          oneOf:
          - $ref: '#/components/schemas/IncomeTypeArray'
          - nullable: true
        activityType:
          oneOf:
          - $ref: '#/components/schemas/ActivityTypeArray'
          - nullable: true
        isControllingManger:
          anyOf:
            - type: boolean
            - nullable: true
        titleType:
          anyOf:
            - $ref: "#/components/schemas/BusinessMemberTitleType"
            - nullable: true
        titleOther:
          type: string
          nullable: true
        ownership:
          type: integer
          format: int32
          nullable: true
      description: Business Member Patch Object
      writeOnly: true
