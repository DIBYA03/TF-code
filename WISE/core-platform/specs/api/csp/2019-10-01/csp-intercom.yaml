openapi: 3.0.1
info:
  title: ${api_name}
  description: ${api_name} ${api_version}
  version: ${api_version}
servers:
  - url: https://${domain_name}/${api_version}
    description: ${server_description}
  - url: https://${domain_name}/${api_stage}
    description: ${server_description}
paths:
  /intercom:
    get:
      description: Get Intercom User
      operationId: GetIntercomUser
      parameters:
        - name: emailId
          in: query
          description: Email Id
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: userId
          in: query
          description: User Id
          required: false
          style: form
          explode: true
          schema:
            type: string
      tags:
        - Intercom
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_intercom_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
      - Intercom
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /intercom/tag:
    get:
      tags:
        - Intercom tags
      description: List intercom tags
      operationId: GetIntercomTags
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_intercom_tag_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    post:
      tags:
        - Intercom Tags
      description: Add User to tag
      operationId: PatchtIntercomTag
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessNotes"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Servier Error
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${csp_intercom_tag_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCSPCognitoPoolAuthorizer: []
    options:
      tags:
        - Intercom Tags
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock