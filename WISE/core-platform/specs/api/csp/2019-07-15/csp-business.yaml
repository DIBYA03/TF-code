openapi: 3.0.1
info:
  title: ${api_name}
  description: ${api_name} ${api_version}
  version: ${api_version}
servers:
  - url: https://${domain_name}/${api_version}
    description: ${server_description}
  - url: https://${domain_name}/${api_stage}
    description: ${server_description}
paths:
  /business:
    get:
      tags:
        - Business
      description: Get list of businesses
      operationId: GetBusinesses
      parameters:
        - name: offset
          in: query
          description: Offset of items to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Max number of item to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          required: false
          explode: true
          style: form
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Business"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - Business
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}:
    patch:
      tags:
        - Business
      description: Update a business by id
      operationId: UpdateBusiness
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: "#/components/schemas/BusinessPatchBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Business"
        400:
          description: Bad Request
          content: {}
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    get:
      tags:
        - Business
      description: Get business by id
      operationId: GetBusiness
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Business"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - Business
      parameters:
        - name: businessId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/account:
    get:
      description: Get Account
      operationId: GetListAccounts
      tags:
        - Account
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessBankAccount"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_account_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    post:
      description: Account
      operationId: PostAccount
      tags:
        - Account
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_account_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - Account
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  # code in: cmd/lambda/csp/business/cardreader
  /business/{businessId}/reader:
    post:
      tags:
        - Business POS Card Reader
      description: Create Business POS card reader
      operationId: POSCardReader
      parameters:
        - name: businessId
          in: path
          description: Business Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardReaderCreate"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardReader"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Servier Error
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_card_reader_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    get:
      tags:
        - Business POS Card Reader
      description: List of business POS card readers
      operationId: GetBusinessPOSCardReaders
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of items to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Max number of item to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardReader"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_card_reader_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - Business POS Card Reader
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  # code in: cmd/lambda/csp/business/cardreader
  /business/{businessId}/reader/{readerId}:
    patch:
      tags:
        - Business POS Card Reader
      description: Create Business POS card reader
      operationId: POSCardReaderPatch
      parameters:
        - name: businessId
          in: path
          description: Business Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: readerId
          in: path
          description: Reader Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardReaderUpdate"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardReader"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Servier Error
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_card_reader_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    get:
      tags:
        - Business POS Card Reader
      description: Get POS card reader
      operationId: GetBusinessPOSCardReader
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: readerId
          in: path
          description: Reader Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardReader"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_card_reader_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - Business POS Card Reader
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: readerId
          in: path
          description: Reader Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/card:
    post:
      description: Create card
      operationId: PostCard
      tags:
        - Card
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_card_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    get:
      description: Get Card
      operationId: GetCards
      tags:
        - Card
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BankCard"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_card_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - Card
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/card/{cardId}:
    get:
      description: Get Card
      operationId: GetCard
      tags:
        - Card
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: cardId
          in: path
          description: Card id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankCard"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_card_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - Card
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: cardId
          in: path
          description: Card id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/{documentId}/send:
    post:
      description: SubmitDocument
      operationId: PostSubmitDocument
      tags:
        - SubmitDocument
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: document id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_submit_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - SubmitDocument
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: document id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/document:
    post:
      tags:
        - Business Documents
      description: Create Business Document
      operationId: DocumentCreated
      parameters:
        - name: businessId
          in: path
          description: Business Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessDocumentPostBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessDocument"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Servier Error
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    get:
      tags:
        - Business Documents
      description: List of business documents
      operationId: GetBusinessDocuments
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of items to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Max number of item to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessDocument"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - Business Documents
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/document/{documentId}:
    get:
      tags:
        - Business Documents
      description: Get a business document
      operationId: GetBusinessDocument
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessDocument"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    delete:
      description: DELETE
      tags:
        - Business Documents
      operationId: DeleteBusinessDocument
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessDocument"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - Business Documents
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    patch:
      tags:
        - Business Documents
      description: Update a business document
      operationId: UpdateBusinessDocument
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: "#/components/schemas/BusinessDocumentPatchBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessDocument"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
  /business/{businessId}/document/{documentId}/formation:
    post:
      tags:
        - Formation Document
      description: Set Business Document
      operationId: DocumentFormation
      parameters:
        - name: businessId
          in: path
          description: Business Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: document Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessDocument"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Servier Error
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_document_formation_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    delete:
      tags:
        - Formation Document
      description: remove document formation
      operationId: RemoveDocumentFormation
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessDocument"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_document_formation_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - Formation Document
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/document/{documentId}/url:
    get:
      tags:
        - Business Documents
      description: Get business document signed url (valid for 15 minutes)
      operationId: GetBusinessDocumentUrl
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignedUrl"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        connectionType: INTERNET
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responseTemplates:
          application/json: |
            {}
        responses:
          default:
            statusCode: 200
        type: aws_proxy
        uri: ${business_document_url_lambda}
      security:
        - api_key: []
    options:
      tags:
        - Business Documents
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  # code in: cmd/lambda/csp/business/document/status
  /business/{businessId}/document/{documentId}/status:
    get:
      tags:
        - Business Document Status
      description: Get business document Status
      operationId: GetBusinessDocumentStatus
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentStatus"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        connectionType: INTERNET
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responseTemplates:
          application/json: |
            {}
        responses:
          default:
            statusCode: 200
        type: aws_proxy
        uri: ${business_document_status_lambda}
      security:
        - api_key: []
    options:
      tags:
        - Business Document Status
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/member:
    get:
      tags:
        - Business Members
      description: Get a list of business members
      operationId: GetBusinessMembers
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of items to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Max number of item to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessMember"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - Business Members
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/member/{memberId}:
    get:
      tags:
        - Business Members
      description: Get a business member
      operationId: GetBusinessMember
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessMember"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      tags:
        - Business Members
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/status:
    get:
      tags:
        - Business KYC status
      description: Business KYC Status
      operationId: BusinessGetStatus
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessStatus"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_status_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - api_key: []
    options:
      description: OPTIONS
      tags:
        - Business KYC status
      operationId: BusinessOptionsStatus
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
components:
  schemas:
    AddressPostBody:
      title: AddressPostBody
      required:
        - addressType
        - city
        - country
        - postalCode
        - state
        - streetAddress
      type: object
      properties:
        addressType:
          $ref: "#/components/schemas/AddressType"
        streetAddress:
          type: string
          description: Street address
        addressLine2:
          type: string
          description: Unit, suite, or PO Box
          nullable: true
        city:
          type: string
          description: City name
        state:
          type: string
          description: State or province name or short form
        country:
          type: string
          description: Country code (ISO 3166 2-Alpha)
        postalCode:
          type: string
          description: Postal or zip code
      description: Address Post Body Object
      writeOnly: true
    BusinessPatchBody:
      title: Business Patch Object
      type: object
      properties:
        legalName:
          type: string
        dba:
          oneOf:
            - $ref: "#/components/schemas/BusinessDBAList"
            - nullable: true
        entityType:
          $ref: "#/components/schemas/BusinessEntityType"
        industryType:
          $ref: "#/components/schemas/BusinessIndustryType"
        taxId:
          type: string
          nullable: true
        taxIdType:
          anyOf:
            - $ref: "#/components/schemas/BusinessTaxIdType"
            - nullable: true
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        originCountry:
          type: string
          description: Country of incorporation
          nullable: true
        originState:
          type: string
          description: State of incorporation
          nullable: true
        originDate:
          type: string
          description: Date of incorporation
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        operationType:
          oneOf:
            - $ref: "#/components/schemas/OperationType"
            - nullable: true
        activityType:
          oneOf:
            - $ref: "#/components/schemas/ActivityTypeArray"
            - nullable: true
        legalAddress:
          oneOf:
            - $ref: "#/components/schemas/AddressPostBody"
            - nullable: true
        mailingAddress:
          oneOf:
            - $ref: "#/components/schemas/AddressPostBody"
            - nullable: true
        headquarterAddress:
          oneOf:
            - $ref: "#/components/schemas/AddressPostBody"
            - nullable: true
        isRestrictedBusiness:
          type: boolean
          nullable: true
    AddressType:
      title: AddressType
      type: string
      description: Address  Enum
      enum:
        - legal
        - mailing
    Address:
      title: Address
      type: object
      properties:
        addressType:
          $ref: "#/components/schemas/AddressType"
        streetAddress:
          type: string
          description: Street address
        addressLine2:
          type: string
          description: Unit, suite, or PO Box
          nullable: true
        city:
          type: string
          description: City name
        state:
          type: string
          description: State or province name or short form
        country:
          type: string
          description: Country code (ISO 3166 2-Alpha)
        postalCode:
          type: string
          description: Postal or zip code
        latitude:
          type: number
          description: Latitude of address
          format: float64
          nullable: true
        longitude:
          type: number
          description: Longitude of address
          format: float64
          nullable: true
      description: Address Object
      readOnly: true
    KYCStatus:
      title: KYCStatusType
      type: string
      description: KYC status enum
      enum:
        - notStarted
        - bankPending
        - bankApproved
        - bankReview
        - bankDeclined
        - cspPending
        - cspApproved
        - cspDeclined
        - cspReview
    ActivityType:
      title: Activity Type Enum
      type: string
      description: Activity Type Enum
      enum:
        - cash
        - check
        - domesticWireTransfer
        - internationalWireTransfer
        - domesticACH
        - internationalACH
    ActivityTypeArray:
      title: ActivityTypeArray
      description: Activity Type Array
      type: array
      items:
        $ref: "#/components/schemas/ActivityType"
    BusinessTaxIdType:
      title: Business Tax Id Enum
      type: string
      description: Business Tax Id Types
      enum:
        - ssn
        - ein
    BusinessEntityType:
      title: User Business EntityType Enum
      type: string
      description: User Business EntityType Enum
      enum:
        - soleProprietor
        - limitedLiabilityCompany
        - singleMemberLLC
        - generalPartnership
        - limitedPartnership
        - limitedLiabilityPartnership
        - professionalCorporation
        - sCorporation
        - cCorporation
    BusinessIndustryType:
      title: Business Industry Type Enum
      type: string
      description: Business Industry Type Enum
      enum:
        - hotelMotel
        - restaurants
        - plumbingHVAC
        - fitnessSportsCenters
        - healthServices
        - otherFitnessServices
        - realEstate
        - beautyOrBarberShops
        - carWash
        - landscapeServices
        - legalServices
        - massageTanningServices
        - autoDealers
        - onlineRetailer
        - jewelryRetailer
        - retail
        - gasolineServiceStation
        - parkingGarages
        - taxi
        - travelAgency
        - truckingShipping
    OperationType:
      title: Business Operation Type Enum
      type: string
      description: Business Operation Type Enum
      enum:
        - local
        - foreignWithLocal
        - foreign
    BusinessDBA:
      title: BusinessDBA
      description: Business DBA list
      type: string
    BusinessDBAList:
      title: BusinessDBA
      description: Business DBA list
      type: array
      items:
        $ref: "#/components/schemas/BusinessDBA"
    Business:
      title: BusinessType
      type: object
      properties:
        id:
          type: string
        employerNumber:
          type: string
        legalName:
          type: string
        dba:
          $ref: "#/components/schemas/BusinessDBAList"
        entityType:
          anyOf:
            - $ref: "#/components/schemas/BusinessEntityType"
            - nullable: true
        isPublicEntity:
          type: boolean
          nullable: true
        industryType:
          anyOf:
            - $ref: "#/components/schemas/BusinessIndustryType"
            - nullable: true
        taxIdMasked:
          type: string
          nullable: true
        taxIdType:
          anyOf:
            - $ref: "#/components/schemas/BusinessTaxIdType"
            - nullable: true
        email:
          type: string
          nullable: true
        emailVerified:
          type: boolean
        phone:
          type: string
          nullable: true
        phoneVerified:
          type: boolean
        originCountry:
          type: string
          description: Country of incorporation
          nullable: true
        originState:
          type: string
          description: State of incorporation
          nullable: true
        originDate:
          type: string
          description: Date of incorporation
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        kycStatus:
          $ref: "#/components/schemas/KYCStatus"
        purpose:
          type: string
          nullable: true
        operationType:
          $ref: "#/components/schemas/OperationType"
        activityType:
          $ref: "#/components/schemas/ActivityTypeArray"
        isRestrictedBusiness:
          type: boolean
          nullable: true
        legalAddress:
          anyOf:
            - $ref: "#/components/schemas/Address"
            - nullable: true
        mailingAddress:
          anyOf:
            - $ref: "#/components/schemas/Address"
            - nullable: true
        members:
          type: array
          items:
            $ref: "#/components/schemas/BusinessMember"
        formationDocumentId:
          type: string
          nullable: true
        created:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        updated:
          type: string
          description: Date updated
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: Business Object
      readOnly: true
    BusinessDocumentType:
      title: Business Document Type Enum
      type: string
      description: Business Document Type Enum
      enum:
        - articlesOfIncorporation
        - articlesOfOrganization
        - assumedNameCertificate
        - businessLicense
        - certificateOfPartnership
        - partnershipAgreement
        - certificateOfFormation
    DocumentStatus:
      title: Document Status
      type: object
      properties:
        submitted:
          type: string
          description: the submitted timestamp
        documentId:
          type: string
          description: the document id
        bankDocumentId:
          type: string
          description: the id from the bank
        created:
          type: string
          description: the created timestamp
      description: The Document Status
    BusinessDocument:
      title: BusinessDocument
      type: object
      properties:
        id:
          type: string
          description: Business document id number
        businessId:
          type: string
          description: Business id number
        createdUserId:
          type: string
          description: User id that created the business
        number:
          type: string
          description: Business document number (e.g. Passport Number)
        docType:
          $ref: "#/components/schemas/BusinessDocumentType"
        issuingAuth:
          type: string
          description: Issuing authority (e.g. CA SOS)
        issuingState:
          type: string
          description: Issuing state or province (e.g. CA or BC)
          nullable: true
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
        issuedDate:
          type: string
          description: Date Issued
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
          nullable: true
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        updated:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: Business Document Object
    BusinessDocumentPostBody:
      title: BusinessDocumentPostBody
      type: object
      properties:
        number:
          type: string
          description: The document number
        createdUserId:
          type: string
          description: The user whom created this document
        doctype:
          oneOf:
            - $ref: "#/components/schemas/BusinessDocumentType"
          description: The document type e.g `Articles of Formation`
        issuingAuth:
          type: string
          description: Issuing authority (e.g. CA SOS)
        issuingState:
          type: string
          description: Issuing State e.g `CA`
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
        issuedDate:
          type: string
          description: Date Issued
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
        useFormation:
          type: boolean
          nullable: true
          description: Use this document as business formation document
        content:
          type: string
          description: Base64 encoded file content
          format: byte
    BusinessDocumentPatchBody:
      title: BusinessDocumentPatchBody
      type: object
      properties:
        number:
          type: string
          description: Business document number (e.g. Passport Number)
          nullable: true
        docType:
          oneOf:
            - $ref: "#/components/schemas/BusinessDocumentType"
            - nullable: true
        issuingAuth:
          type: string
          description: Issuing authority (e.g. CA SOS)
          nullable: true
        issuingState:
          type: string
          description: Issuing state or province (e.g. CA or BC)
          nullable: true
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
          nullable: true
        issuedDate:
          type: string
          description: Date Issued
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
          nullable: true
        content:
          type: string
          description: Base64 encoded file contents
          format: byte
          nullable: true
      description: Business Document Patch Object
      writeOnly: true
    SignedUrl:
      title: Document Signed URL
      type: object
      properties:
        url:
          type: string
          description: The signed url e.g `https://docId.fileID`
      description: The Document signed url
    BusinessMemberTitleType:
      title: Business Member Title Type Enum
      type: string
      description: Business Member Title Type Enum
      enum:
        - chiefExecutiveOfficer
        - chiefFinancialOfficer
        - chiefOperatingOfficer
        - president
        - vicePresident
        - seniorVicePresident
        - treasurer
        - generalPartner
        - other
    UserTaxIdType:
      title: User Tax Id Enum
      type: string
      description: User Tax Id Types
      enum:
        - ssn
        - itin
    ResidencyStatus:
      title: ResidencyStatus
      type: string
      description: Residency Status Enum
      enum:
        - citizen
        - resident
        - nonResident
    UserResidency:
      title: UserResidency
      required:
        - address
      type: object
      properties:
        country:
          type: string
        status:
          $ref: "#/components/schemas/ResidencyStatus"
      description: User Residency Object
      writeOnly: true
    Occupation:
      title: Occupation
      type: string
      description: Occupation Enum
      enum:
        - financeAccountingTax
        - fireFirstResponders
        - healthcare
        - homemaker
        - laborGeneral
        - laborSkilled
        - lawEnforcementSecurity
        - legalServices
        - privateInvestor
        - professionalAdministrative
        - professionalManagement
        - professionalOther
        - professionalTechnical
        - retired
        - sales
        - selfEmployed
        - student
        - transportation
        - unemployed
    IncomeType:
      title: IncomeType
      type: string
      description: Income Type Enum
      enum:
        - inheritance
        - salary
        - companySales
        - propertySales
        - investments
        - lifeInsurance
        - divorceSettlement
        - othe
    IncomeTypeArray:
      title: IncomeTypeArray
      description: Income Type Array
      type: array
      items:
        $ref: "#/components/schemas/IncomeType"
    BusinessMember:
      title: Business Member Object
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
          nullable: true
        businessId:
          type: string
        firstName:
          type: string
        middleName:
          type: string
          nullable: true
        lastName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        phone:
          type: string
        phoneVerified:
          type: boolean
        dateOfBirth:
          type: string
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        taxId:
          type: string
        taxIdType:
          oneOf:
            - $ref: "#/components/schemas/UserTaxIdType"
        legalAddress:
          $ref: "#/components/schemas/Address"
        residency:
          oneOf:
            - $ref: "#/components/schemas/UserResidency"
            - nullable: true
        citizenshipCountries:
          type: array
          items:
            type: string
        occupation:
          oneOf:
            - $ref: "#/components/schemas/Occupation"
        incomeType:
          oneOf:
            - $ref: "#/components/schemas/IncomeTypeArray"
        activityType:
          oneOf:
            - $ref: "#/components/schemas/ActivityTypeArray"
            - nullable: true
        titleType:
          $ref: "#/components/schemas/BusinessMemberTitleType"
        titleOther:
          type: string
          nullable: true
        ownership:
          type: number
          format: float64
        isControllingManger:
          type: boolean
        kycStatus:
          type: string
          nullable: true
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        updated:
          type: string
          description: Date updated
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: Business Member Object
      readOnly: true
    PartnerBankName:
      title: PartnerBankName
      type: string
      description: Partner Bank Name Enum
      enum:
        - bbva
    AccountType:
      title: Account Type Enum
      type: string
      description: Account Types
      enum:
        - checking
        - savings
    AccountStatus:
      title: Account Status Enum
      type: string
      description: Account Status Types
      enum:
        - active
        - blocked
        - locked
        - closePending
        - closed
        - dormant
        - abandoned
        - escheated
        - chargeOff
    Currency:
      title: Currency Type Enum
      type: string
      description: Currency Types
      enum:
        - usd
    BusinessBankAccount:
      title: Business Bank Account Object
      type: object
      properties:
        id:
          type: string
          description: Bank account id
        partnerBankName:
          $ref: "#/components/schemas/PartnerBankName"
        accountHolderId:
          type: string
          description: Account holder user id
        businessId:
          type: string
          description: Business id
        accountType:
          $ref: "#/components/schemas/AccountType"
        accountStatus:
          $ref: "#/components/schemas/AccountStatus"
        accountNumberMasked:
          type: string
          description: Account number
        routingNumber:
          type: string
          description: ACH routing number
        alias:
          type: string
          description: Account alias
        availableBalance:
          type: number
          description: Available balance
          format: float64
        postedBalance:
          type: number
          description: Posted balance
          format: float64
        currency:
          $ref: "#/components/schemas/Currency"
        opened:
          type: string
          description: Date opened
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        updated:
          type: string
          description: Date updated
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: Business Bank Account Object
      readOnly: true
    Success:
      title: Success
      properties:
        message:
          type: string
    BusinessStatus:
      title: Business Status
      properties:
        status:
          type: string
        items:
          type: array
          items:
            type: string
    BankCardBlock:
      title: BankCardBlock
      type: object
      properties:
        blockCode:
          type: string
        status:
          type: boolean
        blockDate:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
    BankCard:
      title: BankCard
      type: object
      properties:
        id:
          type: string
        cardType:
          type: string
        cardholderName:
          type: string
        businessName:
          type: string
          nullable: true
        isVirtual:
          type: boolean
        bankName:
          type: string
        cardNumberMasked:
          type: string
        cardBrand:
          type: string
        currency:
          type: string
        cardStatus:
          type: string
        dailyATMLimit:
          type: string
        dailyPOSLimit:
          type: string
        dailyTransactionLimit:
          type: string
        cardBlock:
          $ref: "#/components/schemas/BankCardBlock"
        created:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date modified
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
    CardReader:
      title: CardReader
      type: object
      properties:
        id:
          type: string
        businessId:
          type: string
        alias:
          type: string
        deviceType:
          type: string
        serialNumber:
          type: string
        lastConnected:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        created:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        deactivated:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
    CardReaderCreate:
      title: CardReaderCreate
      type: object
      properties:
        businessId:
          type: string
        alias:
          type: string
        deviceType:
          type: string
        serialNumber:
          type: string
    CardReaderUpdate:
      title: CardReaderUpdate
      type: object
      properties:
        id:
          type: string
        businessId:
          type: string
        alias:
          type: string
        lastConnected:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
  headers:
    X-Requested-With:
      description: CORS origin sites allowed
      style: simple
      explode: false
      schema:
        type: string
    Access-Control-Allow-Origin:
      description: CORS origin sites allowed
      style: simple
      explode: false
      schema:
        type: string
    Access-Control-Allow-Methods:
      description: CORS http methods allows
      style: simple
      explode: false
      schema:
        type: string
    Access-Control-Allow-Headers:
      description: CORS request headers allowed
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    api_key:
      in: header
      name: x-api-key
      type: apiKey
