openapi: 3.0.1

paths:
  /consumer/{consumerId}/document:
    post:
      tags:
        - Consumer Documents
      description: Create Consumer Document
      operationId: ConsumerDocumentCreated
      parameters:
        - name: consumerId
          in: path
          description: consumer Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConsumerDocumentPostBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerDocument"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Servier Error
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${consumer_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCognitoPoolAuthorizer: []
    get:
      tags:
        - Consumer Documents
      description: List of consumer documents
      operationId: GetConsumerDocuments
      parameters:
        - name: consumerId
          in: path
          description: consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of items to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Max number of item to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConsumerDocument"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${consumer_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCognitoPoolAuthorizer: []
    options:
      tags:
        - Consumer Documents
      parameters:
        - name: consumerId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  # code in: cmd/lambda/clientapi/consumer/document
  /consumer/{consumerId}/document/{documentId}:
    get:
      tags:
        - Consumer Documents
      description: Get a consumer document
      operationId: GetConsumerDocument
      parameters:
        - name: consumerId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: document id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerDocument"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${consumer_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCognitoPoolAuthorizer: []
    delete:
      description: DELETE
      tags:
        - Consumer Documents
      operationId: DeleteConsumerDocument
      parameters:
        - name: consumerId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: documentent id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerDocument"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${consumer_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCognitoPoolAuthorizer: []
    options:
      tags:
        - Consumer Documents
      parameters:
        - name: consumerId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Documenent id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    patch:
      tags:
        - Consumer Documents
      description: Update a consumer document
      operationId: UpdateConsumerDocument
      parameters:
        - name: consumerId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ConsumerDocumentPatchBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerDocument"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${consumer_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
      security:
        - WiseCognitoPoolAuthorizer: []
  # code in: cmd/lambda/clientapi/consumer/document/url
  /consumer/{consumerId}/document/{documentId}/url:
    get:
      tags:
        - Consumer Document URL
      description: Get consumer document signed url (valid for 15 minutes)
      operationId: GetConsumerDocumentUrl
      parameters:
        - name: consumerId
          in: path
          description: Consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignedUrl"
        404:
          description: Not Found
          content: {}
      x-amazon-apigateway-integration:
        connectionType: INTERNET
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responseTemplates:
          application/json: |
            {}
        responses:
          default:
            statusCode: 200
        type: aws_proxy
        uri: ${consumer_document_url_lambda}
      security:
        - WiseCognitoPoolAuthorizer: []
    options:
      tags:
        - Consumer Document URL
      parameters:
        - name: consumerId
          in: path
          description: consumer id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
components:
  schemas:
    ConsumerDocumentPostBody:
      title: ConsumerDocumentPostBody
      type: object
      properties:
        number:
          type: string
          description: The document number
        createdUserId:
          type: string
          description: The user whom created this document
        doctype:
          oneOf:
            - $ref: "#/components/schemas/ConsumerDocumentType"
          description: The document type e.g `passport`
        issuingAuth:
          type: string
          description: Issuing authority (e.g. CA SOS)
        issuingState:
          type: string
          description: Issuing State e.g `CA`
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
        issuedDate:
          type: string
          description: Date Issued
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
        content:
          type: string
          description: Base64 encoded file content
          format: byte
    ConsumerDocumentPatchBody:
      title: ConsumerDocumentPatchBody
      type: object
      properties:
        number:
          type: string
          description: Consumer document number (e.g. Passport Number)
          nullable: true
        docType:
          oneOf:
            - $ref: "#/components/schemas/ConsumerDocumentType"
            - nullable: true
        issuingAuth:
          type: string
          description: Issuing authority (e.g. CA SOS)
          nullable: true
        issuingState:
          type: string
          description: Issuing state or province (e.g. CA or BC)
          nullable: true
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
          nullable: true
        issuedDate:
          type: string
          description: Date Issued
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
          nullable: true
        content:
          type: string
          description: Base64 encoded file contents
          format: byte
          nullable: true
        updatingContent:
          type: boolean
          nullable: true
      description: Consumer Document Patch Object
      writeOnly: true
    ConsumerDocument:
      title: ConsumerDocument
      type: object
      properties:
        id:
          type: string
          description: Consumer document id number
        createdUserId:
          type: string
          description: Created user id
        number:
          type: string
          description: Consumer document number (e.g. Passport Number)
        docType:
          $ref: "#/components/schemas/ConsumerDocumentType"
        issuingAuth:
          type: string
          description: Issuing authority (e.g. CA SOS)
        issuingState:
          type: string
          description: Issuing state or province (e.g. CA or BC)
          nullable: true
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
        issuedDate:
          type: string
          description: Date Issued
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
          nullable: true
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        updated:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: Consumer Document Object
    SignedUrl:
      title: Document Signed URL
      type: object
      properties:
        url:
          type: string
          description: The signed url e.g `https://docId.fileID`
      description: The Document signed url
    ConsumerDocumentType:
      title: Consumer Document Type Enum
      type: string
      description: Consumer Document Type Enum
      enum:
        - driversLicense
        - passport
        - passportCard
        - workPermit
        - socialSecurityCard
        - stateId
        - alienRegistrationCard
        - usaVisaH1B
        - usaVisaH1C
        - usaVisaH2A
        - usaVisaH2B
        - usaVisaH3
        - usaVisaL1A
        - usaVisaL1B
        - usaVisaO1
        - usaVisaE1
        - usaVisaE3
        - usaVisaI
        - usaVisaP
        - usaVisaTN
        - usaVisaTD
        - usaVisaR1
