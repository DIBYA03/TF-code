openapi: 3.0.1

paths:
  /user/self:
    get:
      tags:
      - Users
      description: Get User Self
      operationId: GetUserSelf
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Not Found
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_self_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - Users
      operationId: OptionsUserSelf
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/{userId}:
    get:
      tags:
      - Users
      description: Get user by id
      operationId: GetUser
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Not Found
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    patch:
      tags:
      - Users
      description: Update user by id
      operationId: UpdateUser
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserPatchBody'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - Users
      operationId: OptionsUser
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/{userId}/phone:
    post:
      tags:
      - Users
      description: Update user phone number
      operationId: UpdateUserPhone
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhonePostBody'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content: {}
        400:
          description: Bad Request
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - Users
      operationId: OptionsUserPhone
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/{userId}/phone/verification:
    post:
      tags:
      - Users
      description: Verify user phone number
      operationId: VerifyUserPhone
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneVerificationPostBody'
        required: true
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content: {}
        400:
          description: Bad Request
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - Users
      operationId: OptionsVerifyUserPhone
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/self/submission:
    post:
      tags:
      - Users
      description: Submit user (kyc ready)
      operationId: SubmitUser
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
           description: Bad Request
           content: {}
        404:
          description: Not Found
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_submission_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - Users
      operationId: OptionsSubmitUser
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/{userId}/notification:
    patch:
      tags:
      - Users
      description: Update user notifications
      operationId: UpdateUserNotifications
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotificationPatchBody'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotification'
        400:
          description: Bad Request
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_notification_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - Users
      operationId: OptionsUserNotifications
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/{userId}/document:
    get:
      tags:
      - User Documents
      description: Get user documents
      operationId: GetUserDocuments
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: Max number of item to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: offset
        in: query
        description: Offset of items to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDocument'
        400:
          description: Bad Request
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    post:
      tags:
      - User Documents
      description: Create user document
      operationId: CreateUserDocument
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDocumentPostBody'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDocument'
        400:
          description: Bad Request
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - User Documents
      operationId: OptionsUserDocuments
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/{userId}/document/{documentId}:
    get:
      tags:
      - User Documents
      description: Get user document
      operationId: GetUserDocument
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: documentId
        in: path
        description: Business id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    patch:
      tags:
      - User Documents
      description: Update user document
      operationId: UpdateUserDocument
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: documentId
        in: path
        description: Document id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserDocumentPatchBody'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDocument'
        404:
          description: Not Found
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    delete:
      tags:
      - User Documents
      description: Delete user document
      operationId: DeleteUserDocument
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: documentId
        in: path
        description: Business id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - User Documents
      operationId: OptionsUserDocument
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: documentId
        in: path
        description: Business id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/{userId}/document/{documentId}/url:
    get:
      tags:
      - User Documents
      description: Get user document signed url (valid for 15 minutes)
      operationId: GetUserDocumentUrl
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: documentId
        in: path
        description: Document id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_document_url_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - User Documents
      operationId: OptionsUserDocumentUrl
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: documentId
        in: path
        description: Document id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/{userId}/device/pushregistration:
    post:
      tags:
      - User Devices
      description: Register user push token for notifications
      operationId: RegisterPushToken
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushRegistrationPostBody'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushRegistration'
        400:
          description: Bad Request
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_device_pushregistration_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - User Devices
      operationId: OptionsRegisterPushToken
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/{userId}/device/pushregistration/{registrationId}:
    get:
      tags:
      - User Devices
      description: Get device push registration
      operationId: GetDevicePushRegistration
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: registrationId
        in: path
        description: Push registration id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushRegistration'
        400:
          description: Bad Request
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_device_pushregistration_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    delete:
      tags:
      - User Devices
      description: Delete device push registration
      operationId: DeleteDevicePushRegistration
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: registrationId
        in: path
        description: Push registration id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content: {}
        400:
          description: Bad Request
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - User Devices
      operationId: OptionsDevicePushRegistration
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: registrationId
        in: path
        description: Push registration id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/{userId}/activity:
    get:
      tags:
        - User Activity
      operationId: GetUserActivity
      description: Get the list of user activity stream
      parameters:
      - name: userId
        in: path
        required: true
        description: user id
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserActivity'
        400:
          description: Not Found
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      security:
        - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_activity_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - User Activity
      operationId: OptionsUserActivity
      parameters:
      - name: userId
        in: path
        required: true
        description: user id
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/{userId}/activity/{activityId}:
    get:
      description: Get activity by id
      tags:
        - User Activity
      operationId: GetUserActivityByID
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: activityId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/UserActivity'
        400:
          description: Not Found
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      security:
        - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_activity_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - User Activity
      operationId: OptionsUserActivityByID
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: activityId
        in: path
        description: Activity id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /user/device/logout:
    post:
      tags:
      - User Devices
      description: Logout user from device
      operationId: LogoutUser
      parameters:
      - name: userId
        in: path
        description: User id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutPostBody'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${user_device_logout_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
      - User Devices
      operationId: OptionsLogoutUser
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
components:
  schemas:
    AddressType:
      title: AddressType
      type: string
      description: Address  Enum
      enum:
      - legal
      - mailing
      - work
      - billing
    Address:
      title: Address
      type: object
      properties:
        addressType:
          $ref: '#/components/schemas/AddressType'
        streetAddress:
          type: string
          description: Street address
        addressLine2:
          type: string
          description: Unit, suite, or PO Box
          nullable: true
        city:
          type: string
          description: City name
        state:
          type: string
          description: State or province name or short form
        country:
          type: string
          description: Country code (ISO 3166 2-Alpha)
        postalCode:
          type: string
          description: Postal or zip code
        latitude:
          type: number
          description: Latitude of address
          format: float64
          nullable: true
        longitude:
          type: number
          description: Longitude of address
          format: float64
          nullable: true
      description: Address Object
      readOnly: true
    AddressPostBody:
      title: AddressPostBody
      required:
      - addressType
      - city
      - country
      - postalCode
      - state
      - streetAddress
      type: object
      properties:
        addressType:
          $ref: '#/components/schemas/AddressType'
        streetAddress:
          type: string
          description: Street address
        addressLine2:
          type: string
          description: Unit, suite, or PO Box
          nullable: true
        city:
          type: string
          description: City name
        state:
          type: string
          description: State or province name or short form
        country:
          type: string
          description: Country code (ISO 3166 2-Alpha)
        postalCode:
          type: string
          description: Postal or zip code
      description: Address Post Body Object
      writeOnly: true
    PhonePostBody:
      title: PhonePostBody
      required:
      - number
      type: object
      properties:
        number:
          type: string
      description: Phone Post Body Object
      writeOnly: true
    PhoneVerificationPostBody:
      title: PhoneVerificationPostBody
      required:
      - code
      - number
      type: object
      properties:
        number:
          type: string
          description: Phone Number in e164 format
        code:
          type: string
          description: Verification Code
      description: Phone Verification Post Object
      writeOnly: true
    EmailVerificationPostBody:
      title: EmailVerificationPostBody
      required:
      - token
      type: object
      properties:
        token:
          type: string
          description: Encrypted verification token
      description: Email verification post object
      writeOnly: true
    KYCStatus:
      title: KYCStatus
      type: string
      description: KYC status enum
      enum:
      - notStarted
      - pending
      - approved
      - review
      - declined
    KYCErrorType:
      title: KYCErrorType
      description: Error due to missing info in user KYC
      type: string
      enum:
      - other
      - inProgress
      - param
      - review
      - deactivated
      - restricted
    KYCErrorParamType:
      title: KYCErrorParamType
      description: KYC parameter input error
      type: string
      enum:
      - isRestricted
      - firstName
      - lastName
      - email
      - phone
      - dateOfBirth
      - taxId
      - taxIdType
      - legalAddress
      - residency
      - citizenship
      - occupation
      - incomeType
      - activityType
    LogoutPostBody:
      title: LogoutPostBody
      required:
      - deviceKey
      type: object
      properties:
        deviceKey:
          type: string
          nullable: true
      description: Logout post body object
      writeOnly: true
    Occupation:
      title: Occupation
      type: string
      description: Occupation Enum
      enum:
      - agriculture
      - clergyMinistryStaff
      - constructionIndustrial
      - education
      - financeAccountingTax
      - fireFirstResponders
      - healthcare
      - homemaker
      - laborGeneral
      - laborSkilled
      - lawEnforcementSecurity
      - legalServices
      - military
      - notaryRegistrar
      - privateInvestor
      - professionalAdministrative
      - professionalManagement
      - professionalOther
      - professionalTechnical
      - retired
      - sales
      - selfEmployed
      - student
      - transportation
      - unemployed
    ResidencyStatus:
      title: ResidencyStatus
      type: string
      description: Residency Status Enum
      enum:
      - citizen
      - resident
      - nonResident
    UserResidency:
      title: UserResidency
      required:
      - address
      type: object
      properties:
        country:
          type: string
        status:
          $ref: '#/components/schemas/ResidencyStatus'
      description: User Residency Object
      writeOnly: true
    UserTaxIdType:
      title: User Tax Id Enum
      type: string
      description: User Tax Id Types
      enum:
      - ssn
      - itin
    IncomeType:
      title: IncomeType
      type: string
      description: Income Type Enum
      enum:
      - inheritance
      - salary
      - companySales
      - propertySales
      - investments
      - lifeInsurance
      - divorceSettlement
      - other
    IncomeTypeArray:
      title: IncomeTypeArray
      description: Income Type Array
      type: array
      items:
        $ref: '#/components/schemas/IncomeType'
    ActivityType:
      title: ActivityType
      type: string
      description: Activity Type Enum
      enum:
      - cash
      - check
      - domesticWireTransfer
      - internationalWireTransfer
      - domesticACH
      - internationalACH
    ActivityTypeArray:
      title: ActivityTypeArray
      description: Activity Type Array
      type: array
      items:
        $ref: '#/components/schemas/ActivityType'
    User:
      title: User Object
      type: object
      properties:
        id:
          type: string
          description: User id
        partnerId:
          type: string
        firstName:
          type: string
        middlename:
          type: string
        lastName:
          type: string
        taxIdMasked:
          type: string
        taxIdType:
          $ref: '#/components/schemas/UserTaxIdType'
        email:
          type: string
          nullable: true
        emailVerified:
          type: boolean
        phone:
          type: string
        phoneVerified:
          type: boolean
        dateOfBirth:
          type: string
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        kycStatus:
          $ref: '#/components/schemas/KYCStatus'
        legalAddress:
          $ref: '#/components/schemas/Address'
        mailingAddress:
          oneOf:
          - $ref: '#/components/schemas/AddressPostBody'
          - nullable: true
        workAddress:
          oneOf:
          - $ref: '#/components/schemas/AddressPostBody'
          - nullable: true
        residency:
          $ref: '#/components/schemas/UserResidency'
        citizenshipCountries:
          type: array
          items:
            type: string
        occupation:
          $ref: '#/components/schemas/Occupation'
        incomeType:
          $ref: '#/components/schemas/IncomeTypeArray'
        activityType:
          $ref: '#/components/schemas/ActivityTypeArray'
        notification:
          $ref: '#/components/schemas/UserNotification'
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date modified
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: User Object
      readOnly: true
    UserPatchBody:
      title: UserPatchBody
      type: object
      properties:
        firstName:
          type: string
          nullable: true
        middleName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        dateOfBirth:
          type: string
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        taxId:
          type: string
          nullable: true
        taxIdType:
          oneOf:
          - $ref: '#/components/schemas/UserTaxIdType'
          - nullable: true
        residency:
          oneOf:
          - $ref: '#/components/schemas/UserResidency'
          - nullable: true
        citizenshipCountries:
          type: array
          nullable: true
          items:
            type: string
        occupation:
          oneOf:
          - $ref: '#/components/schemas/Occupation'
          - nullable: true
        incomeType:
          oneOf:
          - $ref: '#/components/schemas/IncomeTypeArray'
          - nullable: true
        activityType:
          oneOf:
          - $ref: '#/components/schemas/ActivityTypeArray'
          - nullable: true
        legalAddress:
          oneOf:
          - $ref: '#/components/schemas/AddressPostBody'
          - nullable: true
        mailingAddress:
          oneOf:
          - $ref: '#/components/schemas/AddressPostBody'
          - nullable: true
        workAddress:
          oneOf:
          - $ref: '#/components/schemas/AddressPostBody'
          - nullable: true
      description: User Patch Object
      writeOnly: true
    UserDocumentType:
      title: User Document Type Enum
      type: string
      description: User Document Type Enum
      enum:
      - driversLicense
      - passport
      - passportCard
      - residencyPermit
      - workPermit
      - socialSecurityCard
    UserDocument:
      title: UserDocument
      type: object
      properties:
        id:
          type: string
          description: Document id number
        createdUserId:
          type: string
          description: Owner user id number
        number:
          type: string
          description: Id number from original document
          nullable: true
        docType:
          oneOf:
            - $ref: '#/components/schemas/UserDocumentType'
            - nullable: true
        issuingState:
          type: string
          description: Issuing state or province (e.g. CA or BC)
          nullable: true
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
          nullable: true
        issuedDate:
          type: string
          description: Date Issued
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date modified
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: User Document Object
      readOnly: true
    UserDocumentPostBody:
      title: UserDocumentPostBody
      required:
      - contentType
      - contents
      - docType
      - number
      type: object
      properties:
        number:
          type: string
          description: Id number from original document
          nullable: true
        docType:
          oneOf:
            - $ref: '#/components/schemas/UserDocumentType'
            - nullable: true
        issuingState:
          type: string
          description: Issuing state or province (e.g. CA or BC)
          nullable: true
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
          nullable: true
        issuedDate:
          type: string
          description: Date Issued
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
      description: User Document Post Object
      writeOnly: true
    UserDocumentPatchBody:
      title: UserDocumentPatchBody
      type: object
      properties:
        number:
          type: string
          description: Id number from original document
          nullable: true
        docType:
          oneOf:
          - $ref: '#/components/schemas/UserDocumentType'
          - nullable: true
        issuingState:
          type: string
          description: Issuing state or province (e.g. CA or BC)
          nullable: true
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
          nullable: true
        issuedDate:
          type: string
          description: Date Issued
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
          nullable: true
      writeOnly: true
    DeviceType:
      title: Device Type
      type: string
      description: Device Type Enum
      enum:
      - android
      - ios
      - web
    PushTokenType:
      title: Push Token Type
      type: string
      description: Push Token Type Enum
      enum:
      - fcm
    PushRegistration:
      title: Push Registration Object
      type: object
      properties:
        id:
          type: string
          description: Push registration id
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        tokenType:
          $ref: '#/components/schemas/PushTokenType'
        deviceKey:
            type: string
            description: device key
        token:
          type: string
          description: Device push token
        created:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date modified
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: PushRegistration Registration Object
      readOnly: true
    PushRegistrationPostBody:
      title: Device Registration Post Object
      required:
      - deviceType
      - token
      - tokenType
      - deviceKey
      - language
      type: object
      properties:
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        tokenType:
          $ref: '#/components/schemas/PushTokenType'
        token:
          type: string
          description: Push token
        deviceKey:
          type: string
          description: device key
        language:
          type: string
          description: the user preferred language
      description: Device Registration Post Object
      writeOnly: true
    UserNotification:
      title: User Notification Object
      type: object
      properties:
        transfers:
          type: boolean
          description: Send on user  notification changes
        transactions:
          type: boolean
          description:  Send on user  notification changes
        contacts:
          type: boolean
          description: Send on user  notification changes
      description: User Notification Object
      readOnly: true
    UserNotificationPatchBody:
      title: User Notification Patch Object
      type: object
      properties:
        transfers:
          type: boolean
          description: Send on notification changes
          nullable: true
        transactions:
          type: boolean
          description: Send on notification changes
          nullable: true
        contacts:
          type: boolean
          description: Send on notification changes
          nullable: true
      description: User Notification Patch Object
    UserActivity:
      title: User Activity
      type: object
      properties:
        id:
          type: string
          description: Activity id
        entityId:
          type: string
          description: Entity id e.g `userId`
        text:
          type: string
        created:
           type: string
        resourceId:
          type: string
          description: The resource id attached to the activity, e.g `transactionId`
        activityType:
          type: string
      description: User Activity Object
