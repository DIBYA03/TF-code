openapi: 3.0.1

paths:
  /business/{businessId}/member:
    get:
      tags:
        - Business Members
      description: Get a list of business members
      operationId: GetBusinessMembers
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of items to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Max number of item to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessMember"
        400:
          description: Bad Request
          content: {}
      security:
        - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    post:
      tags:
        - Business Members
      description: Create a business member
      operationId: CreateBusinessMember
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessMemberPostBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessMember"
        404:
          description: Not Found
          content: {}
      security:
        - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business Members
      operationId: OptionsBusinessMembers
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /business/{businessId}/member/{memberId}:
    get:
      tags:
        - Business Members
      description: Get a business member
      operationId: GetBusinessMember
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessMember"
        400:
          description: Bad Request
          content: {}
      security:
        - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    delete:
      tags:
        - Business Members
      description: Delete a business member
      operationId: DeleteBusinessMember
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
        404:
          description: Not Found
          content: {}
      security:
        - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business Members
      operationId: OptionsBusinessMember
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
    patch:
      tags:
        - Business Members
      description: Update a business member
      operationId: UpdateBusinessMember
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: "#/components/schemas/BusinessMemberPatchBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessMember"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      security:
        - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
  /business/member/{memberId}/submission:
    post:
      tags:
        - Business Members
      description: Submit a business member
      operationId: SubmitBusinessMember
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessMember"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      security:
        - WiseCognitoPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_member_submission_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business Members
      operationId: OptionsBusinessMemberSubmission
      parameters:
        - name: memberId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: '#/components/headers/X-Requested-With'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,x-wise-business-id'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
components:
  schemas:
    BusinessMemberTitleType:
      title: Business Member Title Type Enum
      type: string
      description: Business Member Title Type Enum
      enum:
        - chiefExecutiveOfficer
        - chiefFinancialOfficer
        - chiefOperatingOfficer
        - president
        - vicePresident
        - seniorVicePresident
        - treasurer
        - secretary
        - generalPartner
        - manager
        - member
        - owner
        - other
    BusinessMember:
      title: Business Member Object
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
          nullable: true
        businessId:
          type: string
        firstName:
          type: string
        middleName:
          type: string
          nullable: true
        lastName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        phone:
          type: string
        phoneVerified:
          type: boolean
        dateOfBirth:
          type: string
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        taxId:
          type: string
        taxIdType:
          oneOf:
          - $ref: '#/components/schemas/UserTaxIdType'
        legalAddress:
          $ref: '#/components/schemas/Address'
          nullable: true
        residency:
          oneOf:
          - $ref: '#/components/schemas/UserResidency'
          - nullable: true
        citizenshipCountries:
          type: array
          items:
            type: string
        occupation:
          oneOf:
          - $ref: '#/components/schemas/Occupation'
        incomeType:
          oneOf:
          - $ref: '#/components/schemas/IncomeTypeArray'
        activityType:
          oneOf:
          - $ref: '#/components/schemas/ActivityTypeArray'
          - nullable: true
        titleType:
          $ref: "#/components/schemas/BusinessMemberTitleType"
        titleOther:
          type: string
          nullable: true
        ownership:
          type: integer
          format: int32
        isControllingManger:
           type: boolean
        kycStatus:
          type: string
          nullable: true
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date modified
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: Business Member Object
      readOnly: true
    BusinessMemberPostBody:
      title: Business Member Post Object
      required:
        - firstName
        - lastName
        - phone
        - ownerType
        - ownership
        - titleType
      type: object
      properties:
        userId:
          type: string
          nullable: true
        businessId:
          type: string
        firstName:
          type: string
        middleName:
          type: string
          nullable: true
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        dateOfBirth:
          type: string
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        taxId:
          type: string
        taxIdType:
          oneOf:
          - $ref: '#/components/schemas/UserTaxIdType'
        legalAddress:
          $ref: '#/components/schemas/Address'
        residency:
          oneOf:
          - $ref: '#/components/schemas/UserResidency'
          - nullable: true
        citizenshipCountries:
          type: array
          items:
            type: string
        occupation:
          oneOf:
          - $ref: '#/components/schemas/Occupation'
        incomeType:
          oneOf:
          - $ref: '#/components/schemas/IncomeTypeArray'
        activityType:
          oneOf:
          - $ref: '#/components/schemas/ActivityTypeArray'
          - nullable: true
        titleType:
          $ref: "#/components/schemas/BusinessMemberTitleType"
        titleOther:
          type: string
          nullable: true
        ownership:
          type: integer
          format: int32
        isControllingManger:
          type: boolean
      description: Business Member Post Object
      writeOnly: true
    BusinessMemberPatchBody:
      title: Business Member Patch Object
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
          nullable: true
        businessId:
          type: string
        firstName:
          type: string
          nullable: true
        middleName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        dateOfBirth:
          type: string
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        taxId:
          type: string
          nullable: true
        taxIdType:
          oneOf:
          - $ref: '#/components/schemas/UserTaxIdType'
          - nullable: true
        legalAddress:
          $ref: '#/components/schemas/Address'
          nullable: true
        residency:
          oneOf:
          - $ref: '#/components/schemas/UserResidency'
          - nullable: true
        citizenshipCountries:
          type: array
          nullable: true
          items:
            type: string
        occupation:
          oneOf:
          - $ref: '#/components/schemas/Occupation'
          - nullable: true
        incomeType:
          oneOf:
          - $ref: '#/components/schemas/IncomeTypeArray'
          - nullable: true
        activityType:
          oneOf:
          - $ref: '#/components/schemas/ActivityTypeArray'
          - nullable: true
        isControllingManger:
          anyOf:
            - type: boolean
            - nullable: true
        titleType:
          anyOf:
            - $ref: "#/components/schemas/BusinessMemberTitleType"
            - nullable: true
        titleOther:
          type: string
          nullable: true
        ownership:
          type: integer
          format: int32
          nullable: true
      description: Business Member Patch Object
      writeOnly: true
