openapi: 3.0.1
info:
  title: ${api_name}
  description: ${api_name} ${api_version}
  version: ${api_version}
servers:
- url: https://${domain_name}/${api_version}
  description: ${server_description}
- url: https://${domain_name}/${api_stage}
  description: ${server_description}
paths:
  /business/{businessId}/activity:
    get:
      tags:
      - Business Activity
      description: Get all business activities
      operationId: GetBusinessActivities
      parameters:
      - name: businessId
        in: path
        description: Business id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: Max number of item to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: offset
        in: query
        description: Offset of items to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Activity"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        connectionType: INTERNET
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responseTemplates:
          application/json: |
            {}
        responses:
          default:
            statusCode: 200
        type: aws_proxy
        uri: ${business_activity_lambda}
      security:
      - WiseUsersSandboxTestingPoolAuthorizer: []
    options:
      tags:
      - Business Activity
      parameters:
      - name: businessId
        in: path
        description: Business id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              description: CORS origin sites allowed
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Origin:
              description: CORS origin sites allowed
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Methods:
              description: CORS http methods allows
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Headers:
              description: CORS request headers allowed
              style: simple
              explode: false
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/activity/{activityId}:
    get:
      tags:
      - Business Activity
      description: Get business activity by id
      operationId: GetBusinessActivity
      parameters:
      - name: businessId
        in: path
        description: Business id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: activityId
        in: path
        description: Activity id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        connectionType: INTERNET
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responseTemplates:
          application/json: |
            {}
        responses:
          default:
            statusCode: 200
        type: aws_proxy
        uri: ${business_activity_lambda}
      security:
      - WiseUsersSandboxTestingPoolAuthorizer: []
    options:
      tags:
      - Business Activity
      parameters:
      - name: businessId
        in: path
        description: Business id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: activityId
        in: path
        description: Transaction id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              description: CORS origin sites allowed
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Origin:
              description: CORS origin sites allowed
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Methods:
              description: CORS http methods allows
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Headers:
              description: CORS request headers allowed
              style: simple
              explode: false
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
components:
  schemas:
    Activity:
      title: BusinessActivity
      type: object
      properties:
        id:
          type: string
        entityId:
          type: string
        activityType:
          type: string
        action:
          type: string
        text:
          type: string
        resourceId:
          type: string
        activityDate:
          type: string
        created:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date modified
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
