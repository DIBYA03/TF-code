openapi: 3.0.1
info:
  title: ${api_name}
  description: ${api_name} ${api_version}
  version: ${api_version}
servers:
- url: https://${domain_name}/${api_version}
  description: ${server_description}
- url: https://${domain_name}/${api_stage}
  description: ${server_description}
paths:
  /banking/business/{businessId}/transaction/export:
    get:
      tags:
      - Business Transactions
      description: Export transactions in CSV format
      operationId: ExportBusinessTransactions
      parameters:
      - name: businessId
        in: path
        description: Business id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: startDate
        in: query
        description: Transaction start date
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endDate
        in: query
        description: Transaction end date
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            text/csv:
              schema:
                type: string
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        connectionType: INTERNET
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responseTemplates:
          application/json: |
            {}
        responses:
          default:
            statusCode: 200
        type: aws_proxy
        uri: ${banking_business_transaction_export_lambda}
      security:
      - WiseUsersSandboxTestingPoolAuthorizer: []
    options:
      tags:
      - Business Transactions
      parameters:
      - name: businessId
        in: path
        description: Business id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              description: CORS origin sites allowed
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Origin:
              description: CORS origin sites allowed
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Methods:
              description: CORS http methods allows
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Headers:
              description: CORS request headers allowed
              style: simple
              explode: false
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /banking/business/{businessId}/transaction:
    get:
      tags:
      - Business Transactions
      description: Get all business transactions
      operationId: GetBusinessTransactions
      parameters:
      - name: businessId
        in: path
        description: Business id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: Max number of item to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: offset
        in: query
        description: Offset of items to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessTransaction"
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        connectionType: INTERNET
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responseTemplates:
          application/json: |
            {}
        responses:
          default:
            statusCode: 200
        type: aws_proxy
        uri: ${banking_business_transaction_lambda}
      security:
      - WiseUsersSandboxTestingPoolAuthorizer: []
    options:
      tags:
      - Business Transactions
      parameters:
      - name: businessId
        in: path
        description: Business id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              description: CORS origin sites allowed
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Origin:
              description: CORS origin sites allowed
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Methods:
              description: CORS http methods allows
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Headers:
              description: CORS request headers allowed
              style: simple
              explode: false
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /banking/business/{businessId}/transaction/{transactionId}:
    get:
      tags:
      - Business Transactions
      description: Get business transaction by id
      operationId: GetBusinessTransaction
      parameters:
      - name: businessId
        in: path
        description: Business id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: transactionId
        in: path
        description: Transaction id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: Max number of item to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: offset
        in: query
        description: Offset of items to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessTransaction'
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        connectionType: INTERNET
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responseTemplates:
          application/json: |
            {}
        responses:
          default:
            statusCode: 200
        type: aws_proxy
        uri: ${banking_business_transaction_lambda}
      security:
      - WiseUsersSandboxTestingPoolAuthorizer: []
    patch:
      tags:
      - Business Transactions
      description: Update business transaction by id
      operationId: UpdateBusinessTransaction
      parameters:
      - name: businessId
        in: path
        description: Business id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: transactionId
        in: path
        description: Transaction id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: "#/components/schemas/TransactionPatchBody"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessTransaction'
        400:
          description: Bad Request
          content: {}
      x-amazon-apigateway-integration:
        connectionType: INTERNET
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responseTemplates:
          application/json: |
            {}
        responses:
          default:
            statusCode: 200
        type: aws_proxy
        uri: ${banking_business_transaction_lambda}
      security:
      - WiseUsersSandboxTestingPoolAuthorizer: []
    options:
      tags:
      - Business Transactions
      parameters:
      - name: businessId
        in: path
        description: Business id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: transactionId
        in: path
        description: Transaction id number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              description: CORS origin sites allowed
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Origin:
              description: CORS origin sites allowed
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Methods:
              description: CORS http methods allows
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Headers:
              description: CORS request headers allowed
              style: simple
              explode: false
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
components:
  schemas:
    BusinessTransaction:
      title: BusinessTransaction
      type: object
      properties:
        id:
          type: string
        businessId:
          type: string
        bankName:
          type: string
        bankTransactionId:
          type: string
        transactionType:
          type: string
        accountId:
          type: string
        cardId:
          type: string
        codeType:
          type: string
        amount:
          type: number
          format: float64
        currency:
          type: string
        cardTransaction:
          $ref: "#/components/schemas/BusinessCardTransaction"
        holdTransaction:
          $ref: "#/components/schemas/BusinessCardHoldTransaction"
        bankMoneyTransferId:
          type: string
        moneyTransferDesc:
          type: string
        transactionDesc:
          type: string
        transactionDate:
          type: string
          description: Transaction date
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        created:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date modified
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
    TransactionPatchBody:
      title: TransactionPatchBody
      type: object
      properties:
        id:
          type: string
        businessId:
          type: string
        transactionId:
          type: string
        transactionNotes:
          type: string
    BusinessCardTransaction:
      title: BusinessCardTransaction
      type: object
      properties:
        id:
          type: string
        cardTransactionId:
          type: string
        transactionNetwork:
          type: string
        authAmount:
          type: number
          format: float64
        authDate:
          type: string
          description: Date modified
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        authResponseCode:
          type: string
        authNumber:
          type: string
        transactionType:
          type: string
        localAmount:
          type: number
          format: float64
        localCurrency:
          type: string
        localDate:
          type: string
          description: Date modified
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        posEntryMode:
          type: string
        posConditionCode:
          type: string
        acquirerBIN:
          type: string
        merchantId:
          type: string
        merchantCategoryCode:
          type: string
        merchantTerminal:
          type: string
        merchantName:
          type: string
        merchantStreetAddress:
          type: string
        merchantCity:
          type: string
        merchantState:
          type: string
        merchantCountry:
          type: string
        created:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date modified
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
    BusinessCardHoldTransaction:
      title: BusinessCardHoldTransaction
      type: object
      properties:
        id:
          type: string
        transactionId:
          type: string
        number:
          type: string
        amount:
          type: number
          format: float64
        date:
          type: string
          description: Card hold date
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        expiryDate:
          type: string
          description: Expiry date
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        created:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
