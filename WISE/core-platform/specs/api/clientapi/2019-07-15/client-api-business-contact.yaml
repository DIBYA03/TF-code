openapi: 3.0.1
info:
  title: ${api_name}
  description: ${api_name} ${api_version}
  version: ${api_version}
servers:
- url: https://${domain_name}/${api_version}
  description: ${server_description}
- url: https://${domain_name}/${api_stage}
  description: ${server_description}
paths:
  /business/{businessId}/contact:
    get:
      tags:
        - Business Contact
      description: Get list of contacts
      operationId: GetContacts
      parameters:
        - name: offset
          in: query
          description: Offset of items to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Max number of item to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contact"
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_contact_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    post:
      tags:
        - Business Contact
      description: Create a Contact
      operationId: CreateContact
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactPostBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_contact_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business Contact
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/contact/{contactId}:
    get:
      tags:
        - Business Contact
      description: Get Contact by id
      operationId: GetContact
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: contactId
          in: path
          description: Contact id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactFull"
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_contact_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    delete:
      tags:
        - Business Contact
      description: Delete Contact by id
      operationId: DeleteContact
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: contactId
          in: path
          description: Contact id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_contact_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business Contact
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: contactId
          in: path
          description: Contact id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    patch:
      tags:
        - Business Contact
      description: Update a contact by id
      operationId: UpdateContact
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: contactId
          in: path
          description: Contact id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ContactPatchBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_contact_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
components:
  schemas:
    AddressType:
      title: AddressType
      type: string
      description: Address  Enum
      enum:
        - legal
        - mailing
        - shipping
    ContactCategory:
      title: ContactCategory
      type: string
      description: Type  Enum
      enum:
        - vendor
        - contractor
    ContactType:
      title: ContactType
      type: string
      description: Type  Enum
      enum:
        - person
        - business
    ContactPostBody:
      title: ContactPostBody
      required:
        - type
        - category
        - engagement
        - jobTitle
        - firstName
        - lastName
        - phoneNumber
        - email
      type: object
      properties:
        category:
          $ref: "#/components/schemas/ContactCategory"
        type:
          $ref: "#/components/schemas/ContactType"
        engagement:
          type: string
        jobTitle:
          type: string
        businessName:
          type: string
          nullable: true
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
    ContactPatchBody:
      title: ContactPatchBody
      type: object
      properties:
        category:
          $ref: "#/components/schemas/ContactCategory"
          nullable: true
        type:
          $ref: "#/components/schemas/ContactType"
          nullable: true
        engagement:
          type: string
          nullable: true
        jobTitle:
          type: string
          nullable: true
        businessName:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        phoneNumber:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        mailingAddress:
          anyOf:
            - $ref: "#/components/schemas/AddressPostBody"
            - nullable: true
    Contact:
      title: Contact
      type: object
      properties:
        id:
          type: string
        category:
          $ref: "#/components/schemas/ContactCategory"
        type:
          $ref: "#/components/schemas/ContactType"
        engagement:
          type: string
        jobTitle:
          type: string
        businessName:
          type: string
          nullable: true
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        mailingAddress:
          anyOf:
            - $ref: "#/components/schemas/AddressType"
            - nullable: true
        created:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date modified
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
    ContactFull:
      title: ContactFull
      type: object
      properties:
        id:
          type: string
        category:
          $ref: "#/components/schemas/ContactCategory"
        type:
          $ref: "#/components/schemas/ContactType"
        engagement:
          type: string
        jobTitle:
          type: string
        businessName:
          type: string
          nullable: true
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        mailingAddress:
          anyOf:
            - $ref: "#/components/schemas/AddressType"
            - nullable: true
        linkedAccount:
          type: array
          items:
            $ref: "#/components/schemas/LinkedBankAccount"
        linkedCard:
          type: array
          items:
            $ref: "#/components/schemas/LinkedCard"
        created:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date modified
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
    AddressPostBody:
      title: AddressPostBody
      required:
        - addressType
        - city
        - country
        - postalCode
        - state
        - streetAddress
      type: object
      properties:
        addressType:
          $ref: "#/components/schemas/AddressType"
        streetAddress:
          type: string
          description: Street address
        addressLine2:
          type: string
          description: Unit, suite, or PO Box
          nullable: true
        city:
          type: string
          description: City name
        state:
          type: string
          description: State or province name or short form
        country:
          type: string
          description: Country code (ISO 3166 2-Alpha)
        postalCode:
          type: string
          description: Postal or zip code
      description: Address Post Body Object
      writeOnly: true
  headers:
    X-Requested-With:
      description: CORS origin sites allowed
      style: simple
      explode: false
      schema:
        type: string
    Access-Control-Allow-Origin:
      description: CORS origin sites allowed
      style: simple
      explode: false
      schema:
        type: string
    Access-Control-Allow-Methods:
      description: CORS http methods allows
      style: simple
      explode: false
      schema:
        type: string
    Access-Control-Allow-Headers:
      description: CORS request headers allowed
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    WiseUsersSandboxTestingPoolAuthorizer:
      type: apiKey
      description: Cognito Auth Server
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
        - ${cognito_pool_arn}
        type: cognito_user_pools
