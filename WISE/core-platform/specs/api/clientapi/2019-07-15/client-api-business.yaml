openapi: 3.0.1
info:
  title: ${api_name}
  description: ${api_name} ${api_version}
  version: ${api_version}
servers:
  - url: https://${domain_name}/${api_version}
    description: ${server_description}
  - url: https://${domain_name}/${api_stage}
    description: ${server_description}
paths:
  /business:
    get:
      tags:
        - Business
      description: Get list of businesses
      operationId: GetBusinesses
      parameters:
        - name: offset
          in: query
          description: Offset of items to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Max number of item to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Business"
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    post:
      tags:
        - Business
      description: Create a business
      operationId: CreateBusiness
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessPostBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Business"
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}:
    get:
      tags:
        - Business
      description: Get business by id
      operationId: GetBusiness
      parameters:
        - name: businessId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Business"
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business
      parameters:
        - name: businessId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    patch:
      tags:
        - Business
      description: Update a business by id
      operationId: UpdateBusiness
      parameters:
        - name: businessId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: "#/components/schemas/BusinessPatchBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Business"
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
  /business/{businessId}/phone:
    post:
      tags:
        - Business
      description: Update business phone
      operationId: UpdateBusinessPhone
      parameters:
        - name: businessId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhonePostBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/phone/verification:
    post:
      tags:
        - Business
      description: Verify business phone
      operationId: VerifyBusinessPhone
      parameters:
        - name: businessId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhoneVerificationPostBody"
        required: true
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business
      description: Verify business phone
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/email:
    post:
      tags:
        - Business
      description: Update business email
      operationId: UpdateBusinessEmail
      parameters:
        - name: businessId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailPostBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/email/verification:
    post:
      tags:
        - Business
      description: Verify business email
      operationId: VerifyBusinessEmail
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailVerificationPostBody"
        required: true
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/document:
    get:
      tags:
        - Business Documents
      description: Start list of business documents
      operationId: GetBusinessDocuments
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of items to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Max number of item to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: 200 response
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessDocument"
        400:
          description: Bad Request
          content: {}
        404:
          description: Not Found
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    post:
      tags:
        - Business Documents
      description: Create a business document
      operationId: CreateBusinessDocument
      parameters:
        - name: businessId
          in: path
          description: Business Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessDocumentPostBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessDocument"
        400:
          description: Bad Request
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business Documents
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /business/{businessId}/document/{documentId}:
    get:
      tags:
        - Business Documents
      description: Get a business document
      operationId: GetBusinessDocument
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessDocument"
        404:
          description: Not Found
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    delete:
      tags:
        - Business Documents
      description: Delete a business document
      operationId: DeleteBusinessDocument
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
        404:
          description: Not Found
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
    options:
      tags:
        - Business Documents
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    patch:
      tags:
        - Business Documents
      description: Update a business document
      operationId: UpdateBusinessDocument
      parameters:
        - name: businessId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Business id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json, application/json-patch+json:
            schema:
              $ref: "#/components/schemas/BusinessDocumentPatchBody"
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessDocument"
        404:
          description: Not Found
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        connectionType: INTERNET
        uri: ${business_document_lambda}
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        responses:
          default:
            statusCode: 200
        responseTemplates:
          application/json: |
            {}
  /business/{businessId}/document/{documentId}/url:
    get:
      tags:
        - Business Documents
      description: Get business document signed url (valid for 15 minutes)
      operationId: GetBusinessDocumentUrl
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignedUrl"
        404:
          description: Not Found
          content: {}
      security:
        - WiseUsersSandboxTestingPoolAuthorizer: []
      x-amazon-apigateway-integration:
        connectionType: INTERNET
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responseTemplates:
          application/json: |
            {}
        responses:
          default:
            statusCode: 200
        type: aws_proxy
        uri: ${business_document_signedurl_lambda}
    options:
      tags:
        - Business Documents
      parameters:
        - name: businessId
          in: path
          description: Business id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: documentId
          in: path
          description: Document id number
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              $ref: "#/components/headers/X-Requested-With"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: '''DELETE, GET, OPTIONS, PATCH, POST'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With,X-Amz-Security-Token,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
components:
  schemas:
    AddressType:
      title: AddressType
      type: string
      description: Address  Enum
      enum:
        - legal
        - mailing
        - headquarter
    Address:
      title: Address
      type: object
      properties:
        addressType:
          $ref: "#/components/schemas/AddressType"
        streetAddress:
          type: string
          description: Street address
        addressLine2:
          type: string
          description: Unit, suite, or PO Box
          nullable: true
        city:
          type: string
          description: City name
        state:
          type: string
          description: State or province name or short form
        country:
          type: string
          description: Country code (ISO 3166 2-Alpha)
        postalCode:
          type: string
          description: Postal or zip code
        latitude:
          type: number
          description: Latitude of address
          format: float64
          nullable: true
        longitude:
          type: number
          description: Longitude of address
          format: float64
          nullable: true
      description: Address Object
      readOnly: true
    AddressPostBody:
      title: AddressPostBody
      required:
        - addressType
        - city
        - country
        - postalCode
        - state
        - streetAddress
      type: object
      properties:
        addressType:
          $ref: "#/components/schemas/AddressType"
        streetAddress:
          type: string
          description: Street address
        addressLine2:
          type: string
          description: Unit, suite, or PO Box
          nullable: true
        city:
          type: string
          description: City name
        state:
          type: string
          description: State or province name or short form
        country:
          type: string
          description: Country code (ISO 3166 2-Alpha)
        postalCode:
          type: string
          description: Postal or zip code
      description: Address Post Body Object
      writeOnly: true
    PhonePostBody:
      title: PhonePostBody
      required:
        - number
      type: object
      properties:
        number:
          type: string
      description: Phone Post Body Object
      writeOnly: true
    PhoneVerificationPostBody:
      title: PhoneVerificationPostBody
      required:
        - code
        - number
      type: object
      properties:
        number:
          type: string
          description: Phone Number in e164 format
        code:
          type: string
          description: Verification Code
      description: Phone Verification Post Object
      writeOnly: true
    EmailPostBody:
      title: EmailPostBody
      required:
        - address
      type: object
      properties:
        address:
          type: string
      description: Email Post Body Object
      writeOnly: true
    EmailVerificationPostBody:
      required:
        - token
      type: object
      properties:
        token:
          type: string
          description: Encrypted verification token
      description: Email Verification Post Object
      writeOnly: true
    KYCStatus:
      title: KYCStatus
      type: string
      description: KYC status enum
      enum:
        - notStarted
        - pending
        - approved
        - review
        - declined
    KYCReviewType:
      title: KYCReviewType
      description: KYC review typee
      type: string
      enum:
        - legalAddress
        - taxId
        - fullname
        - dateOfBirth
        - mismatch
        - documentRequired
        - idVerification
    BusinessKYCResponse:
      title: BusinessKYCResponse
      description: Business KYC Response
      readOnly: true
      type: object
      properties:
        status:
          $ref: "#/components/schemas/KYCStatus"
        reviewItems:
          type: array
          items:
            $ref: "#/components/schemas/KYCReviewType"
        user:
          $ref: "#/components/schemas/Business"
    KYCErrorType:
      title: KYCErrorType
      description: Error due to missing info in business KYC
      type: string
      enum:
        - other
        - inProgress
        - param
        - review
        - deactivated
        - restricted
    KYCErrorParamType:
      title: KYCErrorParamType
      description: KYC parameter input error
      type: string
      enum:
        - legalName
        - isRestricted
        - email
        - phone
        - legalAddress
        - taxId
        - taxIdType
        - incomeType
        - activityType
        - entityType
        - industryType
        - deactivated
        - operationType
        - purpose
        - originState
        - originCountry
        - originDate
    BusinessKYCError:
      title: BusinessKYCError
      description: Business KYC Error Response
      readOnly: true
      type: object
      properties:
        errorType:
          $ref: "#/components/schemas/KYCErrorType"
        values:
          $ref: "#/components/schemas/KYCErrorParamType"
        business:
          $ref: "#/components/schemas/Business"
    BusinessResponseError:
      title: BusinessResponseError
      description: Business API Response Error
      readOnly: true
      type: object
      properties:
        code:
          type: integer
          format: int32
        codeDesc:
          type: string
        errorDesc:
          type: string
        error:
          anyOf:
            - $ref: "#/components/schemas/BusinessKYCError"
    ActivityType:
      title: Activity Type Enum
      type: string
      description: Activity Type Enum
      enum:
        - cash
        - check
        - domesticWireTransfer
        - internationalWireTransfer
        - domesticACH
        - internationalACH
    ActivityTypeArray:
      title: ActivityTypeArray
      description: Activity Type Array
      type: array
      items:
        $ref: "#/components/schemas/ActivityType"
    BusinessTaxIdType:
      title: Business Tax Id Enum
      type: string
      description: Business Tax Id Types
      enum:
        - ssn
        - ein
    BusinessEntityType:
      title: User Business EntityType Enum
      type: string
      description: User Business EntityType Enum
      enum:
        - soleProprietor
        - limitedLiabilityCompany
        - singleMemberLLC
        - generalPartnership
        - limitedPartnership
        - limitedLiabilityPartnership
        - professionalCorporation
        - sCorporation
        - cCorporation
    BusinessIndustryType:
      title: Business Industry Type Enum
      type: string
      description: Business Industry Type Enum
      enum:
        - hotelMotel
        - otherFoodServices
        - restaurants
        - artPhotography
        - artsEntertainment
        - fitnessSportsCenters
        - sportsTeamsClubs
        - construction
        - buildingMaterialsHardware
        - otherTradeContractor
        - plumbingHVAC
        - healthServices
        - otherEducationServices
        - otherHealthFitness
        - accountingTaxPrep
        - realEstate
        - homeFurnishing
        - beautyOrBarberShops
        - carWash
        - computerServiceRepair
        - freelanceProfessional
        - landscapeServices
        - legalServices
        - massageTanningServices
        - otherProfessionalServices
        - autoDealers
        - onlineRetailer
        - retail
        - gasolineServiceStation
        - otherTransportServices
        - otherTravelServices
        - parkingGarages
        - taxi
        - travelAgency
        - truckingShipping
        - wholesale
        - warehouseDistribution
        - otherAccomodations
        - restaurantsCash
        - animalFarmingProduction
        - cropFarming
        - forestryActivities
        - fishingHuntingTrapping
        - otherAgricultureForestryFishing
        - museumsHistoricalSites
        - hospitals
        - collegesUniversitiesSchools
        - bankFinancialInstitution
        - financialInvestments
        - fundsTrustsOther
        - insurance
        - moneyTransferRemittance
        - privateInvestmentCompanies
        - otherManufacturing
        - industrialCommercialMachinery
        - employmentServices
        - governmentAgency
        - nonGovernmentOrganization
        - religiousOrganization
        - unions
        - retailJewelerDiamondsGemsGold
        - retailCash
        - usedClothesDealers
        - tourOperator
        - wholesaleJeweler
        - casinoHotel
        - casinoGamblingGaming
        - raceTrack
        - checkCasher
        - collectionAgencies
        - currencyExchangers
        - cigaretteManufacturing
        - privateATM
        - consulateEmbassy
        - beerWineLiquorStores
        - pawnShop
    OperationType:
      title: Business Operation Type Enum
      type: string
      description: Business Operation Type Enum
      enum:
        - local
        - foreignWithLocal
        - foreign
    BusinessDBA:
      title: BusinessDBA
      description: Business DBA list
      type: string
    BusinessDBAList:
      title: BusinessDBA
      description: Business DBA list
      type: array
      items:
        $ref: "#/components/schemas/BusinessDBA"
    Business:
      title: Business Object
      type: object
      properties:
        id:
          type: string
        employerNumber:
          type: string
        legalName:
          type: string
          nullable: true
        dba:
          $ref: "#/components/schemas/BusinessDBAList"
        entityType:
          anyOf:
            - $ref: "#/components/schemas/BusinessEntityType"
            - nullable: true
        industryType:
          anyOf:
            - $ref: "#/components/schemas/BusinessIndustryType"
            - nullable: true
        taxIdMasked:
          type: string
          nullable: true
        taxIdType:
          anyOf:
            - $ref: "#/components/schemas/BusinessTaxIdType"
            - nullable: true
        email:
          type: string
          nullable: true
        emailVerified:
          type: boolean
        phone:
          type: string
          nullable: true
        phoneVerified:
          type: boolean
        originCountry:
          type: string
          description: Country of incorporation
          nullable: true
        originState:
          type: string
          description: State of incorporation
          nullable: true
        originDate:
          type: string
          description: Date of incorporation
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        kycStatus:
          $ref: "#/components/schemas/KYCStatus"
        purpose:
          type: string
          nullable: true
        operationType:
          $ref: "#/components/schemas/OperationType"
        activityType:
          $ref: "#/components/schemas/ActivityTypeArray"
        isRestrictedBusiness:
          type: boolean
          nullable: true
        legalAddress:
          anyOf:
            - $ref: "#/components/schemas/Address"
            - nullable: true
        mailingAddress:
          anyOf:
            - $ref: "#/components/schemas/Address"
            - nullable: true
        headquarterAddress:
          oneOf:
            - $ref: '#/components/schemas/AddressPostBody'
            - nullable: true
        members:
          type: array
          items:
            $ref: "#/components/schemas/BusinessMember"
        formationDocumentId:
          type: string
          nullable: true
        created:
          type: string
          description: Date created
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date modified
          example: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: Business Object
      readOnly: true
    BusinessPostBody:
      title: BusinessPostBody
      required:
        - legalName
      type: object
      properties:
        legalName:
          type: string
          nullable: true
        dba:
          oneOf:
            - $ref: "#/components/schemas/BusinessDBAList"
            - nullable: true
        entityType:
          $ref: "#/components/schemas/BusinessEntityType"
        industryType:
          $ref: "#/components/schemas/BusinessIndustryType"
        taxId:
          type: string
          nullable: true
        taxIdType:
          anyOf:
            - $ref: "#/components/schemas/BusinessTaxIdType"
            - nullable: true
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        originCountry:
          type: string
          description: Country of incorporation
          nullable: true
        originState:
          type: string
          description: State of incorporation
          nullable: true
        originDate:
          type: string
          description: Date of incorporation
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        purpose:
          type: string
        operationType:
          oneOf:
            - $ref: "#/components/schemas/OperationType"
            - nullable: true
        activityType:
          oneOf:
            - $ref: "#/components/schemas/ActivityTypeArray"
            - nullable: true
        legalAddress:
          oneOf:
            - $ref: "#/components/schemas/AddressPostBody"
            - nullable: true
        mailingAddress:
          oneOf:
            - $ref: "#/components/schemas/AddressPostBody"
            - nullable: true
        headquarterAddress:
          oneOf:
            - $ref: "#/components/schemas/AddressPostBody"
            - nullable: true
        isRestrictedBusiness:
          type: boolean
          nullable: true
        formationDocument:
          $ref: "#/components/schemas/BusinessDocumentPostBody"
      description: Business Patch Object
      writeOnly: true
    BusinessPatchBody:
      title: Business Patch Object
      type: object
      properties:
        legalName:
          type: string
          nullable: true
        dba:
          oneOf:
            - $ref: "#/components/schemas/BusinessDBAList"
            - nullable: true
        entityType:
          $ref: "#/components/schemas/BusinessEntityType"
        industryType:
          $ref: "#/components/schemas/BusinessIndustryType"
        taxId:
          type: string
          nullable: true
        taxIdType:
          anyOf:
            - $ref: "#/components/schemas/BusinessTaxIdType"
            - nullable: true
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        originCountry:
          type: string
          description: Country of incorporation
          nullable: true
        originState:
          type: string
          description: State of incorporation
          nullable: true
        originDate:
          type: string
          description: Date of incorporation
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        operationType:
          oneOf:
            - $ref: "#/components/schemas/OperationType"
            - nullable: true
        activityType:
          oneOf:
            - $ref: "#/components/schemas/ActivityTypeArray"
            - nullable: true
        legalAddress:
          oneOf:
            - $ref: "#/components/schemas/AddressPostBody"
            - nullable: true
        mailingAddress:
          oneOf:
            - $ref: "#/components/schemas/AddressPostBody"
            - nullable: true
        headquarterAddress:
          oneOf:
            - $ref: "#/components/schemas/AddressPostBody"
            - nullable: true
        isRestrictedBusiness:
          type: boolean
          nullable: true
    BusinessDocumentType:
      title: Business Document Type Enum
      type: string
      description: Business Document Type Enum
      enum:
        - articlesOfIncorporation
        - articlesOfOrganization
        - assumedNameCertificate
        - businessLicense
        - certificateOfPartnership
        - partnershipAgreement
        - certificateOfFormation
        - driversLicense
        - other
    BusinessDocument:
      title: BusinessDocument
      type: object
      properties:
        id:
          type: string
          description: Business document id number
        businessId:
          type: string
          description: Business id number
        createdUserId:
          type: string
          description: User id that created the business
        number:
          type: string
          description: Business document number (e.g. Passport Number)
          nullable: true
        docType:
          oneOf:
            - $ref: "#/components/schemas/BusinessDocumentType"
            - nullable: true
        issuingState:
          type: string
          description: Issuing state or province (e.g. CA or BC)
          nullable: true
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
        issuedDate:
          type: string
          description: Date Issued
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        contentType:
          type: string
          description: Content type of file
        created:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
        modified:
          type: string
          description: Date created
          example: ISO8601 date time format e.g. YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.SSSZ
      description: Business Document Object
    BusinessDocumentPostBody:
      title: BusinessDocumentPostBody
      required:
        - contentType
        - content
        - docType
        - number
        - useFormation
      type: object
      properties:
        number:
          type: string
          description: Business document number (e.g. Passport Number)
          nullable: true
        docType:
          oneOf:
            - $ref: "#/components/schemas/BusinessDocumentType"
            - nullable: true
        issuingState:
          type: string
          description: Issuing state or province (e.g. CA or BC)
          nullable: true
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
        issuedDate:
          type: string
          description: Date Issued
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        useFormation:
          type: boolean
        contentType:
          type: string
          description: Content type of file
      description: Business Document Post Object
      writeOnly: true
    BusinessDocumentPatchBody:
      title: BusinessDocumentPatchBody
      type: object
      properties:
        number:
          type: string
          description: Business document number (e.g. Passport Number)
          nullable: true
        docType:
          oneOf:
            - $ref: "#/components/schemas/BusinessDocumentType"
            - nullable: true
        issuingState:
          type: string
          description: Issuing state or province (e.g. CA or BC)
          nullable: true
        issuingCountry:
          type: string
          description: Issuing country (e.g. US or MX)
          nullable: true
        issuedDate:
          type: string
          description: Date Issued
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        expirationDate:
          type: string
          description: Expiration Date
          nullable: true
          example: ISO8601 date format e.g. YYYY-MM-DD
        useFormation:
          type: boolean
        contentType:
          type: string
          description: Content type of file
          nullable: true
      description: Business Document Patch Object
      writeOnly: true
    SignedUrl:
      title: Document Signed URL
      type: object
      properties:
        url:
          type: string
          description: The signed url e.g `https://docId.fileID`
      description: The Document signed url
  headers:
    X-Requested-With:
      description: CORS origin sites allowed
      style: simple
      explode: false
      schema:
        type: string
    Access-Control-Allow-Origin:
      description: CORS origin sites allowed
      style: simple
      explode: false
      schema:
        type: string
    Access-Control-Allow-Methods:
      description: CORS http methods allows
      style: simple
      explode: false
      schema:
        type: string
    Access-Control-Allow-Headers:
      description: CORS request headers allowed
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    WiseUsersSandboxTestingPoolAuthorizer:
      type: apiKey
      description: Cognito Auth Server
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - ${cognito_pool_arn}
        type: cognito_user_pools
