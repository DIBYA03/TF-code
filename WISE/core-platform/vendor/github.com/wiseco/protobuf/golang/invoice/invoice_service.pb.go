// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: invoice/invoice_service.proto

package invoice

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	golang "github.com/wiseco/protobuf/golang"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SortFieldName int32

const (
	SortFieldName_SFN_UNSPECIFIED SortFieldName = 0
	SortFieldName_SFN_CREATED     SortFieldName = 100
	SortFieldName_SFN_AMOUNT      SortFieldName = 101
)

// Enum value maps for SortFieldName.
var (
	SortFieldName_name = map[int32]string{
		0:   "SFN_UNSPECIFIED",
		100: "SFN_CREATED",
		101: "SFN_AMOUNT",
	}
	SortFieldName_value = map[string]int32{
		"SFN_UNSPECIFIED": 0,
		"SFN_CREATED":     100,
		"SFN_AMOUNT":      101,
	}
)

func (x SortFieldName) Enum() *SortFieldName {
	p := new(SortFieldName)
	*p = x
	return p
}

func (x SortFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_invoice_invoice_service_proto_enumTypes[0].Descriptor()
}

func (SortFieldName) Type() protoreflect.EnumType {
	return &file_invoice_invoice_service_proto_enumTypes[0]
}

func (x SortFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortFieldName.Descriptor instead.
func (SortFieldName) EnumDescriptor() ([]byte, []int) {
	return file_invoice_invoice_service_proto_rawDescGZIP(), []int{0}
}

type InvoiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit             int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset            int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	InvoiceId         string                 `protobuf:"bytes,3,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	BusinessId        string                 `protobuf:"bytes,4,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ContactId         string                 `protobuf:"bytes,5,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	Status            []InvoiceRequestStatus `protobuf:"varint,6,rep,packed,name=status,proto3,enum=wise.protobuf.invoice.InvoiceRequestStatus" json:"status,omitempty"`
	DateRangeFilter   *golang.DateRange      `protobuf:"bytes,7,opt,name=date_range_filter,json=dateRangeFilter,proto3" json:"date_range_filter,omitempty"`
	AmountRangeFilter *golang.AmountRange    `protobuf:"bytes,8,opt,name=amount_range_filter,json=amountRangeFilter,proto3" json:"amount_range_filter,omitempty"`
	SortRequest       []*SortRequest         `protobuf:"bytes,9,rep,name=sort_request,json=sortRequest,proto3" json:"sort_request,omitempty"`
	SearchTerm        string                 `protobuf:"bytes,10,opt,name=search_term,json=searchTerm,proto3" json:"search_term,omitempty"`
	RequestSourceId   string                 `protobuf:"bytes,11,opt,name=request_source_id,json=requestSourceId,proto3" json:"request_source_id,omitempty"`
}

func (x *InvoiceGetRequest) Reset() {
	*x = InvoiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoice_invoice_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceGetRequest) ProtoMessage() {}

func (x *InvoiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_invoice_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceGetRequest.ProtoReflect.Descriptor instead.
func (*InvoiceGetRequest) Descriptor() ([]byte, []int) {
	return file_invoice_invoice_service_proto_rawDescGZIP(), []int{0}
}

func (x *InvoiceGetRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *InvoiceGetRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *InvoiceGetRequest) GetInvoiceId() string {
	if x != nil {
		return x.InvoiceId
	}
	return ""
}

func (x *InvoiceGetRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *InvoiceGetRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *InvoiceGetRequest) GetStatus() []InvoiceRequestStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InvoiceGetRequest) GetDateRangeFilter() *golang.DateRange {
	if x != nil {
		return x.DateRangeFilter
	}
	return nil
}

func (x *InvoiceGetRequest) GetAmountRangeFilter() *golang.AmountRange {
	if x != nil {
		return x.AmountRangeFilter
	}
	return nil
}

func (x *InvoiceGetRequest) GetSortRequest() []*SortRequest {
	if x != nil {
		return x.SortRequest
	}
	return nil
}

func (x *InvoiceGetRequest) GetSearchTerm() string {
	if x != nil {
		return x.SearchTerm
	}
	return ""
}

func (x *InvoiceGetRequest) GetRequestSourceId() string {
	if x != nil {
		return x.RequestSourceId
	}
	return ""
}

type InvoiceIdGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceId  string `protobuf:"bytes,1,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	BusinessId string `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
}

func (x *InvoiceIdGetRequest) Reset() {
	*x = InvoiceIdGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoice_invoice_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceIdGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceIdGetRequest) ProtoMessage() {}

func (x *InvoiceIdGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_invoice_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceIdGetRequest.ProtoReflect.Descriptor instead.
func (*InvoiceIdGetRequest) Descriptor() ([]byte, []int) {
	return file_invoice_invoice_service_proto_rawDescGZIP(), []int{1}
}

func (x *InvoiceIdGetRequest) GetInvoiceId() string {
	if x != nil {
		return x.InvoiceId
	}
	return ""
}

func (x *InvoiceIdGetRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

type SortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      SortFieldName        `protobuf:"varint,1,opt,name=name,proto3,enum=wise.protobuf.invoice.SortFieldName" json:"name,omitempty"`
	Direction golang.SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=wise.protobuf.SortDirection" json:"direction,omitempty"`
}

func (x *SortRequest) Reset() {
	*x = SortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoice_invoice_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortRequest) ProtoMessage() {}

func (x *SortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_invoice_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortRequest.ProtoReflect.Descriptor instead.
func (*SortRequest) Descriptor() ([]byte, []int) {
	return file_invoice_invoice_service_proto_rawDescGZIP(), []int{2}
}

func (x *SortRequest) GetName() SortFieldName {
	if x != nil {
		return x.Name
	}
	return SortFieldName_SFN_UNSPECIFIED
}

func (x *SortRequest) GetDirection() golang.SortDirection {
	if x != nil {
		return x.Direction
	}
	return golang.SortDirection_SD_UNSPECIFIED
}

type InvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invoices []*InvoiceRequest `protobuf:"bytes,1,rep,name=invoices,proto3" json:"invoices,omitempty"`
}

func (x *InvoiceResponse) Reset() {
	*x = InvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoice_invoice_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceResponse) ProtoMessage() {}

func (x *InvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_invoice_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceResponse.ProtoReflect.Descriptor instead.
func (*InvoiceResponse) Descriptor() ([]byte, []int) {
	return file_invoice_invoice_service_proto_rawDescGZIP(), []int{3}
}

func (x *InvoiceResponse) GetInvoices() []*InvoiceRequest {
	if x != nil {
		return x.Invoices
	}
	return nil
}

type InvoiceCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId string `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	Count      int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *InvoiceCountResponse) Reset() {
	*x = InvoiceCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoice_invoice_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceCountResponse) ProtoMessage() {}

func (x *InvoiceCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_invoice_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceCountResponse.ProtoReflect.Descriptor instead.
func (*InvoiceCountResponse) Descriptor() ([]byte, []int) {
	return file_invoice_invoice_service_proto_rawDescGZIP(), []int{4}
}

func (x *InvoiceCountResponse) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *InvoiceCountResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type InvoiceCountResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counts []*InvoiceCountResponse `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (x *InvoiceCountResponses) Reset() {
	*x = InvoiceCountResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoice_invoice_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceCountResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceCountResponses) ProtoMessage() {}

func (x *InvoiceCountResponses) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_invoice_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceCountResponses.ProtoReflect.Descriptor instead.
func (*InvoiceCountResponses) Descriptor() ([]byte, []int) {
	return file_invoice_invoice_service_proto_rawDescGZIP(), []int{5}
}

func (x *InvoiceCountResponses) GetCounts() []*InvoiceCountResponse {
	if x != nil {
		return x.Counts
	}
	return nil
}

type InvoiceAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId     string `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	TotalAmount    string `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	TotalRequested string `protobuf:"bytes,3,opt,name=total_requested,json=totalRequested,proto3" json:"total_requested,omitempty"`
	TotalPaid      string `protobuf:"bytes,4,opt,name=total_paid,json=totalPaid,proto3" json:"total_paid,omitempty"`
}

func (x *InvoiceAmountResponse) Reset() {
	*x = InvoiceAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoice_invoice_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceAmountResponse) ProtoMessage() {}

func (x *InvoiceAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_invoice_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceAmountResponse.ProtoReflect.Descriptor instead.
func (*InvoiceAmountResponse) Descriptor() ([]byte, []int) {
	return file_invoice_invoice_service_proto_rawDescGZIP(), []int{6}
}

func (x *InvoiceAmountResponse) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *InvoiceAmountResponse) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *InvoiceAmountResponse) GetTotalRequested() string {
	if x != nil {
		return x.TotalRequested
	}
	return ""
}

func (x *InvoiceAmountResponse) GetTotalPaid() string {
	if x != nil {
		return x.TotalPaid
	}
	return ""
}

type InvoiceAmountResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceAmounts []*InvoiceAmountResponse `protobuf:"bytes,1,rep,name=invoice_amounts,json=invoiceAmounts,proto3" json:"invoice_amounts,omitempty"`
}

func (x *InvoiceAmountResponses) Reset() {
	*x = InvoiceAmountResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoice_invoice_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceAmountResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceAmountResponses) ProtoMessage() {}

func (x *InvoiceAmountResponses) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_invoice_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceAmountResponses.ProtoReflect.Descriptor instead.
func (*InvoiceAmountResponses) Descriptor() ([]byte, []int) {
	return file_invoice_invoice_service_proto_rawDescGZIP(), []int{7}
}

func (x *InvoiceAmountResponses) GetInvoiceAmounts() []*InvoiceAmountResponse {
	if x != nil {
		return x.InvoiceAmounts
	}
	return nil
}

type InvoiceAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId      string            `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	DateRangeFilter *golang.DateRange `protobuf:"bytes,2,opt,name=date_range_filter,json=dateRangeFilter,proto3" json:"date_range_filter,omitempty"`
}

func (x *InvoiceAmountRequest) Reset() {
	*x = InvoiceAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoice_invoice_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceAmountRequest) ProtoMessage() {}

func (x *InvoiceAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_invoice_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceAmountRequest.ProtoReflect.Descriptor instead.
func (*InvoiceAmountRequest) Descriptor() ([]byte, []int) {
	return file_invoice_invoice_service_proto_rawDescGZIP(), []int{8}
}

func (x *InvoiceAmountRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *InvoiceAmountRequest) GetDateRangeFilter() *golang.DateRange {
	if x != nil {
		return x.DateRangeFilter
	}
	return nil
}

var File_invoice_invoice_service_proto protoreflect.FileDescriptor

var file_invoice_invoice_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x1d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x04, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x55, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54,
	0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x06,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x22, 0x6f, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x55, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2a, 0x45, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x46, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x46, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x64, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x46, 0x4e, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x65, 0x32, 0xa7,
	0x08, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12,
	0x2a, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12,
	0x63, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x28, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x2d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x5d, 0x0a, 0x0d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x25, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x25, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x6a, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x2c, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x66, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_invoice_invoice_service_proto_rawDescOnce sync.Once
	file_invoice_invoice_service_proto_rawDescData = file_invoice_invoice_service_proto_rawDesc
)

func file_invoice_invoice_service_proto_rawDescGZIP() []byte {
	file_invoice_invoice_service_proto_rawDescOnce.Do(func() {
		file_invoice_invoice_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_invoice_invoice_service_proto_rawDescData)
	})
	return file_invoice_invoice_service_proto_rawDescData
}

var file_invoice_invoice_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_invoice_invoice_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_invoice_invoice_service_proto_goTypes = []interface{}{
	(SortFieldName)(0),              // 0: wise.protobuf.invoice.SortFieldName
	(*InvoiceGetRequest)(nil),       // 1: wise.protobuf.invoice.InvoiceGetRequest
	(*InvoiceIdGetRequest)(nil),     // 2: wise.protobuf.invoice.InvoiceIdGetRequest
	(*SortRequest)(nil),             // 3: wise.protobuf.invoice.SortRequest
	(*InvoiceResponse)(nil),         // 4: wise.protobuf.invoice.InvoiceResponse
	(*InvoiceCountResponse)(nil),    // 5: wise.protobuf.invoice.InvoiceCountResponse
	(*InvoiceCountResponses)(nil),   // 6: wise.protobuf.invoice.InvoiceCountResponses
	(*InvoiceAmountResponse)(nil),   // 7: wise.protobuf.invoice.InvoiceAmountResponse
	(*InvoiceAmountResponses)(nil),  // 8: wise.protobuf.invoice.InvoiceAmountResponses
	(*InvoiceAmountRequest)(nil),    // 9: wise.protobuf.invoice.InvoiceAmountRequest
	(InvoiceRequestStatus)(0),       // 10: wise.protobuf.invoice.InvoiceRequestStatus
	(*golang.DateRange)(nil),        // 11: wise.protobuf.DateRange
	(*golang.AmountRange)(nil),      // 12: wise.protobuf.AmountRange
	(golang.SortDirection)(0),       // 13: wise.protobuf.SortDirection
	(*InvoiceRequest)(nil),          // 14: wise.protobuf.invoice.InvoiceRequest
	(*InvoiceActivityRequest)(nil),  // 15: wise.protobuf.invoice.InvoiceActivityRequest
	(*InvoiceSettingIdRequest)(nil), // 16: wise.protobuf.invoice.InvoiceSettingIdRequest
	(*InvoiceSetting)(nil),          // 17: wise.protobuf.invoice.InvoiceSetting
	(*InvoiceActionRequest)(nil),    // 18: wise.protobuf.invoice.InvoiceActionRequest
	(*empty.Empty)(nil),             // 19: google.protobuf.Empty
	(*FullInvoice)(nil),             // 20: wise.protobuf.invoice.FullInvoice
	(*InvoiceActivityResponse)(nil), // 21: wise.protobuf.invoice.InvoiceActivityResponse
	(*InvoiceActionResponse)(nil),   // 22: wise.protobuf.invoice.InvoiceActionResponse
}
var file_invoice_invoice_service_proto_depIdxs = []int32{
	10, // 0: wise.protobuf.invoice.InvoiceGetRequest.status:type_name -> wise.protobuf.invoice.InvoiceRequestStatus
	11, // 1: wise.protobuf.invoice.InvoiceGetRequest.date_range_filter:type_name -> wise.protobuf.DateRange
	12, // 2: wise.protobuf.invoice.InvoiceGetRequest.amount_range_filter:type_name -> wise.protobuf.AmountRange
	3,  // 3: wise.protobuf.invoice.InvoiceGetRequest.sort_request:type_name -> wise.protobuf.invoice.SortRequest
	0,  // 4: wise.protobuf.invoice.SortRequest.name:type_name -> wise.protobuf.invoice.SortFieldName
	13, // 5: wise.protobuf.invoice.SortRequest.direction:type_name -> wise.protobuf.SortDirection
	14, // 6: wise.protobuf.invoice.InvoiceResponse.invoices:type_name -> wise.protobuf.invoice.InvoiceRequest
	5,  // 7: wise.protobuf.invoice.InvoiceCountResponses.counts:type_name -> wise.protobuf.invoice.InvoiceCountResponse
	7,  // 8: wise.protobuf.invoice.InvoiceAmountResponses.invoice_amounts:type_name -> wise.protobuf.invoice.InvoiceAmountResponse
	11, // 9: wise.protobuf.invoice.InvoiceAmountRequest.date_range_filter:type_name -> wise.protobuf.DateRange
	2,  // 10: wise.protobuf.invoice.InvoiceService.GetInvoice:input_type -> wise.protobuf.invoice.InvoiceIdGetRequest
	1,  // 11: wise.protobuf.invoice.InvoiceService.GetManyInvoices:input_type -> wise.protobuf.invoice.InvoiceGetRequest
	14, // 12: wise.protobuf.invoice.InvoiceService.UpsertInvoiceRequest:input_type -> wise.protobuf.invoice.InvoiceRequest
	15, // 13: wise.protobuf.invoice.InvoiceService.GetInvoiceActivity:input_type -> wise.protobuf.invoice.InvoiceActivityRequest
	16, // 14: wise.protobuf.invoice.InvoiceService.GetSettingByBusinessID:input_type -> wise.protobuf.invoice.InvoiceSettingIdRequest
	17, // 15: wise.protobuf.invoice.InvoiceService.UpsertSetting:input_type -> wise.protobuf.invoice.InvoiceSetting
	18, // 16: wise.protobuf.invoice.InvoiceService.ExecuteAction:input_type -> wise.protobuf.invoice.InvoiceActionRequest
	19, // 17: wise.protobuf.invoice.InvoiceService.GetInvoiceCountForBusinesses:input_type -> google.protobuf.Empty
	19, // 18: wise.protobuf.invoice.InvoiceService.GetInvoiceAmountForBusinesses:input_type -> google.protobuf.Empty
	9,  // 19: wise.protobuf.invoice.InvoiceService.GetInvoiceAmount:input_type -> wise.protobuf.invoice.InvoiceAmountRequest
	20, // 20: wise.protobuf.invoice.InvoiceService.GetInvoice:output_type -> wise.protobuf.invoice.FullInvoice
	4,  // 21: wise.protobuf.invoice.InvoiceService.GetManyInvoices:output_type -> wise.protobuf.invoice.InvoiceResponse
	14, // 22: wise.protobuf.invoice.InvoiceService.UpsertInvoiceRequest:output_type -> wise.protobuf.invoice.InvoiceRequest
	21, // 23: wise.protobuf.invoice.InvoiceService.GetInvoiceActivity:output_type -> wise.protobuf.invoice.InvoiceActivityResponse
	17, // 24: wise.protobuf.invoice.InvoiceService.GetSettingByBusinessID:output_type -> wise.protobuf.invoice.InvoiceSetting
	17, // 25: wise.protobuf.invoice.InvoiceService.UpsertSetting:output_type -> wise.protobuf.invoice.InvoiceSetting
	22, // 26: wise.protobuf.invoice.InvoiceService.ExecuteAction:output_type -> wise.protobuf.invoice.InvoiceActionResponse
	6,  // 27: wise.protobuf.invoice.InvoiceService.GetInvoiceCountForBusinesses:output_type -> wise.protobuf.invoice.InvoiceCountResponses
	8,  // 28: wise.protobuf.invoice.InvoiceService.GetInvoiceAmountForBusinesses:output_type -> wise.protobuf.invoice.InvoiceAmountResponses
	7,  // 29: wise.protobuf.invoice.InvoiceService.GetInvoiceAmount:output_type -> wise.protobuf.invoice.InvoiceAmountResponse
	20, // [20:30] is the sub-list for method output_type
	10, // [10:20] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_invoice_invoice_service_proto_init() }
func file_invoice_invoice_service_proto_init() {
	if File_invoice_invoice_service_proto != nil {
		return
	}
	file_invoice_invoice_request_proto_init()
	file_invoice_invoice_settings_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_invoice_invoice_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoice_invoice_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceIdGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoice_invoice_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoice_invoice_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoice_invoice_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoice_invoice_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceCountResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoice_invoice_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoice_invoice_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceAmountResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoice_invoice_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_invoice_invoice_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_invoice_invoice_service_proto_goTypes,
		DependencyIndexes: file_invoice_invoice_service_proto_depIdxs,
		EnumInfos:         file_invoice_invoice_service_proto_enumTypes,
		MessageInfos:      file_invoice_invoice_service_proto_msgTypes,
	}.Build()
	File_invoice_invoice_service_proto = out.File
	file_invoice_invoice_service_proto_rawDesc = nil
	file_invoice_invoice_service_proto_goTypes = nil
	file_invoice_invoice_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InvoiceServiceClient is the client API for InvoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InvoiceServiceClient interface {
	// Get Invoices
	GetInvoice(ctx context.Context, in *InvoiceIdGetRequest, opts ...grpc.CallOption) (*FullInvoice, error)
	// Get Invoices
	GetManyInvoices(ctx context.Context, in *InvoiceGetRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	// Add or Update Transactions
	UpsertInvoiceRequest(ctx context.Context, in *InvoiceRequest, opts ...grpc.CallOption) (*InvoiceRequest, error)
	// Get last recent activity
	GetInvoiceActivity(ctx context.Context, in *InvoiceActivityRequest, opts ...grpc.CallOption) (*InvoiceActivityResponse, error)
	// Get Transactions
	GetSettingByBusinessID(ctx context.Context, in *InvoiceSettingIdRequest, opts ...grpc.CallOption) (*InvoiceSetting, error)
	// Add or Update Transactions
	UpsertSetting(ctx context.Context, in *InvoiceSetting, opts ...grpc.CallOption) (*InvoiceSetting, error)
	// Action on multiple invoices
	ExecuteAction(ctx context.Context, in *InvoiceActionRequest, opts ...grpc.CallOption) (*InvoiceActionResponse, error)
	// Get total invoices for every business
	GetInvoiceCountForBusinesses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InvoiceCountResponses, error)
	// Get total amount for every business
	GetInvoiceAmountForBusinesses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InvoiceAmountResponses, error)
	// Get  amount requested and paid for one business
	GetInvoiceAmount(ctx context.Context, in *InvoiceAmountRequest, opts ...grpc.CallOption) (*InvoiceAmountResponse, error)
}

type invoiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceServiceClient(cc grpc.ClientConnInterface) InvoiceServiceClient {
	return &invoiceServiceClient{cc}
}

func (c *invoiceServiceClient) GetInvoice(ctx context.Context, in *InvoiceIdGetRequest, opts ...grpc.CallOption) (*FullInvoice, error) {
	out := new(FullInvoice)
	err := c.cc.Invoke(ctx, "/wise.protobuf.invoice.InvoiceService/GetInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetManyInvoices(ctx context.Context, in *InvoiceGetRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, "/wise.protobuf.invoice.InvoiceService/GetManyInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) UpsertInvoiceRequest(ctx context.Context, in *InvoiceRequest, opts ...grpc.CallOption) (*InvoiceRequest, error) {
	out := new(InvoiceRequest)
	err := c.cc.Invoke(ctx, "/wise.protobuf.invoice.InvoiceService/UpsertInvoiceRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoiceActivity(ctx context.Context, in *InvoiceActivityRequest, opts ...grpc.CallOption) (*InvoiceActivityResponse, error) {
	out := new(InvoiceActivityResponse)
	err := c.cc.Invoke(ctx, "/wise.protobuf.invoice.InvoiceService/GetInvoiceActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetSettingByBusinessID(ctx context.Context, in *InvoiceSettingIdRequest, opts ...grpc.CallOption) (*InvoiceSetting, error) {
	out := new(InvoiceSetting)
	err := c.cc.Invoke(ctx, "/wise.protobuf.invoice.InvoiceService/GetSettingByBusinessID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) UpsertSetting(ctx context.Context, in *InvoiceSetting, opts ...grpc.CallOption) (*InvoiceSetting, error) {
	out := new(InvoiceSetting)
	err := c.cc.Invoke(ctx, "/wise.protobuf.invoice.InvoiceService/UpsertSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) ExecuteAction(ctx context.Context, in *InvoiceActionRequest, opts ...grpc.CallOption) (*InvoiceActionResponse, error) {
	out := new(InvoiceActionResponse)
	err := c.cc.Invoke(ctx, "/wise.protobuf.invoice.InvoiceService/ExecuteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoiceCountForBusinesses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InvoiceCountResponses, error) {
	out := new(InvoiceCountResponses)
	err := c.cc.Invoke(ctx, "/wise.protobuf.invoice.InvoiceService/GetInvoiceCountForBusinesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoiceAmountForBusinesses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InvoiceAmountResponses, error) {
	out := new(InvoiceAmountResponses)
	err := c.cc.Invoke(ctx, "/wise.protobuf.invoice.InvoiceService/GetInvoiceAmountForBusinesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoiceAmount(ctx context.Context, in *InvoiceAmountRequest, opts ...grpc.CallOption) (*InvoiceAmountResponse, error) {
	out := new(InvoiceAmountResponse)
	err := c.cc.Invoke(ctx, "/wise.protobuf.invoice.InvoiceService/GetInvoiceAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceServiceServer is the server API for InvoiceService service.
type InvoiceServiceServer interface {
	// Get Invoices
	GetInvoice(context.Context, *InvoiceIdGetRequest) (*FullInvoice, error)
	// Get Invoices
	GetManyInvoices(context.Context, *InvoiceGetRequest) (*InvoiceResponse, error)
	// Add or Update Transactions
	UpsertInvoiceRequest(context.Context, *InvoiceRequest) (*InvoiceRequest, error)
	// Get last recent activity
	GetInvoiceActivity(context.Context, *InvoiceActivityRequest) (*InvoiceActivityResponse, error)
	// Get Transactions
	GetSettingByBusinessID(context.Context, *InvoiceSettingIdRequest) (*InvoiceSetting, error)
	// Add or Update Transactions
	UpsertSetting(context.Context, *InvoiceSetting) (*InvoiceSetting, error)
	// Action on multiple invoices
	ExecuteAction(context.Context, *InvoiceActionRequest) (*InvoiceActionResponse, error)
	// Get total invoices for every business
	GetInvoiceCountForBusinesses(context.Context, *empty.Empty) (*InvoiceCountResponses, error)
	// Get total amount for every business
	GetInvoiceAmountForBusinesses(context.Context, *empty.Empty) (*InvoiceAmountResponses, error)
	// Get  amount requested and paid for one business
	GetInvoiceAmount(context.Context, *InvoiceAmountRequest) (*InvoiceAmountResponse, error)
}

// UnimplementedInvoiceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInvoiceServiceServer struct {
}

func (*UnimplementedInvoiceServiceServer) GetInvoice(context.Context, *InvoiceIdGetRequest) (*FullInvoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (*UnimplementedInvoiceServiceServer) GetManyInvoices(context.Context, *InvoiceGetRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManyInvoices not implemented")
}
func (*UnimplementedInvoiceServiceServer) UpsertInvoiceRequest(context.Context, *InvoiceRequest) (*InvoiceRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertInvoiceRequest not implemented")
}
func (*UnimplementedInvoiceServiceServer) GetInvoiceActivity(context.Context, *InvoiceActivityRequest) (*InvoiceActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceActivity not implemented")
}
func (*UnimplementedInvoiceServiceServer) GetSettingByBusinessID(context.Context, *InvoiceSettingIdRequest) (*InvoiceSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingByBusinessID not implemented")
}
func (*UnimplementedInvoiceServiceServer) UpsertSetting(context.Context, *InvoiceSetting) (*InvoiceSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSetting not implemented")
}
func (*UnimplementedInvoiceServiceServer) ExecuteAction(context.Context, *InvoiceActionRequest) (*InvoiceActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAction not implemented")
}
func (*UnimplementedInvoiceServiceServer) GetInvoiceCountForBusinesses(context.Context, *empty.Empty) (*InvoiceCountResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceCountForBusinesses not implemented")
}
func (*UnimplementedInvoiceServiceServer) GetInvoiceAmountForBusinesses(context.Context, *empty.Empty) (*InvoiceAmountResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceAmountForBusinesses not implemented")
}
func (*UnimplementedInvoiceServiceServer) GetInvoiceAmount(context.Context, *InvoiceAmountRequest) (*InvoiceAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceAmount not implemented")
}

func RegisterInvoiceServiceServer(s *grpc.Server, srv InvoiceServiceServer) {
	s.RegisterService(&_InvoiceService_serviceDesc, srv)
}

func _InvoiceService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceIdGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.invoice.InvoiceService/GetInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoice(ctx, req.(*InvoiceIdGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetManyInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetManyInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.invoice.InvoiceService/GetManyInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetManyInvoices(ctx, req.(*InvoiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_UpsertInvoiceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).UpsertInvoiceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.invoice.InvoiceService/UpsertInvoiceRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).UpsertInvoiceRequest(ctx, req.(*InvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoiceActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoiceActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.invoice.InvoiceService/GetInvoiceActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoiceActivity(ctx, req.(*InvoiceActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetSettingByBusinessID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceSettingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetSettingByBusinessID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.invoice.InvoiceService/GetSettingByBusinessID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetSettingByBusinessID(ctx, req.(*InvoiceSettingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_UpsertSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).UpsertSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.invoice.InvoiceService/UpsertSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).UpsertSetting(ctx, req.(*InvoiceSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_ExecuteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).ExecuteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.invoice.InvoiceService/ExecuteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).ExecuteAction(ctx, req.(*InvoiceActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoiceCountForBusinesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoiceCountForBusinesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.invoice.InvoiceService/GetInvoiceCountForBusinesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoiceCountForBusinesses(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoiceAmountForBusinesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoiceAmountForBusinesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.invoice.InvoiceService/GetInvoiceAmountForBusinesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoiceAmountForBusinesses(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoiceAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoiceAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.invoice.InvoiceService/GetInvoiceAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoiceAmount(ctx, req.(*InvoiceAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InvoiceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wise.protobuf.invoice.InvoiceService",
	HandlerType: (*InvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInvoice",
			Handler:    _InvoiceService_GetInvoice_Handler,
		},
		{
			MethodName: "GetManyInvoices",
			Handler:    _InvoiceService_GetManyInvoices_Handler,
		},
		{
			MethodName: "UpsertInvoiceRequest",
			Handler:    _InvoiceService_UpsertInvoiceRequest_Handler,
		},
		{
			MethodName: "GetInvoiceActivity",
			Handler:    _InvoiceService_GetInvoiceActivity_Handler,
		},
		{
			MethodName: "GetSettingByBusinessID",
			Handler:    _InvoiceService_GetSettingByBusinessID_Handler,
		},
		{
			MethodName: "UpsertSetting",
			Handler:    _InvoiceService_UpsertSetting_Handler,
		},
		{
			MethodName: "ExecuteAction",
			Handler:    _InvoiceService_ExecuteAction_Handler,
		},
		{
			MethodName: "GetInvoiceCountForBusinesses",
			Handler:    _InvoiceService_GetInvoiceCountForBusinesses_Handler,
		},
		{
			MethodName: "GetInvoiceAmountForBusinesses",
			Handler:    _InvoiceService_GetInvoiceAmountForBusinesses_Handler,
		},
		{
			MethodName: "GetInvoiceAmount",
			Handler:    _InvoiceService_GetInvoiceAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoice/invoice_service.proto",
}
