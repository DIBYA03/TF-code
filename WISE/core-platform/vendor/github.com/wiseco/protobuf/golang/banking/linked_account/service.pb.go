// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: banking/linked_account/service.proto

package linked_account

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	golang "github.com/wiseco/protobuf/golang"
	banking "github.com/wiseco/protobuf/golang/banking"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LinkedAccountType int32

const (
	LinkedAccountType_LAT_UNSPECIFIED       LinkedAccountType = 0
	LinkedAccountType_LAT_CONSUMER_CHECKING LinkedAccountType = 1
	LinkedAccountType_LAT_CONSUMER_SAVINGS  LinkedAccountType = 2
	LinkedAccountType_LAT_BUSINESS_CHECKING LinkedAccountType = 3
	LinkedAccountType_LAT_BUSINESS_SAVINGS  LinkedAccountType = 4
	LinkedAccountType_LAT_POOLED            LinkedAccountType = 5
	LinkedAccountType_LAT_CHECK_DEPOSIT     LinkedAccountType = 6
)

// Enum value maps for LinkedAccountType.
var (
	LinkedAccountType_name = map[int32]string{
		0: "LAT_UNSPECIFIED",
		1: "LAT_CONSUMER_CHECKING",
		2: "LAT_CONSUMER_SAVINGS",
		3: "LAT_BUSINESS_CHECKING",
		4: "LAT_BUSINESS_SAVINGS",
		5: "LAT_POOLED",
		6: "LAT_CHECK_DEPOSIT",
	}
	LinkedAccountType_value = map[string]int32{
		"LAT_UNSPECIFIED":       0,
		"LAT_CONSUMER_CHECKING": 1,
		"LAT_CONSUMER_SAVINGS":  2,
		"LAT_BUSINESS_CHECKING": 3,
		"LAT_BUSINESS_SAVINGS":  4,
		"LAT_POOLED":            5,
		"LAT_CHECK_DEPOSIT":     6,
	}
)

func (x LinkedAccountType) Enum() *LinkedAccountType {
	p := new(LinkedAccountType)
	*p = x
	return p
}

func (x LinkedAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkedAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_banking_linked_account_service_proto_enumTypes[0].Descriptor()
}

func (LinkedAccountType) Type() protoreflect.EnumType {
	return &file_banking_linked_account_service_proto_enumTypes[0]
}

func (x LinkedAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkedAccountType.Descriptor instead.
func (LinkedAccountType) EnumDescriptor() ([]byte, []int) {
	return file_banking_linked_account_service_proto_rawDescGZIP(), []int{0}
}

type LinkedAccountStatus int32

const (
	LinkedAccountStatus_LAS_UNSPECIFIED LinkedAccountStatus = 0
	LinkedAccountStatus_LAS_ACTIVE      LinkedAccountStatus = 1
	LinkedAccountStatus_LAS_INACTIVE    LinkedAccountStatus = 2
)

// Enum value maps for LinkedAccountStatus.
var (
	LinkedAccountStatus_name = map[int32]string{
		0: "LAS_UNSPECIFIED",
		1: "LAS_ACTIVE",
		2: "LAS_INACTIVE",
	}
	LinkedAccountStatus_value = map[string]int32{
		"LAS_UNSPECIFIED": 0,
		"LAS_ACTIVE":      1,
		"LAS_INACTIVE":    2,
	}
)

func (x LinkedAccountStatus) Enum() *LinkedAccountStatus {
	p := new(LinkedAccountStatus)
	*p = x
	return p
}

func (x LinkedAccountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkedAccountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_banking_linked_account_service_proto_enumTypes[1].Descriptor()
}

func (LinkedAccountStatus) Type() protoreflect.EnumType {
	return &file_banking_linked_account_service_proto_enumTypes[1]
}

func (x LinkedAccountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkedAccountStatus.Descriptor instead.
func (LinkedAccountStatus) EnumDescriptor() ([]byte, []int) {
	return file_banking_linked_account_service_proto_rawDescGZIP(), []int{1}
}

type ExternalLinkName int32

const (
	ExternalLinkName_ELN_S_UNSPECIFIED ExternalLinkName = 0
	ExternalLinkName_ELN_PLAID         ExternalLinkName = 1
)

// Enum value maps for ExternalLinkName.
var (
	ExternalLinkName_name = map[int32]string{
		0: "ELN_S_UNSPECIFIED",
		1: "ELN_PLAID",
	}
	ExternalLinkName_value = map[string]int32{
		"ELN_S_UNSPECIFIED": 0,
		"ELN_PLAID":         1,
	}
)

func (x ExternalLinkName) Enum() *ExternalLinkName {
	p := new(ExternalLinkName)
	*p = x
	return p
}

func (x ExternalLinkName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalLinkName) Descriptor() protoreflect.EnumDescriptor {
	return file_banking_linked_account_service_proto_enumTypes[2].Descriptor()
}

func (ExternalLinkName) Type() protoreflect.EnumType {
	return &file_banking_linked_account_service_proto_enumTypes[2]
}

func (x ExternalLinkName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalLinkName.Descriptor instead.
func (ExternalLinkName) EnumDescriptor() ([]byte, []int) {
	return file_banking_linked_account_service_proto_rawDescGZIP(), []int{2}
}

type LinkedAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ConsumerId            string                `protobuf:"bytes,2,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	BusinessId            string                `protobuf:"bytes,3,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ContactId             string                `protobuf:"bytes,4,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	AccountId             string                `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PartnerName           banking.PartnerName   `protobuf:"varint,6,opt,name=partner_name,json=partnerName,proto3,enum=wise.protobuf.banking.PartnerName" json:"partner_name,omitempty"`
	PartnerReferenceId    string                `protobuf:"bytes,7,opt,name=partner_reference_id,json=partnerReferenceId,proto3" json:"partner_reference_id,omitempty"`
	PartnerAccountLast_4  string                `protobuf:"bytes,8,opt,name=partner_account_last_4,json=partnerAccountLast4,proto3" json:"partner_account_last_4,omitempty"`
	IssuerAccountNumber   string                `protobuf:"bytes,9,opt,name=issuer_account_number,json=issuerAccountNumber,proto3" json:"issuer_account_number,omitempty"`
	IssuerRoutingNumber   string                `protobuf:"bytes,10,opt,name=issuer_routing_number,json=issuerRoutingNumber,proto3" json:"issuer_routing_number,omitempty"`
	IssuerBankName        string                `protobuf:"bytes,11,opt,name=issuer_bank_name,json=issuerBankName,proto3" json:"issuer_bank_name,omitempty"`
	IssuerAccountName     string                `protobuf:"bytes,12,opt,name=issuer_account_name,json=issuerAccountName,proto3" json:"issuer_account_name,omitempty"`
	ExternalLinkId        string                `protobuf:"bytes,13,opt,name=external_link_id,json=externalLinkId,proto3" json:"external_link_id,omitempty"`
	ExternalLinkRequestId string                `protobuf:"bytes,14,opt,name=external_link_request_id,json=externalLinkRequestId,proto3" json:"external_link_request_id,omitempty"`
	ExternalLinkName      ExternalLinkName      `protobuf:"varint,15,opt,name=external_link_name,json=externalLinkName,proto3,enum=wise.protobuf.banking.linked_account.ExternalLinkName" json:"external_link_name,omitempty"`
	HolderName            string                `protobuf:"bytes,16,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	Alias                 string                `protobuf:"bytes,17,opt,name=alias,proto3" json:"alias,omitempty"`
	Currency              string                `protobuf:"bytes,18,opt,name=currency,proto3" json:"currency,omitempty"`
	UsageType             banking.UsageType     `protobuf:"varint,19,opt,name=usage_type,json=usageType,proto3,enum=wise.protobuf.banking.UsageType" json:"usage_type,omitempty"`
	LinkedAccountType     LinkedAccountType     `protobuf:"varint,20,opt,name=linked_account_type,json=linkedAccountType,proto3,enum=wise.protobuf.banking.linked_account.LinkedAccountType" json:"linked_account_type,omitempty"`
	LinkedAccountSubtype  banking.LinkedSubtype `protobuf:"varint,21,opt,name=linked_account_subtype,json=linkedAccountSubtype,proto3,enum=wise.protobuf.banking.LinkedSubtype" json:"linked_account_subtype,omitempty"`
	LinkedAccountStatus   LinkedAccountStatus   `protobuf:"varint,22,opt,name=linked_account_status,json=linkedAccountStatus,proto3,enum=wise.protobuf.banking.linked_account.LinkedAccountStatus" json:"linked_account_status,omitempty"`
	Created               *timestamp.Timestamp  `protobuf:"bytes,23,opt,name=created,proto3" json:"created,omitempty"`
	Modified              *timestamp.Timestamp  `protobuf:"bytes,24,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *LinkedAccount) Reset() {
	*x = LinkedAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_account_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedAccount) ProtoMessage() {}

func (x *LinkedAccount) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_account_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedAccount.ProtoReflect.Descriptor instead.
func (*LinkedAccount) Descriptor() ([]byte, []int) {
	return file_banking_linked_account_service_proto_rawDescGZIP(), []int{0}
}

func (x *LinkedAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LinkedAccount) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *LinkedAccount) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *LinkedAccount) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *LinkedAccount) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *LinkedAccount) GetPartnerName() banking.PartnerName {
	if x != nil {
		return x.PartnerName
	}
	return banking.PartnerName_PN_UNSPECIFIED
}

func (x *LinkedAccount) GetPartnerReferenceId() string {
	if x != nil {
		return x.PartnerReferenceId
	}
	return ""
}

func (x *LinkedAccount) GetPartnerAccountLast_4() string {
	if x != nil {
		return x.PartnerAccountLast_4
	}
	return ""
}

func (x *LinkedAccount) GetIssuerAccountNumber() string {
	if x != nil {
		return x.IssuerAccountNumber
	}
	return ""
}

func (x *LinkedAccount) GetIssuerRoutingNumber() string {
	if x != nil {
		return x.IssuerRoutingNumber
	}
	return ""
}

func (x *LinkedAccount) GetIssuerBankName() string {
	if x != nil {
		return x.IssuerBankName
	}
	return ""
}

func (x *LinkedAccount) GetIssuerAccountName() string {
	if x != nil {
		return x.IssuerAccountName
	}
	return ""
}

func (x *LinkedAccount) GetExternalLinkId() string {
	if x != nil {
		return x.ExternalLinkId
	}
	return ""
}

func (x *LinkedAccount) GetExternalLinkRequestId() string {
	if x != nil {
		return x.ExternalLinkRequestId
	}
	return ""
}

func (x *LinkedAccount) GetExternalLinkName() ExternalLinkName {
	if x != nil {
		return x.ExternalLinkName
	}
	return ExternalLinkName_ELN_S_UNSPECIFIED
}

func (x *LinkedAccount) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *LinkedAccount) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *LinkedAccount) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *LinkedAccount) GetUsageType() banking.UsageType {
	if x != nil {
		return x.UsageType
	}
	return banking.UsageType_UT_UNSPECIFIED
}

func (x *LinkedAccount) GetLinkedAccountType() LinkedAccountType {
	if x != nil {
		return x.LinkedAccountType
	}
	return LinkedAccountType_LAT_UNSPECIFIED
}

func (x *LinkedAccount) GetLinkedAccountSubtype() banking.LinkedSubtype {
	if x != nil {
		return x.LinkedAccountSubtype
	}
	return banking.LinkedSubtype_LST_UNSPECIFIED
}

func (x *LinkedAccount) GetLinkedAccountStatus() LinkedAccountStatus {
	if x != nil {
		return x.LinkedAccountStatus
	}
	return LinkedAccountStatus_LAS_UNSPECIFIED
}

func (x *LinkedAccount) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *LinkedAccount) GetModified() *timestamp.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

type LinkedAccounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedAccounts []*LinkedAccount `protobuf:"bytes,1,rep,name=linked_accounts,json=linkedAccounts,proto3" json:"linked_accounts,omitempty"`
}

func (x *LinkedAccounts) Reset() {
	*x = LinkedAccounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_account_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedAccounts) ProtoMessage() {}

func (x *LinkedAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_account_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedAccounts.ProtoReflect.Descriptor instead.
func (*LinkedAccounts) Descriptor() ([]byte, []int) {
	return file_banking_linked_account_service_proto_rawDescGZIP(), []int{1}
}

func (x *LinkedAccounts) GetLinkedAccounts() []*LinkedAccount {
	if x != nil {
		return x.LinkedAccounts
	}
	return nil
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerId            string                `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	BusinessId            string                `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ContactId             string                `protobuf:"bytes,3,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	AccountId             string                `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PartnerName           banking.PartnerName   `protobuf:"varint,5,opt,name=partner_name,json=partnerName,proto3,enum=wise.protobuf.banking.PartnerName" json:"partner_name,omitempty"`
	IssuerAccountNumber   string                `protobuf:"bytes,6,opt,name=issuer_account_number,json=issuerAccountNumber,proto3" json:"issuer_account_number,omitempty"`
	IssuerRoutingNumber   string                `protobuf:"bytes,7,opt,name=issuer_routing_number,json=issuerRoutingNumber,proto3" json:"issuer_routing_number,omitempty"`
	IssuerBankName        string                `protobuf:"bytes,8,opt,name=issuer_bank_name,json=issuerBankName,proto3" json:"issuer_bank_name,omitempty"`
	IssuerAccountName     string                `protobuf:"bytes,9,opt,name=issuer_account_name,json=issuerAccountName,proto3" json:"issuer_account_name,omitempty"`
	ExternalLinkId        string                `protobuf:"bytes,10,opt,name=external_link_id,json=externalLinkId,proto3" json:"external_link_id,omitempty"`
	ExternalLinkRequestId string                `protobuf:"bytes,11,opt,name=external_link_request_id,json=externalLinkRequestId,proto3" json:"external_link_request_id,omitempty"`
	ExternalLinkName      ExternalLinkName      `protobuf:"varint,12,opt,name=external_link_name,json=externalLinkName,proto3,enum=wise.protobuf.banking.linked_account.ExternalLinkName" json:"external_link_name,omitempty"`
	HolderName            string                `protobuf:"bytes,13,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	Alias                 string                `protobuf:"bytes,14,opt,name=alias,proto3" json:"alias,omitempty"`
	Currency              string                `protobuf:"bytes,15,opt,name=currency,proto3" json:"currency,omitempty"`
	UsageType             banking.UsageType     `protobuf:"varint,16,opt,name=usage_type,json=usageType,proto3,enum=wise.protobuf.banking.UsageType" json:"usage_type,omitempty"`
	LinkedAccountType     LinkedAccountType     `protobuf:"varint,17,opt,name=linked_account_type,json=linkedAccountType,proto3,enum=wise.protobuf.banking.linked_account.LinkedAccountType" json:"linked_account_type,omitempty"`
	LinkedAccountSubtype  banking.LinkedSubtype `protobuf:"varint,18,opt,name=linked_account_subtype,json=linkedAccountSubtype,proto3,enum=wise.protobuf.banking.LinkedSubtype" json:"linked_account_subtype,omitempty"`
	IpAddress             string                `protobuf:"bytes,19,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_account_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_account_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_account_service_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterRequest) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *RegisterRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *RegisterRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *RegisterRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RegisterRequest) GetPartnerName() banking.PartnerName {
	if x != nil {
		return x.PartnerName
	}
	return banking.PartnerName_PN_UNSPECIFIED
}

func (x *RegisterRequest) GetIssuerAccountNumber() string {
	if x != nil {
		return x.IssuerAccountNumber
	}
	return ""
}

func (x *RegisterRequest) GetIssuerRoutingNumber() string {
	if x != nil {
		return x.IssuerRoutingNumber
	}
	return ""
}

func (x *RegisterRequest) GetIssuerBankName() string {
	if x != nil {
		return x.IssuerBankName
	}
	return ""
}

func (x *RegisterRequest) GetIssuerAccountName() string {
	if x != nil {
		return x.IssuerAccountName
	}
	return ""
}

func (x *RegisterRequest) GetExternalLinkId() string {
	if x != nil {
		return x.ExternalLinkId
	}
	return ""
}

func (x *RegisterRequest) GetExternalLinkRequestId() string {
	if x != nil {
		return x.ExternalLinkRequestId
	}
	return ""
}

func (x *RegisterRequest) GetExternalLinkName() ExternalLinkName {
	if x != nil {
		return x.ExternalLinkName
	}
	return ExternalLinkName_ELN_S_UNSPECIFIED
}

func (x *RegisterRequest) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *RegisterRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *RegisterRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RegisterRequest) GetUsageType() banking.UsageType {
	if x != nil {
		return x.UsageType
	}
	return banking.UsageType_UT_UNSPECIFIED
}

func (x *RegisterRequest) GetLinkedAccountType() LinkedAccountType {
	if x != nil {
		return x.LinkedAccountType
	}
	return LinkedAccountType_LAT_UNSPECIFIED
}

func (x *RegisterRequest) GetLinkedAccountSubtype() banking.LinkedSubtype {
	if x != nil {
		return x.LinkedAccountSubtype
	}
	return banking.LinkedSubtype_LST_UNSPECIFIED
}

func (x *RegisterRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type RegisterSnapCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerId            string                `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	BusinessId            string                `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ContactId             string                `protobuf:"bytes,3,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	AccountId             string                `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PartnerName           banking.PartnerName   `protobuf:"varint,5,opt,name=partner_name,json=partnerName,proto3,enum=wise.protobuf.banking.PartnerName" json:"partner_name,omitempty"`
	IssuerAccountNumber   string                `protobuf:"bytes,6,opt,name=issuer_account_number,json=issuerAccountNumber,proto3" json:"issuer_account_number,omitempty"`
	IssuerRoutingNumber   string                `protobuf:"bytes,7,opt,name=issuer_routing_number,json=issuerRoutingNumber,proto3" json:"issuer_routing_number,omitempty"`
	IssuerBankName        string                `protobuf:"bytes,8,opt,name=issuer_bank_name,json=issuerBankName,proto3" json:"issuer_bank_name,omitempty"`
	IssuerAccountName     string                `protobuf:"bytes,9,opt,name=issuer_account_name,json=issuerAccountName,proto3" json:"issuer_account_name,omitempty"`
	ExternalLinkId        string                `protobuf:"bytes,10,opt,name=external_link_id,json=externalLinkId,proto3" json:"external_link_id,omitempty"`
	ExternalLinkRequestId string                `protobuf:"bytes,11,opt,name=external_link_request_id,json=externalLinkRequestId,proto3" json:"external_link_request_id,omitempty"`
	ExternalLinkName      ExternalLinkName      `protobuf:"varint,12,opt,name=external_link_name,json=externalLinkName,proto3,enum=wise.protobuf.banking.linked_account.ExternalLinkName" json:"external_link_name,omitempty"`
	HolderName            string                `protobuf:"bytes,13,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	Alias                 string                `protobuf:"bytes,14,opt,name=alias,proto3" json:"alias,omitempty"`
	Currency              string                `protobuf:"bytes,15,opt,name=currency,proto3" json:"currency,omitempty"`
	UsageType             banking.UsageType     `protobuf:"varint,16,opt,name=usage_type,json=usageType,proto3,enum=wise.protobuf.banking.UsageType" json:"usage_type,omitempty"`
	LinkedAccountType     LinkedAccountType     `protobuf:"varint,17,opt,name=linked_account_type,json=linkedAccountType,proto3,enum=wise.protobuf.banking.linked_account.LinkedAccountType" json:"linked_account_type,omitempty"`
	LinkedAccountSubtype  banking.LinkedSubtype `protobuf:"varint,18,opt,name=linked_account_subtype,json=linkedAccountSubtype,proto3,enum=wise.protobuf.banking.LinkedSubtype" json:"linked_account_subtype,omitempty"`
	IpAddress             string                `protobuf:"bytes,19,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	ActorReferenceId      string                `protobuf:"bytes,20,opt,name=actor_reference_id,json=actorReferenceId,proto3" json:"actor_reference_id,omitempty"`
}

func (x *RegisterSnapCheckRequest) Reset() {
	*x = RegisterSnapCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_account_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSnapCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSnapCheckRequest) ProtoMessage() {}

func (x *RegisterSnapCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_account_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSnapCheckRequest.ProtoReflect.Descriptor instead.
func (*RegisterSnapCheckRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_account_service_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterSnapCheckRequest) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetPartnerName() banking.PartnerName {
	if x != nil {
		return x.PartnerName
	}
	return banking.PartnerName_PN_UNSPECIFIED
}

func (x *RegisterSnapCheckRequest) GetIssuerAccountNumber() string {
	if x != nil {
		return x.IssuerAccountNumber
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetIssuerRoutingNumber() string {
	if x != nil {
		return x.IssuerRoutingNumber
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetIssuerBankName() string {
	if x != nil {
		return x.IssuerBankName
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetIssuerAccountName() string {
	if x != nil {
		return x.IssuerAccountName
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetExternalLinkId() string {
	if x != nil {
		return x.ExternalLinkId
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetExternalLinkRequestId() string {
	if x != nil {
		return x.ExternalLinkRequestId
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetExternalLinkName() ExternalLinkName {
	if x != nil {
		return x.ExternalLinkName
	}
	return ExternalLinkName_ELN_S_UNSPECIFIED
}

func (x *RegisterSnapCheckRequest) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetUsageType() banking.UsageType {
	if x != nil {
		return x.UsageType
	}
	return banking.UsageType_UT_UNSPECIFIED
}

func (x *RegisterSnapCheckRequest) GetLinkedAccountType() LinkedAccountType {
	if x != nil {
		return x.LinkedAccountType
	}
	return LinkedAccountType_LAT_UNSPECIFIED
}

func (x *RegisterSnapCheckRequest) GetLinkedAccountSubtype() banking.LinkedSubtype {
	if x != nil {
		return x.LinkedAccountSubtype
	}
	return banking.LinkedSubtype_LST_UNSPECIFIED
}

func (x *RegisterSnapCheckRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *RegisterSnapCheckRequest) GetActorReferenceId() string {
	if x != nil {
		return x.ActorReferenceId
	}
	return ""
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedAccountId      string                `protobuf:"bytes,1,opt,name=linked_account_id,json=linkedAccountId,proto3" json:"linked_account_id,omitempty"`
	HolderName           string                `protobuf:"bytes,2,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	Alias                string                `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	UsageType            banking.UsageType     `protobuf:"varint,4,opt,name=usage_type,json=usageType,proto3,enum=wise.protobuf.banking.UsageType" json:"usage_type,omitempty"`
	LinkedAccountSubtype banking.LinkedSubtype `protobuf:"varint,5,opt,name=linked_account_subtype,json=linkedAccountSubtype,proto3,enum=wise.protobuf.banking.LinkedSubtype" json:"linked_account_subtype,omitempty"`
	LinkedAccountStatus  LinkedAccountStatus   `protobuf:"varint,6,opt,name=linked_account_status,json=linkedAccountStatus,proto3,enum=wise.protobuf.banking.linked_account.LinkedAccountStatus" json:"linked_account_status,omitempty"`
	IpAddress            string                `protobuf:"bytes,7,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_account_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_account_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_account_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateRequest) GetLinkedAccountId() string {
	if x != nil {
		return x.LinkedAccountId
	}
	return ""
}

func (x *UpdateRequest) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *UpdateRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *UpdateRequest) GetUsageType() banking.UsageType {
	if x != nil {
		return x.UsageType
	}
	return banking.UsageType_UT_UNSPECIFIED
}

func (x *UpdateRequest) GetLinkedAccountSubtype() banking.LinkedSubtype {
	if x != nil {
		return x.LinkedAccountSubtype
	}
	return banking.LinkedSubtype_LST_UNSPECIFIED
}

func (x *UpdateRequest) GetLinkedAccountStatus() LinkedAccountStatus {
	if x != nil {
		return x.LinkedAccountStatus
	}
	return LinkedAccountStatus_LAS_UNSPECIFIED
}

func (x *UpdateRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedAccountId string           `protobuf:"bytes,1,opt,name=linked_account_id,json=linkedAccountId,proto3" json:"linked_account_id,omitempty"`
	ActorId         string           `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActorType       golang.ActorType `protobuf:"varint,3,opt,name=actor_type,json=actorType,proto3,enum=wise.protobuf.ActorType" json:"actor_type,omitempty"`
	IpAddress       string           `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_account_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_account_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_account_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteRequest) GetLinkedAccountId() string {
	if x != nil {
		return x.LinkedAccountId
	}
	return ""
}

func (x *DeleteRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *DeleteRequest) GetActorType() golang.ActorType {
	if x != nil {
		return x.ActorType
	}
	return golang.ActorType_AT_UNSPECIFIED
}

func (x *DeleteRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedAccountId     string `protobuf:"bytes,1,opt,name=linked_account_id,json=linkedAccountId,proto3" json:"linked_account_id,omitempty"`
	PartnerReferenceId  string `protobuf:"bytes,2,opt,name=partner_reference_id,json=partnerReferenceId,proto3" json:"partner_reference_id,omitempty"`
	AccountId           string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BusinessId          string `protobuf:"bytes,4,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	IssuerAccountNumber string `protobuf:"bytes,5,opt,name=issuer_account_number,json=issuerAccountNumber,proto3" json:"issuer_account_number,omitempty"`
	IssuerRoutingNumber string `protobuf:"bytes,6,opt,name=issuer_routing_number,json=issuerRoutingNumber,proto3" json:"issuer_routing_number,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_account_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_account_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_account_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetRequest) GetLinkedAccountId() string {
	if x != nil {
		return x.LinkedAccountId
	}
	return ""
}

func (x *GetRequest) GetPartnerReferenceId() string {
	if x != nil {
		return x.PartnerReferenceId
	}
	return ""
}

func (x *GetRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *GetRequest) GetIssuerAccountNumber() string {
	if x != nil {
		return x.IssuerAccountNumber
	}
	return ""
}

func (x *GetRequest) GetIssuerRoutingNumber() string {
	if x != nil {
		return x.IssuerRoutingNumber
	}
	return ""
}

type GetSourceAccountByTransferIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId string `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
}

func (x *GetSourceAccountByTransferIDRequest) Reset() {
	*x = GetSourceAccountByTransferIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_account_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSourceAccountByTransferIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourceAccountByTransferIDRequest) ProtoMessage() {}

func (x *GetSourceAccountByTransferIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_account_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourceAccountByTransferIDRequest.ProtoReflect.Descriptor instead.
func (*GetSourceAccountByTransferIDRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_account_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetSourceAccountByTransferIDRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

type GetManyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId    string                  `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ContactId     string                  `protobuf:"bytes,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	Limit         int32                   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                   `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	StatusFilter  []LinkedAccountStatus   `protobuf:"varint,5,rep,packed,name=status_filter,json=statusFilter,proto3,enum=wise.protobuf.banking.linked_account.LinkedAccountStatus" json:"status_filter,omitempty"`
	TypeFilter    []LinkedAccountType     `protobuf:"varint,6,rep,packed,name=type_filter,json=typeFilter,proto3,enum=wise.protobuf.banking.linked_account.LinkedAccountType" json:"type_filter,omitempty"`
	SubtypeFilter []banking.LinkedSubtype `protobuf:"varint,7,rep,packed,name=subtype_filter,json=subtypeFilter,proto3,enum=wise.protobuf.banking.LinkedSubtype" json:"subtype_filter,omitempty"`
}

func (x *GetManyRequest) Reset() {
	*x = GetManyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_account_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManyRequest) ProtoMessage() {}

func (x *GetManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_account_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManyRequest.ProtoReflect.Descriptor instead.
func (*GetManyRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_account_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetManyRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *GetManyRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *GetManyRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetManyRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetManyRequest) GetStatusFilter() []LinkedAccountStatus {
	if x != nil {
		return x.StatusFilter
	}
	return nil
}

func (x *GetManyRequest) GetTypeFilter() []LinkedAccountType {
	if x != nil {
		return x.TypeFilter
	}
	return nil
}

func (x *GetManyRequest) GetSubtypeFilter() []banking.LinkedSubtype {
	if x != nil {
		return x.SubtypeFilter
	}
	return nil
}

var File_banking_linked_account_service_proto protoreflect.FileDescriptor

var file_banking_linked_account_service_proto_rawDesc = []byte{
	0x0a, 0x24, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x62, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x0a, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x34, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x12, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x10, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x16,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x6e, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xdb, 0x07, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f,
	0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x67, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x14,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x92, 0x08, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x12,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x5a, 0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9d, 0x03, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x3f, 0x0a,
	0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a,
	0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x15, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x46,
	0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x85, 0x03, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x5e, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2a, 0xb9,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x41, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x55, 0x4d, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x4c, 0x41, 0x54, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x41, 0x54,
	0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47,
	0x53, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x06, 0x2a, 0x4c, 0x0a, 0x13, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x41, 0x53, 0x5f, 0x49, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x38, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x4c, 0x4e, 0x5f, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4c, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x44,
	0x10, 0x01, 0x32, 0xea, 0x06, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x08, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3e, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x72,
	0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x55, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6c, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x30, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x44, 0x12, 0x49, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x75, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x6e, 0x79, 0x12, 0x34, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42,
	0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x69,
	0x73, 0x65, 0x63, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_banking_linked_account_service_proto_rawDescOnce sync.Once
	file_banking_linked_account_service_proto_rawDescData = file_banking_linked_account_service_proto_rawDesc
)

func file_banking_linked_account_service_proto_rawDescGZIP() []byte {
	file_banking_linked_account_service_proto_rawDescOnce.Do(func() {
		file_banking_linked_account_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_banking_linked_account_service_proto_rawDescData)
	})
	return file_banking_linked_account_service_proto_rawDescData
}

var file_banking_linked_account_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_banking_linked_account_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_banking_linked_account_service_proto_goTypes = []interface{}{
	(LinkedAccountType)(0),                      // 0: wise.protobuf.banking.linked_account.LinkedAccountType
	(LinkedAccountStatus)(0),                    // 1: wise.protobuf.banking.linked_account.LinkedAccountStatus
	(ExternalLinkName)(0),                       // 2: wise.protobuf.banking.linked_account.ExternalLinkName
	(*LinkedAccount)(nil),                       // 3: wise.protobuf.banking.linked_account.LinkedAccount
	(*LinkedAccounts)(nil),                      // 4: wise.protobuf.banking.linked_account.LinkedAccounts
	(*RegisterRequest)(nil),                     // 5: wise.protobuf.banking.linked_account.RegisterRequest
	(*RegisterSnapCheckRequest)(nil),            // 6: wise.protobuf.banking.linked_account.RegisterSnapCheckRequest
	(*UpdateRequest)(nil),                       // 7: wise.protobuf.banking.linked_account.UpdateRequest
	(*DeleteRequest)(nil),                       // 8: wise.protobuf.banking.linked_account.DeleteRequest
	(*GetRequest)(nil),                          // 9: wise.protobuf.banking.linked_account.GetRequest
	(*GetSourceAccountByTransferIDRequest)(nil), // 10: wise.protobuf.banking.linked_account.GetSourceAccountByTransferIDRequest
	(*GetManyRequest)(nil),                      // 11: wise.protobuf.banking.linked_account.GetManyRequest
	(banking.PartnerName)(0),                    // 12: wise.protobuf.banking.PartnerName
	(banking.UsageType)(0),                      // 13: wise.protobuf.banking.UsageType
	(banking.LinkedSubtype)(0),                  // 14: wise.protobuf.banking.LinkedSubtype
	(*timestamp.Timestamp)(nil),                 // 15: google.protobuf.Timestamp
	(golang.ActorType)(0),                       // 16: wise.protobuf.ActorType
	(*empty.Empty)(nil),                         // 17: google.protobuf.Empty
}
var file_banking_linked_account_service_proto_depIdxs = []int32{
	12, // 0: wise.protobuf.banking.linked_account.LinkedAccount.partner_name:type_name -> wise.protobuf.banking.PartnerName
	2,  // 1: wise.protobuf.banking.linked_account.LinkedAccount.external_link_name:type_name -> wise.protobuf.banking.linked_account.ExternalLinkName
	13, // 2: wise.protobuf.banking.linked_account.LinkedAccount.usage_type:type_name -> wise.protobuf.banking.UsageType
	0,  // 3: wise.protobuf.banking.linked_account.LinkedAccount.linked_account_type:type_name -> wise.protobuf.banking.linked_account.LinkedAccountType
	14, // 4: wise.protobuf.banking.linked_account.LinkedAccount.linked_account_subtype:type_name -> wise.protobuf.banking.LinkedSubtype
	1,  // 5: wise.protobuf.banking.linked_account.LinkedAccount.linked_account_status:type_name -> wise.protobuf.banking.linked_account.LinkedAccountStatus
	15, // 6: wise.protobuf.banking.linked_account.LinkedAccount.created:type_name -> google.protobuf.Timestamp
	15, // 7: wise.protobuf.banking.linked_account.LinkedAccount.modified:type_name -> google.protobuf.Timestamp
	3,  // 8: wise.protobuf.banking.linked_account.LinkedAccounts.linked_accounts:type_name -> wise.protobuf.banking.linked_account.LinkedAccount
	12, // 9: wise.protobuf.banking.linked_account.RegisterRequest.partner_name:type_name -> wise.protobuf.banking.PartnerName
	2,  // 10: wise.protobuf.banking.linked_account.RegisterRequest.external_link_name:type_name -> wise.protobuf.banking.linked_account.ExternalLinkName
	13, // 11: wise.protobuf.banking.linked_account.RegisterRequest.usage_type:type_name -> wise.protobuf.banking.UsageType
	0,  // 12: wise.protobuf.banking.linked_account.RegisterRequest.linked_account_type:type_name -> wise.protobuf.banking.linked_account.LinkedAccountType
	14, // 13: wise.protobuf.banking.linked_account.RegisterRequest.linked_account_subtype:type_name -> wise.protobuf.banking.LinkedSubtype
	12, // 14: wise.protobuf.banking.linked_account.RegisterSnapCheckRequest.partner_name:type_name -> wise.protobuf.banking.PartnerName
	2,  // 15: wise.protobuf.banking.linked_account.RegisterSnapCheckRequest.external_link_name:type_name -> wise.protobuf.banking.linked_account.ExternalLinkName
	13, // 16: wise.protobuf.banking.linked_account.RegisterSnapCheckRequest.usage_type:type_name -> wise.protobuf.banking.UsageType
	0,  // 17: wise.protobuf.banking.linked_account.RegisterSnapCheckRequest.linked_account_type:type_name -> wise.protobuf.banking.linked_account.LinkedAccountType
	14, // 18: wise.protobuf.banking.linked_account.RegisterSnapCheckRequest.linked_account_subtype:type_name -> wise.protobuf.banking.LinkedSubtype
	13, // 19: wise.protobuf.banking.linked_account.UpdateRequest.usage_type:type_name -> wise.protobuf.banking.UsageType
	14, // 20: wise.protobuf.banking.linked_account.UpdateRequest.linked_account_subtype:type_name -> wise.protobuf.banking.LinkedSubtype
	1,  // 21: wise.protobuf.banking.linked_account.UpdateRequest.linked_account_status:type_name -> wise.protobuf.banking.linked_account.LinkedAccountStatus
	16, // 22: wise.protobuf.banking.linked_account.DeleteRequest.actor_type:type_name -> wise.protobuf.ActorType
	1,  // 23: wise.protobuf.banking.linked_account.GetManyRequest.status_filter:type_name -> wise.protobuf.banking.linked_account.LinkedAccountStatus
	0,  // 24: wise.protobuf.banking.linked_account.GetManyRequest.type_filter:type_name -> wise.protobuf.banking.linked_account.LinkedAccountType
	14, // 25: wise.protobuf.banking.linked_account.GetManyRequest.subtype_filter:type_name -> wise.protobuf.banking.LinkedSubtype
	5,  // 26: wise.protobuf.banking.linked_account.LinkedAccountService.Register:input_type -> wise.protobuf.banking.linked_account.RegisterRequest
	6,  // 27: wise.protobuf.banking.linked_account.LinkedAccountService.RegisterSnapCheck:input_type -> wise.protobuf.banking.linked_account.RegisterSnapCheckRequest
	7,  // 28: wise.protobuf.banking.linked_account.LinkedAccountService.Update:input_type -> wise.protobuf.banking.linked_account.UpdateRequest
	8,  // 29: wise.protobuf.banking.linked_account.LinkedAccountService.Delete:input_type -> wise.protobuf.banking.linked_account.DeleteRequest
	9,  // 30: wise.protobuf.banking.linked_account.LinkedAccountService.Get:input_type -> wise.protobuf.banking.linked_account.GetRequest
	10, // 31: wise.protobuf.banking.linked_account.LinkedAccountService.GetSourceAccountByTransferID:input_type -> wise.protobuf.banking.linked_account.GetSourceAccountByTransferIDRequest
	11, // 32: wise.protobuf.banking.linked_account.LinkedAccountService.GetMany:input_type -> wise.protobuf.banking.linked_account.GetManyRequest
	3,  // 33: wise.protobuf.banking.linked_account.LinkedAccountService.Register:output_type -> wise.protobuf.banking.linked_account.LinkedAccount
	3,  // 34: wise.protobuf.banking.linked_account.LinkedAccountService.RegisterSnapCheck:output_type -> wise.protobuf.banking.linked_account.LinkedAccount
	3,  // 35: wise.protobuf.banking.linked_account.LinkedAccountService.Update:output_type -> wise.protobuf.banking.linked_account.LinkedAccount
	17, // 36: wise.protobuf.banking.linked_account.LinkedAccountService.Delete:output_type -> google.protobuf.Empty
	3,  // 37: wise.protobuf.banking.linked_account.LinkedAccountService.Get:output_type -> wise.protobuf.banking.linked_account.LinkedAccount
	3,  // 38: wise.protobuf.banking.linked_account.LinkedAccountService.GetSourceAccountByTransferID:output_type -> wise.protobuf.banking.linked_account.LinkedAccount
	4,  // 39: wise.protobuf.banking.linked_account.LinkedAccountService.GetMany:output_type -> wise.protobuf.banking.linked_account.LinkedAccounts
	33, // [33:40] is the sub-list for method output_type
	26, // [26:33] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_banking_linked_account_service_proto_init() }
func file_banking_linked_account_service_proto_init() {
	if File_banking_linked_account_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_banking_linked_account_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_account_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedAccounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_account_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_account_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSnapCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_account_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_account_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_account_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_account_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSourceAccountByTransferIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_account_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_banking_linked_account_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_banking_linked_account_service_proto_goTypes,
		DependencyIndexes: file_banking_linked_account_service_proto_depIdxs,
		EnumInfos:         file_banking_linked_account_service_proto_enumTypes,
		MessageInfos:      file_banking_linked_account_service_proto_msgTypes,
	}.Build()
	File_banking_linked_account_service_proto = out.File
	file_banking_linked_account_service_proto_rawDesc = nil
	file_banking_linked_account_service_proto_goTypes = nil
	file_banking_linked_account_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LinkedAccountServiceClient is the client API for LinkedAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LinkedAccountServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*LinkedAccount, error)
	RegisterSnapCheck(ctx context.Context, in *RegisterSnapCheckRequest, opts ...grpc.CallOption) (*LinkedAccount, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*LinkedAccount, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*LinkedAccount, error)
	GetSourceAccountByTransferID(ctx context.Context, in *GetSourceAccountByTransferIDRequest, opts ...grpc.CallOption) (*LinkedAccount, error)
	GetMany(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*LinkedAccounts, error)
}

type linkedAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkedAccountServiceClient(cc grpc.ClientConnInterface) LinkedAccountServiceClient {
	return &linkedAccountServiceClient{cc}
}

func (c *linkedAccountServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*LinkedAccount, error) {
	out := new(LinkedAccount)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_account.LinkedAccountService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountServiceClient) RegisterSnapCheck(ctx context.Context, in *RegisterSnapCheckRequest, opts ...grpc.CallOption) (*LinkedAccount, error) {
	out := new(LinkedAccount)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_account.LinkedAccountService/RegisterSnapCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*LinkedAccount, error) {
	out := new(LinkedAccount)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_account.LinkedAccountService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_account.LinkedAccountService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*LinkedAccount, error) {
	out := new(LinkedAccount)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_account.LinkedAccountService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountServiceClient) GetSourceAccountByTransferID(ctx context.Context, in *GetSourceAccountByTransferIDRequest, opts ...grpc.CallOption) (*LinkedAccount, error) {
	out := new(LinkedAccount)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_account.LinkedAccountService/GetSourceAccountByTransferID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountServiceClient) GetMany(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*LinkedAccounts, error) {
	out := new(LinkedAccounts)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_account.LinkedAccountService/GetMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkedAccountServiceServer is the server API for LinkedAccountService service.
type LinkedAccountServiceServer interface {
	Register(context.Context, *RegisterRequest) (*LinkedAccount, error)
	RegisterSnapCheck(context.Context, *RegisterSnapCheckRequest) (*LinkedAccount, error)
	Update(context.Context, *UpdateRequest) (*LinkedAccount, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	Get(context.Context, *GetRequest) (*LinkedAccount, error)
	GetSourceAccountByTransferID(context.Context, *GetSourceAccountByTransferIDRequest) (*LinkedAccount, error)
	GetMany(context.Context, *GetManyRequest) (*LinkedAccounts, error)
}

// UnimplementedLinkedAccountServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLinkedAccountServiceServer struct {
}

func (*UnimplementedLinkedAccountServiceServer) Register(context.Context, *RegisterRequest) (*LinkedAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedLinkedAccountServiceServer) RegisterSnapCheck(context.Context, *RegisterSnapCheckRequest) (*LinkedAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSnapCheck not implemented")
}
func (*UnimplementedLinkedAccountServiceServer) Update(context.Context, *UpdateRequest) (*LinkedAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedLinkedAccountServiceServer) Delete(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedLinkedAccountServiceServer) Get(context.Context, *GetRequest) (*LinkedAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedLinkedAccountServiceServer) GetSourceAccountByTransferID(context.Context, *GetSourceAccountByTransferIDRequest) (*LinkedAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceAccountByTransferID not implemented")
}
func (*UnimplementedLinkedAccountServiceServer) GetMany(context.Context, *GetManyRequest) (*LinkedAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}

func RegisterLinkedAccountServiceServer(s *grpc.Server, srv LinkedAccountServiceServer) {
	s.RegisterService(&_LinkedAccountService_serviceDesc, srv)
}

func _LinkedAccountService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_account.LinkedAccountService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountService_RegisterSnapCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSnapCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountServiceServer).RegisterSnapCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_account.LinkedAccountService/RegisterSnapCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountServiceServer).RegisterSnapCheck(ctx, req.(*RegisterSnapCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_account.LinkedAccountService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_account.LinkedAccountService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_account.LinkedAccountService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountService_GetSourceAccountByTransferID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceAccountByTransferIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountServiceServer).GetSourceAccountByTransferID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_account.LinkedAccountService/GetSourceAccountByTransferID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountServiceServer).GetSourceAccountByTransferID(ctx, req.(*GetSourceAccountByTransferIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountService_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountServiceServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_account.LinkedAccountService/GetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountServiceServer).GetMany(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LinkedAccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wise.protobuf.banking.linked_account.LinkedAccountService",
	HandlerType: (*LinkedAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _LinkedAccountService_Register_Handler,
		},
		{
			MethodName: "RegisterSnapCheck",
			Handler:    _LinkedAccountService_RegisterSnapCheck_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LinkedAccountService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LinkedAccountService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LinkedAccountService_Get_Handler,
		},
		{
			MethodName: "GetSourceAccountByTransferID",
			Handler:    _LinkedAccountService_GetSourceAccountByTransferID_Handler,
		},
		{
			MethodName: "GetMany",
			Handler:    _LinkedAccountService_GetMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banking/linked_account/service.proto",
}
