// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: banking/transfer/service.proto

package transfer

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	golang "github.com/wiseco/protobuf/golang"
	banking "github.com/wiseco/protobuf/golang/banking"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ValidatorFailureStatus int32

const (
	ValidatorFailureStatus_VFS_UNSPECIFIED ValidatorFailureStatus = 0
	ValidatorFailureStatus_VFS_OPEN        ValidatorFailureStatus = 1
	ValidatorFailureStatus_VFS_CLOSED      ValidatorFailureStatus = 2
)

// Enum value maps for ValidatorFailureStatus.
var (
	ValidatorFailureStatus_name = map[int32]string{
		0: "VFS_UNSPECIFIED",
		1: "VFS_OPEN",
		2: "VFS_CLOSED",
	}
	ValidatorFailureStatus_value = map[string]int32{
		"VFS_UNSPECIFIED": 0,
		"VFS_OPEN":        1,
		"VFS_CLOSED":      2,
	}
)

func (x ValidatorFailureStatus) Enum() *ValidatorFailureStatus {
	p := new(ValidatorFailureStatus)
	*p = x
	return p
}

func (x ValidatorFailureStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidatorFailureStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_banking_transfer_service_proto_enumTypes[0].Descriptor()
}

func (ValidatorFailureStatus) Type() protoreflect.EnumType {
	return &file_banking_transfer_service_proto_enumTypes[0]
}

func (x ValidatorFailureStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidatorFailureStatus.Descriptor instead.
func (ValidatorFailureStatus) EnumDescriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{0}
}

type TransferStatus int32

const (
	TransferStatus_TS_UNSPECIFIED        TransferStatus = 0
	TransferStatus_TS_IN_VALIDATION      TransferStatus = 1
	TransferStatus_TS_VALIDATED          TransferStatus = 2
	TransferStatus_TS_AGENT_IN_REVIEW    TransferStatus = 3
	TransferStatus_TS_AUTO_DECLINED      TransferStatus = 4
	TransferStatus_TS_AGENT_DECLINED     TransferStatus = 5
	TransferStatus_TS_BANK_PROCESSING    TransferStatus = 6
	TransferStatus_TS_POSTED             TransferStatus = 7
	TransferStatus_TS_BANK_DECLINED      TransferStatus = 8
	TransferStatus_TS_BANK_IN_REVIEW     TransferStatus = 9
	TransferStatus_TS_BANK_REFUNDED      TransferStatus = 10
	TransferStatus_TS_USER_CANCELED      TransferStatus = 11
	TransferStatus_TS_BANK_ERROR         TransferStatus = 12
	TransferStatus_TS_AGENT_CHECK_REVIEW TransferStatus = 13
)

// Enum value maps for TransferStatus.
var (
	TransferStatus_name = map[int32]string{
		0:  "TS_UNSPECIFIED",
		1:  "TS_IN_VALIDATION",
		2:  "TS_VALIDATED",
		3:  "TS_AGENT_IN_REVIEW",
		4:  "TS_AUTO_DECLINED",
		5:  "TS_AGENT_DECLINED",
		6:  "TS_BANK_PROCESSING",
		7:  "TS_POSTED",
		8:  "TS_BANK_DECLINED",
		9:  "TS_BANK_IN_REVIEW",
		10: "TS_BANK_REFUNDED",
		11: "TS_USER_CANCELED",
		12: "TS_BANK_ERROR",
		13: "TS_AGENT_CHECK_REVIEW",
	}
	TransferStatus_value = map[string]int32{
		"TS_UNSPECIFIED":        0,
		"TS_IN_VALIDATION":      1,
		"TS_VALIDATED":          2,
		"TS_AGENT_IN_REVIEW":    3,
		"TS_AUTO_DECLINED":      4,
		"TS_AGENT_DECLINED":     5,
		"TS_BANK_PROCESSING":    6,
		"TS_POSTED":             7,
		"TS_BANK_DECLINED":      8,
		"TS_BANK_IN_REVIEW":     9,
		"TS_BANK_REFUNDED":      10,
		"TS_USER_CANCELED":      11,
		"TS_BANK_ERROR":         12,
		"TS_AGENT_CHECK_REVIEW": 13,
	}
)

func (x TransferStatus) Enum() *TransferStatus {
	p := new(TransferStatus)
	*p = x
	return p
}

func (x TransferStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_banking_transfer_service_proto_enumTypes[1].Descriptor()
}

func (TransferStatus) Type() protoreflect.EnumType {
	return &file_banking_transfer_service_proto_enumTypes[1]
}

func (x TransferStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferStatus.Descriptor instead.
func (TransferStatus) EnumDescriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{1}
}

type TransferType int32

const (
	TransferType_TT_UNSPECIFIED   TransferType = 0
	TransferType_TT_ACH_PULL      TransferType = 1
	TransferType_TT_ACH_PUSH      TransferType = 2
	TransferType_TT_WIRE          TransferType = 3
	TransferType_TT_CHECK         TransferType = 4
	TransferType_TT_DEBIT_PULL    TransferType = 5
	TransferType_TT_DEBIT_PUSH    TransferType = 6
	TransferType_TT_CHECK_DEPOSIT TransferType = 7
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TT_UNSPECIFIED",
		1: "TT_ACH_PULL",
		2: "TT_ACH_PUSH",
		3: "TT_WIRE",
		4: "TT_CHECK",
		5: "TT_DEBIT_PULL",
		6: "TT_DEBIT_PUSH",
		7: "TT_CHECK_DEPOSIT",
	}
	TransferType_value = map[string]int32{
		"TT_UNSPECIFIED":   0,
		"TT_ACH_PULL":      1,
		"TT_ACH_PUSH":      2,
		"TT_WIRE":          3,
		"TT_CHECK":         4,
		"TT_DEBIT_PULL":    5,
		"TT_DEBIT_PUSH":    6,
		"TT_CHECK_DEPOSIT": 7,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_banking_transfer_service_proto_enumTypes[2].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_banking_transfer_service_proto_enumTypes[2]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{2}
}

type PartnerTransferStatus int32

const (
	PartnerTransferStatus_TPS_UNSPECIFIED              PartnerTransferStatus = 0
	PartnerTransferStatus_TPS_IN_PROCESS               PartnerTransferStatus = 100
	PartnerTransferStatus_TPS_CANCELED                 PartnerTransferStatus = 101
	PartnerTransferStatus_TPS_POSTED                   PartnerTransferStatus = 102
	PartnerTransferStatus_TPS_DEBIT_SENT               PartnerTransferStatus = 103
	PartnerTransferStatus_TPS_CREDIT_SENT              PartnerTransferStatus = 104
	PartnerTransferStatus_TPS_DISBURSED                PartnerTransferStatus = 105
	PartnerTransferStatus_TPS_RESOLVED                 PartnerTransferStatus = 106
	PartnerTransferStatus_TPS_PULL_FAILED              PartnerTransferStatus = 107
	PartnerTransferStatus_TPS_PULL_FAILED_REFUNDED     PartnerTransferStatus = 108
	PartnerTransferStatus_TPS_PULL_FAILED_UNDER_REVIEW PartnerTransferStatus = 109
	PartnerTransferStatus_TPS_PUSH_FAILED              PartnerTransferStatus = 110
	PartnerTransferStatus_TPS_PUSH_FAILED_REFUNDED     PartnerTransferStatus = 111
	PartnerTransferStatus_TPS_PUSH_FAILED_UNDER_REVIEW PartnerTransferStatus = 112
	PartnerTransferStatus_TPS_SETTLED                  PartnerTransferStatus = 113
	PartnerTransferStatus_TPS_CHECK_DISBURSED          PartnerTransferStatus = 114
	PartnerTransferStatus_TPS_CHECK_CLEARED            PartnerTransferStatus = 115
	PartnerTransferStatus_TPS_BANK_ERROR               PartnerTransferStatus = 116
	PartnerTransferStatus_TPS_SNAPCHECK_PRESENTED      PartnerTransferStatus = 130
	PartnerTransferStatus_TPS_SNAPCHECK_ISSUED         PartnerTransferStatus = 131
	PartnerTransferStatus_TPS_SNAPCHECK_IN_REVIEW      PartnerTransferStatus = 132
	PartnerTransferStatus_TPS_SNAPCHECK_DEPOSITED      PartnerTransferStatus = 133
	PartnerTransferStatus_TPS_SNAPCHECK_REJECTED       PartnerTransferStatus = 134
)

// Enum value maps for PartnerTransferStatus.
var (
	PartnerTransferStatus_name = map[int32]string{
		0:   "TPS_UNSPECIFIED",
		100: "TPS_IN_PROCESS",
		101: "TPS_CANCELED",
		102: "TPS_POSTED",
		103: "TPS_DEBIT_SENT",
		104: "TPS_CREDIT_SENT",
		105: "TPS_DISBURSED",
		106: "TPS_RESOLVED",
		107: "TPS_PULL_FAILED",
		108: "TPS_PULL_FAILED_REFUNDED",
		109: "TPS_PULL_FAILED_UNDER_REVIEW",
		110: "TPS_PUSH_FAILED",
		111: "TPS_PUSH_FAILED_REFUNDED",
		112: "TPS_PUSH_FAILED_UNDER_REVIEW",
		113: "TPS_SETTLED",
		114: "TPS_CHECK_DISBURSED",
		115: "TPS_CHECK_CLEARED",
		116: "TPS_BANK_ERROR",
		130: "TPS_SNAPCHECK_PRESENTED",
		131: "TPS_SNAPCHECK_ISSUED",
		132: "TPS_SNAPCHECK_IN_REVIEW",
		133: "TPS_SNAPCHECK_DEPOSITED",
		134: "TPS_SNAPCHECK_REJECTED",
	}
	PartnerTransferStatus_value = map[string]int32{
		"TPS_UNSPECIFIED":              0,
		"TPS_IN_PROCESS":               100,
		"TPS_CANCELED":                 101,
		"TPS_POSTED":                   102,
		"TPS_DEBIT_SENT":               103,
		"TPS_CREDIT_SENT":              104,
		"TPS_DISBURSED":                105,
		"TPS_RESOLVED":                 106,
		"TPS_PULL_FAILED":              107,
		"TPS_PULL_FAILED_REFUNDED":     108,
		"TPS_PULL_FAILED_UNDER_REVIEW": 109,
		"TPS_PUSH_FAILED":              110,
		"TPS_PUSH_FAILED_REFUNDED":     111,
		"TPS_PUSH_FAILED_UNDER_REVIEW": 112,
		"TPS_SETTLED":                  113,
		"TPS_CHECK_DISBURSED":          114,
		"TPS_CHECK_CLEARED":            115,
		"TPS_BANK_ERROR":               116,
		"TPS_SNAPCHECK_PRESENTED":      130,
		"TPS_SNAPCHECK_ISSUED":         131,
		"TPS_SNAPCHECK_IN_REVIEW":      132,
		"TPS_SNAPCHECK_DEPOSITED":      133,
		"TPS_SNAPCHECK_REJECTED":       134,
	}
)

func (x PartnerTransferStatus) Enum() *PartnerTransferStatus {
	p := new(PartnerTransferStatus)
	*p = x
	return p
}

func (x PartnerTransferStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartnerTransferStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_banking_transfer_service_proto_enumTypes[3].Descriptor()
}

func (PartnerTransferStatus) Type() protoreflect.EnumType {
	return &file_banking_transfer_service_proto_enumTypes[3]
}

func (x PartnerTransferStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartnerTransferStatus.Descriptor instead.
func (PartnerTransferStatus) EnumDescriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{3}
}

type AccountType int32

const (
	AccountType_AT_UNSPECIFIED      AccountType = 0
	AccountType_AT_ACCOUNT_BUSINESS AccountType = 1
	AccountType_AT_ACCOUNT_CONSUMER AccountType = 2
	AccountType_AT_LINKED_ACCOUNT   AccountType = 3
	AccountType_AT_LINKED_CARD      AccountType = 4
	AccountType_AT_LINKED_PAYEE     AccountType = 5
	AccountType_AT_CHECK_DEPOSIT    AccountType = 6
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "AT_UNSPECIFIED",
		1: "AT_ACCOUNT_BUSINESS",
		2: "AT_ACCOUNT_CONSUMER",
		3: "AT_LINKED_ACCOUNT",
		4: "AT_LINKED_CARD",
		5: "AT_LINKED_PAYEE",
		6: "AT_CHECK_DEPOSIT",
	}
	AccountType_value = map[string]int32{
		"AT_UNSPECIFIED":      0,
		"AT_ACCOUNT_BUSINESS": 1,
		"AT_ACCOUNT_CONSUMER": 2,
		"AT_LINKED_ACCOUNT":   3,
		"AT_LINKED_CARD":      4,
		"AT_LINKED_PAYEE":     5,
		"AT_CHECK_DEPOSIT":    6,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_banking_transfer_service_proto_enumTypes[4].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_banking_transfer_service_proto_enumTypes[4]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{4}
}

type ValidatorFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code    int32                   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Status  ValidatorFailureStatus  `protobuf:"varint,4,opt,name=status,proto3,enum=wise.protobuf.banking.transfer.ValidatorFailureStatus" json:"status,omitempty"`
	Data    []*ValidatorFailureData `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Created *timestamp.Timestamp    `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *ValidatorFailure) Reset() {
	*x = ValidatorFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorFailure) ProtoMessage() {}

func (x *ValidatorFailure) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorFailure.ProtoReflect.Descriptor instead.
func (*ValidatorFailure) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{0}
}

func (x *ValidatorFailure) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ValidatorFailure) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ValidatorFailure) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidatorFailure) GetStatus() ValidatorFailureStatus {
	if x != nil {
		return x.Status
	}
	return ValidatorFailureStatus_VFS_UNSPECIFIED
}

func (x *ValidatorFailure) GetData() []*ValidatorFailureData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ValidatorFailure) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type ValidatorFailureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ValidatorFailureData) Reset() {
	*x = ValidatorFailureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorFailureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorFailureData) ProtoMessage() {}

func (x *ValidatorFailureData) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorFailureData.ProtoReflect.Descriptor instead.
func (*ValidatorFailureData) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{1}
}

func (x *ValidatorFailureData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ValidatorFailureData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ConsumerId                string                `protobuf:"bytes,2,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	BusinessId                string                `protobuf:"bytes,3,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ContactId                 string                `protobuf:"bytes,4,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	EventThreadId             string                `protobuf:"bytes,5,opt,name=event_thread_id,json=eventThreadId,proto3" json:"event_thread_id,omitempty"`
	MonthlyInterestId         string                `protobuf:"bytes,6,opt,name=monthly_interest_id,json=monthlyInterestId,proto3" json:"monthly_interest_id,omitempty"`
	PaymentRequestId          string                `protobuf:"bytes,7,opt,name=payment_request_id,json=paymentRequestId,proto3" json:"payment_request_id,omitempty"`
	PartnerName               banking.PartnerName   `protobuf:"varint,8,opt,name=partner_name,json=partnerName,proto3,enum=wise.protobuf.banking.PartnerName" json:"partner_name,omitempty"`
	PartnerTransferId         string                `protobuf:"bytes,9,opt,name=partner_transfer_id,json=partnerTransferId,proto3" json:"partner_transfer_id,omitempty"`
	SourceAccountId           string                `protobuf:"bytes,10,opt,name=source_account_id,json=sourceAccountId,proto3" json:"source_account_id,omitempty"`
	SourceType                AccountType           `protobuf:"varint,11,opt,name=source_type,json=sourceType,proto3,enum=wise.protobuf.banking.transfer.AccountType" json:"source_type,omitempty"`
	DestAccountId             string                `protobuf:"bytes,12,opt,name=dest_account_id,json=destAccountId,proto3" json:"dest_account_id,omitempty"`
	DestType                  AccountType           `protobuf:"varint,13,opt,name=dest_type,json=destType,proto3,enum=wise.protobuf.banking.transfer.AccountType" json:"dest_type,omitempty"`
	Amount                    string                `protobuf:"bytes,14,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency                  string                `protobuf:"bytes,15,opt,name=currency,proto3" json:"currency,omitempty"`
	Notes                     string                `protobuf:"bytes,16,opt,name=notes,proto3" json:"notes,omitempty"`
	SendEmail                 bool                  `protobuf:"varint,17,opt,name=send_email,json=sendEmail,proto3" json:"send_email,omitempty"`
	PostedCreditTransactionId string                `protobuf:"bytes,18,opt,name=posted_credit_transaction_id,json=postedCreditTransactionId,proto3" json:"posted_credit_transaction_id,omitempty"`
	PostedDebitTransactionId  string                `protobuf:"bytes,19,opt,name=posted_debit_transaction_id,json=postedDebitTransactionId,proto3" json:"posted_debit_transaction_id,omitempty"`
	TransferStatus            TransferStatus        `protobuf:"varint,20,opt,name=transfer_status,json=transferStatus,proto3,enum=wise.protobuf.banking.transfer.TransferStatus" json:"transfer_status,omitempty"`
	TransferType              TransferType          `protobuf:"varint,21,opt,name=transfer_type,json=transferType,proto3,enum=wise.protobuf.banking.transfer.TransferType" json:"transfer_type,omitempty"`
	Created                   *timestamp.Timestamp  `protobuf:"bytes,22,opt,name=created,proto3" json:"created,omitempty"`
	Failures                  []*ValidatorFailure   `protobuf:"bytes,23,rep,name=failures,proto3" json:"failures,omitempty"`
	PartnerTransferStatus     PartnerTransferStatus `protobuf:"varint,24,opt,name=partner_transfer_status,json=partnerTransferStatus,proto3,enum=wise.protobuf.banking.transfer.PartnerTransferStatus" json:"partner_transfer_status,omitempty"`
	ErrorCause                string                `protobuf:"bytes,25,opt,name=error_cause,json=errorCause,proto3" json:"error_cause,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{2}
}

func (x *Transfer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transfer) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *Transfer) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *Transfer) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *Transfer) GetEventThreadId() string {
	if x != nil {
		return x.EventThreadId
	}
	return ""
}

func (x *Transfer) GetMonthlyInterestId() string {
	if x != nil {
		return x.MonthlyInterestId
	}
	return ""
}

func (x *Transfer) GetPaymentRequestId() string {
	if x != nil {
		return x.PaymentRequestId
	}
	return ""
}

func (x *Transfer) GetPartnerName() banking.PartnerName {
	if x != nil {
		return x.PartnerName
	}
	return banking.PartnerName_PN_UNSPECIFIED
}

func (x *Transfer) GetPartnerTransferId() string {
	if x != nil {
		return x.PartnerTransferId
	}
	return ""
}

func (x *Transfer) GetSourceAccountId() string {
	if x != nil {
		return x.SourceAccountId
	}
	return ""
}

func (x *Transfer) GetSourceType() AccountType {
	if x != nil {
		return x.SourceType
	}
	return AccountType_AT_UNSPECIFIED
}

func (x *Transfer) GetDestAccountId() string {
	if x != nil {
		return x.DestAccountId
	}
	return ""
}

func (x *Transfer) GetDestType() AccountType {
	if x != nil {
		return x.DestType
	}
	return AccountType_AT_UNSPECIFIED
}

func (x *Transfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transfer) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Transfer) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Transfer) GetSendEmail() bool {
	if x != nil {
		return x.SendEmail
	}
	return false
}

func (x *Transfer) GetPostedCreditTransactionId() string {
	if x != nil {
		return x.PostedCreditTransactionId
	}
	return ""
}

func (x *Transfer) GetPostedDebitTransactionId() string {
	if x != nil {
		return x.PostedDebitTransactionId
	}
	return ""
}

func (x *Transfer) GetTransferStatus() TransferStatus {
	if x != nil {
		return x.TransferStatus
	}
	return TransferStatus_TS_UNSPECIFIED
}

func (x *Transfer) GetTransferType() TransferType {
	if x != nil {
		return x.TransferType
	}
	return TransferType_TT_UNSPECIFIED
}

func (x *Transfer) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Transfer) GetFailures() []*ValidatorFailure {
	if x != nil {
		return x.Failures
	}
	return nil
}

func (x *Transfer) GetPartnerTransferStatus() PartnerTransferStatus {
	if x != nil {
		return x.PartnerTransferStatus
	}
	return PartnerTransferStatus_TPS_UNSPECIFIED
}

func (x *Transfer) GetErrorCause() string {
	if x != nil {
		return x.ErrorCause
	}
	return ""
}

type Transfers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfers []*Transfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *Transfers) Reset() {
	*x = Transfers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfers) ProtoMessage() {}

func (x *Transfers) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfers.ProtoReflect.Descriptor instead.
func (*Transfers) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{3}
}

func (x *Transfers) GetTransfers() []*Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type ExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerId        string           `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	BusinessId        string           `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ContactId         string           `protobuf:"bytes,3,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	SourceAccountId   string           `protobuf:"bytes,4,opt,name=source_account_id,json=sourceAccountId,proto3" json:"source_account_id,omitempty"`
	SourceType        AccountType      `protobuf:"varint,5,opt,name=source_type,json=sourceType,proto3,enum=wise.protobuf.banking.transfer.AccountType" json:"source_type,omitempty"`
	DestAccountId     string           `protobuf:"bytes,6,opt,name=dest_account_id,json=destAccountId,proto3" json:"dest_account_id,omitempty"`
	DestType          AccountType      `protobuf:"varint,7,opt,name=dest_type,json=destType,proto3,enum=wise.protobuf.banking.transfer.AccountType" json:"dest_type,omitempty"`
	Amount            string           `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency          string           `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	Notes             string           `protobuf:"bytes,10,opt,name=notes,proto3" json:"notes,omitempty"`
	SendEmail         bool             `protobuf:"varint,11,opt,name=send_email,json=sendEmail,proto3" json:"send_email,omitempty"`
	IpAddress         string           `protobuf:"bytes,12,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	CspTransferId     string           `protobuf:"bytes,13,opt,name=csp_transfer_id,json=cspTransferId,proto3" json:"csp_transfer_id,omitempty"`
	ActorId           string           `protobuf:"bytes,14,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActorType         golang.ActorType `protobuf:"varint,15,opt,name=actor_type,json=actorType,proto3,enum=wise.protobuf.ActorType" json:"actor_type,omitempty"`
	MonthlyInterestId string           `protobuf:"bytes,16,opt,name=monthly_interest_id,json=monthlyInterestId,proto3" json:"monthly_interest_id,omitempty"`
	PaymentRequestId  string           `protobuf:"bytes,17,opt,name=payment_request_id,json=paymentRequestId,proto3" json:"payment_request_id,omitempty"`
	Cvv2CvcCode       string           `protobuf:"bytes,18,opt,name=cvv2_cvc_code,json=cvv2CvcCode,proto3" json:"cvv2_cvc_code,omitempty"`
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteRequest) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *ExecuteRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *ExecuteRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *ExecuteRequest) GetSourceAccountId() string {
	if x != nil {
		return x.SourceAccountId
	}
	return ""
}

func (x *ExecuteRequest) GetSourceType() AccountType {
	if x != nil {
		return x.SourceType
	}
	return AccountType_AT_UNSPECIFIED
}

func (x *ExecuteRequest) GetDestAccountId() string {
	if x != nil {
		return x.DestAccountId
	}
	return ""
}

func (x *ExecuteRequest) GetDestType() AccountType {
	if x != nil {
		return x.DestType
	}
	return AccountType_AT_UNSPECIFIED
}

func (x *ExecuteRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ExecuteRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ExecuteRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ExecuteRequest) GetSendEmail() bool {
	if x != nil {
		return x.SendEmail
	}
	return false
}

func (x *ExecuteRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ExecuteRequest) GetCspTransferId() string {
	if x != nil {
		return x.CspTransferId
	}
	return ""
}

func (x *ExecuteRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *ExecuteRequest) GetActorType() golang.ActorType {
	if x != nil {
		return x.ActorType
	}
	return golang.ActorType_AT_UNSPECIFIED
}

func (x *ExecuteRequest) GetMonthlyInterestId() string {
	if x != nil {
		return x.MonthlyInterestId
	}
	return ""
}

func (x *ExecuteRequest) GetPaymentRequestId() string {
	if x != nil {
		return x.PaymentRequestId
	}
	return ""
}

func (x *ExecuteRequest) GetCvv2CvcCode() string {
	if x != nil {
		return x.Cvv2CvcCode
	}
	return ""
}

type CancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId        string `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	PartnerTransferId string `protobuf:"bytes,2,opt,name=partner_transfer_id,json=partnerTransferId,proto3" json:"partner_transfer_id,omitempty"`
}

func (x *CancelRequest) Reset() {
	*x = CancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRequest) ProtoMessage() {}

func (x *CancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRequest.ProtoReflect.Descriptor instead.
func (*CancelRequest) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{5}
}

func (x *CancelRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *CancelRequest) GetPartnerTransferId() string {
	if x != nil {
		return x.PartnerTransferId
	}
	return ""
}

type AgentExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId    string `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	CspUserId     string `protobuf:"bytes,3,opt,name=csp_user_id,json=cspUserId,proto3" json:"csp_user_id,omitempty"`
	IpAddress     string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *AgentExecuteRequest) Reset() {
	*x = AgentExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentExecuteRequest) ProtoMessage() {}

func (x *AgentExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentExecuteRequest.ProtoReflect.Descriptor instead.
func (*AgentExecuteRequest) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{6}
}

func (x *AgentExecuteRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *AgentExecuteRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *AgentExecuteRequest) GetCspUserId() string {
	if x != nil {
		return x.CspUserId
	}
	return ""
}

func (x *AgentExecuteRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type AgentDeclineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId    string `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	CspUserId     string `protobuf:"bytes,3,opt,name=csp_user_id,json=cspUserId,proto3" json:"csp_user_id,omitempty"`
	IpAddress     string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *AgentDeclineRequest) Reset() {
	*x = AgentDeclineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentDeclineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDeclineRequest) ProtoMessage() {}

func (x *AgentDeclineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDeclineRequest.ProtoReflect.Descriptor instead.
func (*AgentDeclineRequest) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{7}
}

func (x *AgentDeclineRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *AgentDeclineRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *AgentDeclineRequest) GetCspUserId() string {
	if x != nil {
		return x.CspUserId
	}
	return ""
}

func (x *AgentDeclineRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type CloseValidatorFailureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorFailureId string `protobuf:"bytes,1,opt,name=validator_failure_id,json=validatorFailureId,proto3" json:"validator_failure_id,omitempty"`
	CspUserId          string `protobuf:"bytes,2,opt,name=csp_user_id,json=cspUserId,proto3" json:"csp_user_id,omitempty"`
	IpAddress          string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *CloseValidatorFailureRequest) Reset() {
	*x = CloseValidatorFailureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseValidatorFailureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseValidatorFailureRequest) ProtoMessage() {}

func (x *CloseValidatorFailureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseValidatorFailureRequest.ProtoReflect.Descriptor instead.
func (*CloseValidatorFailureRequest) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{8}
}

func (x *CloseValidatorFailureRequest) GetValidatorFailureId() string {
	if x != nil {
		return x.ValidatorFailureId
	}
	return ""
}

func (x *CloseValidatorFailureRequest) GetCspUserId() string {
	if x != nil {
		return x.CspUserId
	}
	return ""
}

func (x *CloseValidatorFailureRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type NotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerTransferId string              `protobuf:"bytes,1,opt,name=partner_transfer_id,json=partnerTransferId,proto3" json:"partner_transfer_id,omitempty"`
	BusinessId        string              `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ConsumerId        string              `protobuf:"bytes,3,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	NewStatus         string              `protobuf:"bytes,4,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	PartnerName       banking.PartnerName `protobuf:"varint,5,opt,name=partner_name,json=partnerName,proto3,enum=wise.protobuf.banking.PartnerName" json:"partner_name,omitempty"`
}

func (x *NotificationRequest) Reset() {
	*x = NotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationRequest) ProtoMessage() {}

func (x *NotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationRequest.ProtoReflect.Descriptor instead.
func (*NotificationRequest) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{9}
}

func (x *NotificationRequest) GetPartnerTransferId() string {
	if x != nil {
		return x.PartnerTransferId
	}
	return ""
}

func (x *NotificationRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *NotificationRequest) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *NotificationRequest) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

func (x *NotificationRequest) GetPartnerName() banking.PartnerName {
	if x != nil {
		return x.PartnerName
	}
	return banking.PartnerName_PN_UNSPECIFIED
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId                string                `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	TransferStatus            TransferStatus        `protobuf:"varint,2,opt,name=transfer_status,json=transferStatus,proto3,enum=wise.protobuf.banking.transfer.TransferStatus" json:"transfer_status,omitempty"`
	PartnerTransferStatus     PartnerTransferStatus `protobuf:"varint,3,opt,name=partner_transfer_status,json=partnerTransferStatus,proto3,enum=wise.protobuf.banking.transfer.PartnerTransferStatus" json:"partner_transfer_status,omitempty"`
	PostedDebitTransactionId  string                `protobuf:"bytes,4,opt,name=posted_debit_transaction_id,json=postedDebitTransactionId,proto3" json:"posted_debit_transaction_id,omitempty"`
	PostedCreditTransactionId string                `protobuf:"bytes,5,opt,name=posted_credit_transaction_id,json=postedCreditTransactionId,proto3" json:"posted_credit_transaction_id,omitempty"`
	MonthlyInterestId         string                `protobuf:"bytes,6,opt,name=monthly_interest_id,json=monthlyInterestId,proto3" json:"monthly_interest_id,omitempty"`
	PaymentRequestId          string                `protobuf:"bytes,7,opt,name=payment_request_id,json=paymentRequestId,proto3" json:"payment_request_id,omitempty"`
	IpAddress                 string                `protobuf:"bytes,8,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *UpdateRequest) GetTransferStatus() TransferStatus {
	if x != nil {
		return x.TransferStatus
	}
	return TransferStatus_TS_UNSPECIFIED
}

func (x *UpdateRequest) GetPartnerTransferStatus() PartnerTransferStatus {
	if x != nil {
		return x.PartnerTransferStatus
	}
	return PartnerTransferStatus_TPS_UNSPECIFIED
}

func (x *UpdateRequest) GetPostedDebitTransactionId() string {
	if x != nil {
		return x.PostedDebitTransactionId
	}
	return ""
}

func (x *UpdateRequest) GetPostedCreditTransactionId() string {
	if x != nil {
		return x.PostedCreditTransactionId
	}
	return ""
}

func (x *UpdateRequest) GetMonthlyInterestId() string {
	if x != nil {
		return x.MonthlyInterestId
	}
	return ""
}

func (x *UpdateRequest) GetPaymentRequestId() string {
	if x != nil {
		return x.PaymentRequestId
	}
	return ""
}

func (x *UpdateRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId            string                  `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	PartnerTransferId     string                  `protobuf:"bytes,2,opt,name=partner_transfer_id,json=partnerTransferId,proto3" json:"partner_transfer_id,omitempty"`
	PartnerName           banking.PartnerName     `protobuf:"varint,3,opt,name=partner_name,json=partnerName,proto3,enum=wise.protobuf.banking.PartnerName" json:"partner_name,omitempty"`
	PaymentRequestId      string                  `protobuf:"bytes,4,opt,name=payment_request_id,json=paymentRequestId,proto3" json:"payment_request_id,omitempty"`
	AccountId             string                  `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PartnerTransferStatus []PartnerTransferStatus `protobuf:"varint,6,rep,packed,name=partner_transfer_status,json=partnerTransferStatus,proto3,enum=wise.protobuf.banking.transfer.PartnerTransferStatus" json:"partner_transfer_status,omitempty"`
	Amount                string                  `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	IpAddress             string                  `protobuf:"bytes,8,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *GetRequest) GetPartnerTransferId() string {
	if x != nil {
		return x.PartnerTransferId
	}
	return ""
}

func (x *GetRequest) GetPartnerName() banking.PartnerName {
	if x != nil {
		return x.PartnerName
	}
	return banking.PartnerName_PN_UNSPECIFIED
}

func (x *GetRequest) GetPaymentRequestId() string {
	if x != nil {
		return x.PaymentRequestId
	}
	return ""
}

func (x *GetRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetRequest) GetPartnerTransferStatus() []PartnerTransferStatus {
	if x != nil {
		return x.PartnerTransferStatus
	}
	return nil
}

func (x *GetRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GetRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type GetManyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId   string           `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ContactId    string           `protobuf:"bytes,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	Limit        int32            `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       int32            `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	StatusFilter []TransferStatus `protobuf:"varint,5,rep,packed,name=status_filter,json=statusFilter,proto3,enum=wise.protobuf.banking.transfer.TransferStatus" json:"status_filter,omitempty"`
	TypeFilter   []TransferType   `protobuf:"varint,6,rep,packed,name=type_filter,json=typeFilter,proto3,enum=wise.protobuf.banking.transfer.TransferType" json:"type_filter,omitempty"`
}

func (x *GetManyRequest) Reset() {
	*x = GetManyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_transfer_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManyRequest) ProtoMessage() {}

func (x *GetManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_transfer_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManyRequest.ProtoReflect.Descriptor instead.
func (*GetManyRequest) Descriptor() ([]byte, []int) {
	return file_banking_transfer_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetManyRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *GetManyRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *GetManyRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetManyRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetManyRequest) GetStatusFilter() []TransferStatus {
	if x != nil {
		return x.StatusFilter
	}
	return nil
}

func (x *GetManyRequest) GetTypeFilter() []TransferType {
	if x != nil {
		return x.TypeFilter
	}
	return nil
}

var File_banking_transfer_service_proto protoreflect.FileDescriptor

var file_banking_transfer_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x02, 0x0a, 0x10, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x3e, 0x0a,
	0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d, 0x0a,
	0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a,
	0x1c, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x57, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x4c, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x6d, 0x0a,
	0x17, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x61, 0x75, 0x73, 0x65, 0x22, 0x53, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x22, 0xe3, 0x05, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x73,
	0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x76, 0x76, 0x32, 0x5f, 0x63, 0x76, 0x63,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x76, 0x76,
	0x32, 0x43, 0x76, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x73,
	0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x73, 0x70,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1c, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x63,
	0x73, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x13, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf5, 0x03, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x57, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6d, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x62, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x97, 0x03, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa2, 0x02, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x53, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2a, 0x4b, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x56,
	0x46, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x56, 0x46, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x56, 0x46, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xbf,
	0x02, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x53, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x53, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x53, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x53,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x53, 0x5f,
	0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x53, 0x5f, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44,
	0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x53, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x0d,
	0x2a, 0x9b, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x54, 0x5f, 0x41, 0x43, 0x48, 0x5f,
	0x50, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x54, 0x5f, 0x41, 0x43, 0x48,
	0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x54, 0x5f, 0x57, 0x49,
	0x52, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x50,
	0x55, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x49,
	0x54, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x54, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x07, 0x2a, 0xc1,
	0x04, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x50, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x50, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x64, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x50, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45,
	0x44, 0x10, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x50, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x66, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x50, 0x53, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54,
	0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x50, 0x53, 0x5f, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x68, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x50, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x42, 0x55, 0x52, 0x53, 0x45, 0x44, 0x10, 0x69, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x50, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10,
	0x6a, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x50, 0x53, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x6b, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x50, 0x53, 0x5f, 0x50, 0x55,
	0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x6c, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x50, 0x53, 0x5f, 0x50, 0x55, 0x4c, 0x4c,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x50, 0x53, 0x5f, 0x50, 0x55,
	0x53, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x50, 0x53, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x52,
	0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x6f, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x50, 0x53,
	0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x70, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x50, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x71, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x50, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x42, 0x55, 0x52,
	0x53, 0x45, 0x44, 0x10, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x50, 0x53, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x45, 0x44, 0x10, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x50, 0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x74,
	0x12, 0x1c, 0x0a, 0x17, 0x54, 0x50, 0x53, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x82, 0x01, 0x12, 0x19,
	0x0a, 0x14, 0x54, 0x50, 0x53, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x44, 0x10, 0x83, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x50, 0x53,
	0x5f, 0x53, 0x4e, 0x41, 0x50, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x84, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x50, 0x53, 0x5f, 0x53,
	0x4e, 0x41, 0x50, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x45, 0x44, 0x10, 0x85, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x50, 0x53, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x86, 0x01, 0x2a, 0xa9, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x54, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x54, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44,
	0x5f, 0x50, 0x41, 0x59, 0x45, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x54, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x06, 0x32, 0xff,
	0x0b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x6a, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x43, 0x48,
	0x50, 0x75, 0x6c, 0x6c, 0x12, 0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x6a,
	0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x43, 0x48, 0x50, 0x75, 0x73, 0x68,
	0x12, 0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x10, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x2e,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x50, 0x75, 0x73, 0x68, 0x12, 0x2e, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x57, 0x69, 0x72, 0x65, 0x12, 0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x68, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x0c, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x12, 0x3c, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x12, 0x74, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x2d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x5b, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_banking_transfer_service_proto_rawDescOnce sync.Once
	file_banking_transfer_service_proto_rawDescData = file_banking_transfer_service_proto_rawDesc
)

func file_banking_transfer_service_proto_rawDescGZIP() []byte {
	file_banking_transfer_service_proto_rawDescOnce.Do(func() {
		file_banking_transfer_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_banking_transfer_service_proto_rawDescData)
	})
	return file_banking_transfer_service_proto_rawDescData
}

var file_banking_transfer_service_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_banking_transfer_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_banking_transfer_service_proto_goTypes = []interface{}{
	(ValidatorFailureStatus)(0),          // 0: wise.protobuf.banking.transfer.ValidatorFailureStatus
	(TransferStatus)(0),                  // 1: wise.protobuf.banking.transfer.TransferStatus
	(TransferType)(0),                    // 2: wise.protobuf.banking.transfer.TransferType
	(PartnerTransferStatus)(0),           // 3: wise.protobuf.banking.transfer.PartnerTransferStatus
	(AccountType)(0),                     // 4: wise.protobuf.banking.transfer.AccountType
	(*ValidatorFailure)(nil),             // 5: wise.protobuf.banking.transfer.ValidatorFailure
	(*ValidatorFailureData)(nil),         // 6: wise.protobuf.banking.transfer.ValidatorFailureData
	(*Transfer)(nil),                     // 7: wise.protobuf.banking.transfer.Transfer
	(*Transfers)(nil),                    // 8: wise.protobuf.banking.transfer.Transfers
	(*ExecuteRequest)(nil),               // 9: wise.protobuf.banking.transfer.ExecuteRequest
	(*CancelRequest)(nil),                // 10: wise.protobuf.banking.transfer.CancelRequest
	(*AgentExecuteRequest)(nil),          // 11: wise.protobuf.banking.transfer.AgentExecuteRequest
	(*AgentDeclineRequest)(nil),          // 12: wise.protobuf.banking.transfer.AgentDeclineRequest
	(*CloseValidatorFailureRequest)(nil), // 13: wise.protobuf.banking.transfer.CloseValidatorFailureRequest
	(*NotificationRequest)(nil),          // 14: wise.protobuf.banking.transfer.NotificationRequest
	(*UpdateRequest)(nil),                // 15: wise.protobuf.banking.transfer.UpdateRequest
	(*GetRequest)(nil),                   // 16: wise.protobuf.banking.transfer.GetRequest
	(*GetManyRequest)(nil),               // 17: wise.protobuf.banking.transfer.GetManyRequest
	(*timestamp.Timestamp)(nil),          // 18: google.protobuf.Timestamp
	(banking.PartnerName)(0),             // 19: wise.protobuf.banking.PartnerName
	(golang.ActorType)(0),                // 20: wise.protobuf.ActorType
}
var file_banking_transfer_service_proto_depIdxs = []int32{
	0,  // 0: wise.protobuf.banking.transfer.ValidatorFailure.status:type_name -> wise.protobuf.banking.transfer.ValidatorFailureStatus
	6,  // 1: wise.protobuf.banking.transfer.ValidatorFailure.data:type_name -> wise.protobuf.banking.transfer.ValidatorFailureData
	18, // 2: wise.protobuf.banking.transfer.ValidatorFailure.created:type_name -> google.protobuf.Timestamp
	19, // 3: wise.protobuf.banking.transfer.Transfer.partner_name:type_name -> wise.protobuf.banking.PartnerName
	4,  // 4: wise.protobuf.banking.transfer.Transfer.source_type:type_name -> wise.protobuf.banking.transfer.AccountType
	4,  // 5: wise.protobuf.banking.transfer.Transfer.dest_type:type_name -> wise.protobuf.banking.transfer.AccountType
	1,  // 6: wise.protobuf.banking.transfer.Transfer.transfer_status:type_name -> wise.protobuf.banking.transfer.TransferStatus
	2,  // 7: wise.protobuf.banking.transfer.Transfer.transfer_type:type_name -> wise.protobuf.banking.transfer.TransferType
	18, // 8: wise.protobuf.banking.transfer.Transfer.created:type_name -> google.protobuf.Timestamp
	5,  // 9: wise.protobuf.banking.transfer.Transfer.failures:type_name -> wise.protobuf.banking.transfer.ValidatorFailure
	3,  // 10: wise.protobuf.banking.transfer.Transfer.partner_transfer_status:type_name -> wise.protobuf.banking.transfer.PartnerTransferStatus
	7,  // 11: wise.protobuf.banking.transfer.Transfers.transfers:type_name -> wise.protobuf.banking.transfer.Transfer
	4,  // 12: wise.protobuf.banking.transfer.ExecuteRequest.source_type:type_name -> wise.protobuf.banking.transfer.AccountType
	4,  // 13: wise.protobuf.banking.transfer.ExecuteRequest.dest_type:type_name -> wise.protobuf.banking.transfer.AccountType
	20, // 14: wise.protobuf.banking.transfer.ExecuteRequest.actor_type:type_name -> wise.protobuf.ActorType
	19, // 15: wise.protobuf.banking.transfer.NotificationRequest.partner_name:type_name -> wise.protobuf.banking.PartnerName
	1,  // 16: wise.protobuf.banking.transfer.UpdateRequest.transfer_status:type_name -> wise.protobuf.banking.transfer.TransferStatus
	3,  // 17: wise.protobuf.banking.transfer.UpdateRequest.partner_transfer_status:type_name -> wise.protobuf.banking.transfer.PartnerTransferStatus
	19, // 18: wise.protobuf.banking.transfer.GetRequest.partner_name:type_name -> wise.protobuf.banking.PartnerName
	3,  // 19: wise.protobuf.banking.transfer.GetRequest.partner_transfer_status:type_name -> wise.protobuf.banking.transfer.PartnerTransferStatus
	1,  // 20: wise.protobuf.banking.transfer.GetManyRequest.status_filter:type_name -> wise.protobuf.banking.transfer.TransferStatus
	2,  // 21: wise.protobuf.banking.transfer.GetManyRequest.type_filter:type_name -> wise.protobuf.banking.transfer.TransferType
	9,  // 22: wise.protobuf.banking.transfer.TransferService.ExecuteACHPull:input_type -> wise.protobuf.banking.transfer.ExecuteRequest
	9,  // 23: wise.protobuf.banking.transfer.TransferService.ExecuteACHPush:input_type -> wise.protobuf.banking.transfer.ExecuteRequest
	9,  // 24: wise.protobuf.banking.transfer.TransferService.ExecuteDebitPull:input_type -> wise.protobuf.banking.transfer.ExecuteRequest
	9,  // 25: wise.protobuf.banking.transfer.TransferService.ExecuteDebitPush:input_type -> wise.protobuf.banking.transfer.ExecuteRequest
	9,  // 26: wise.protobuf.banking.transfer.TransferService.ExecuteWire:input_type -> wise.protobuf.banking.transfer.ExecuteRequest
	9,  // 27: wise.protobuf.banking.transfer.TransferService.ExecuteCheck:input_type -> wise.protobuf.banking.transfer.ExecuteRequest
	11, // 28: wise.protobuf.banking.transfer.TransferService.AgentExecute:input_type -> wise.protobuf.banking.transfer.AgentExecuteRequest
	12, // 29: wise.protobuf.banking.transfer.TransferService.AgentDecline:input_type -> wise.protobuf.banking.transfer.AgentDeclineRequest
	13, // 30: wise.protobuf.banking.transfer.TransferService.CloseValidatorFailure:input_type -> wise.protobuf.banking.transfer.CloseValidatorFailureRequest
	14, // 31: wise.protobuf.banking.transfer.TransferService.ProcessNotification:input_type -> wise.protobuf.banking.transfer.NotificationRequest
	10, // 32: wise.protobuf.banking.transfer.TransferService.Cancel:input_type -> wise.protobuf.banking.transfer.CancelRequest
	15, // 33: wise.protobuf.banking.transfer.TransferService.Update:input_type -> wise.protobuf.banking.transfer.UpdateRequest
	16, // 34: wise.protobuf.banking.transfer.TransferService.Get:input_type -> wise.protobuf.banking.transfer.GetRequest
	17, // 35: wise.protobuf.banking.transfer.TransferService.GetMany:input_type -> wise.protobuf.banking.transfer.GetManyRequest
	7,  // 36: wise.protobuf.banking.transfer.TransferService.ExecuteACHPull:output_type -> wise.protobuf.banking.transfer.Transfer
	7,  // 37: wise.protobuf.banking.transfer.TransferService.ExecuteACHPush:output_type -> wise.protobuf.banking.transfer.Transfer
	7,  // 38: wise.protobuf.banking.transfer.TransferService.ExecuteDebitPull:output_type -> wise.protobuf.banking.transfer.Transfer
	7,  // 39: wise.protobuf.banking.transfer.TransferService.ExecuteDebitPush:output_type -> wise.protobuf.banking.transfer.Transfer
	7,  // 40: wise.protobuf.banking.transfer.TransferService.ExecuteWire:output_type -> wise.protobuf.banking.transfer.Transfer
	7,  // 41: wise.protobuf.banking.transfer.TransferService.ExecuteCheck:output_type -> wise.protobuf.banking.transfer.Transfer
	7,  // 42: wise.protobuf.banking.transfer.TransferService.AgentExecute:output_type -> wise.protobuf.banking.transfer.Transfer
	7,  // 43: wise.protobuf.banking.transfer.TransferService.AgentDecline:output_type -> wise.protobuf.banking.transfer.Transfer
	5,  // 44: wise.protobuf.banking.transfer.TransferService.CloseValidatorFailure:output_type -> wise.protobuf.banking.transfer.ValidatorFailure
	7,  // 45: wise.protobuf.banking.transfer.TransferService.ProcessNotification:output_type -> wise.protobuf.banking.transfer.Transfer
	7,  // 46: wise.protobuf.banking.transfer.TransferService.Cancel:output_type -> wise.protobuf.banking.transfer.Transfer
	7,  // 47: wise.protobuf.banking.transfer.TransferService.Update:output_type -> wise.protobuf.banking.transfer.Transfer
	7,  // 48: wise.protobuf.banking.transfer.TransferService.Get:output_type -> wise.protobuf.banking.transfer.Transfer
	8,  // 49: wise.protobuf.banking.transfer.TransferService.GetMany:output_type -> wise.protobuf.banking.transfer.Transfers
	36, // [36:50] is the sub-list for method output_type
	22, // [22:36] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_banking_transfer_service_proto_init() }
func file_banking_transfer_service_proto_init() {
	if File_banking_transfer_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_banking_transfer_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_transfer_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorFailureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_transfer_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_transfer_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_transfer_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_transfer_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_transfer_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_transfer_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentDeclineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_transfer_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseValidatorFailureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_transfer_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_transfer_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_transfer_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_transfer_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_banking_transfer_service_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_banking_transfer_service_proto_goTypes,
		DependencyIndexes: file_banking_transfer_service_proto_depIdxs,
		EnumInfos:         file_banking_transfer_service_proto_enumTypes,
		MessageInfos:      file_banking_transfer_service_proto_msgTypes,
	}.Build()
	File_banking_transfer_service_proto = out.File
	file_banking_transfer_service_proto_rawDesc = nil
	file_banking_transfer_service_proto_goTypes = nil
	file_banking_transfer_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TransferServiceClient is the client API for TransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransferServiceClient interface {
	ExecuteACHPull(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Transfer, error)
	ExecuteACHPush(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Transfer, error)
	ExecuteDebitPull(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Transfer, error)
	ExecuteDebitPush(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Transfer, error)
	ExecuteWire(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Transfer, error)
	ExecuteCheck(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Transfer, error)
	AgentExecute(ctx context.Context, in *AgentExecuteRequest, opts ...grpc.CallOption) (*Transfer, error)
	AgentDecline(ctx context.Context, in *AgentDeclineRequest, opts ...grpc.CallOption) (*Transfer, error)
	CloseValidatorFailure(ctx context.Context, in *CloseValidatorFailureRequest, opts ...grpc.CallOption) (*ValidatorFailure, error)
	ProcessNotification(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*Transfer, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*Transfer, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Transfer, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Transfer, error)
	GetMany(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*Transfers, error)
}

type transferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferServiceClient(cc grpc.ClientConnInterface) TransferServiceClient {
	return &transferServiceClient{cc}
}

func (c *transferServiceClient) ExecuteACHPull(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/ExecuteACHPull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) ExecuteACHPush(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/ExecuteACHPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) ExecuteDebitPull(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/ExecuteDebitPull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) ExecuteDebitPush(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/ExecuteDebitPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) ExecuteWire(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/ExecuteWire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) ExecuteCheck(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/ExecuteCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) AgentExecute(ctx context.Context, in *AgentExecuteRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/AgentExecute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) AgentDecline(ctx context.Context, in *AgentDeclineRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/AgentDecline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) CloseValidatorFailure(ctx context.Context, in *CloseValidatorFailureRequest, opts ...grpc.CallOption) (*ValidatorFailure, error) {
	out := new(ValidatorFailure)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/CloseValidatorFailure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) ProcessNotification(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/ProcessNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) GetMany(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*Transfers, error) {
	out := new(Transfers)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.transfer.TransferService/GetMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferServiceServer is the server API for TransferService service.
type TransferServiceServer interface {
	ExecuteACHPull(context.Context, *ExecuteRequest) (*Transfer, error)
	ExecuteACHPush(context.Context, *ExecuteRequest) (*Transfer, error)
	ExecuteDebitPull(context.Context, *ExecuteRequest) (*Transfer, error)
	ExecuteDebitPush(context.Context, *ExecuteRequest) (*Transfer, error)
	ExecuteWire(context.Context, *ExecuteRequest) (*Transfer, error)
	ExecuteCheck(context.Context, *ExecuteRequest) (*Transfer, error)
	AgentExecute(context.Context, *AgentExecuteRequest) (*Transfer, error)
	AgentDecline(context.Context, *AgentDeclineRequest) (*Transfer, error)
	CloseValidatorFailure(context.Context, *CloseValidatorFailureRequest) (*ValidatorFailure, error)
	ProcessNotification(context.Context, *NotificationRequest) (*Transfer, error)
	Cancel(context.Context, *CancelRequest) (*Transfer, error)
	Update(context.Context, *UpdateRequest) (*Transfer, error)
	Get(context.Context, *GetRequest) (*Transfer, error)
	GetMany(context.Context, *GetManyRequest) (*Transfers, error)
}

// UnimplementedTransferServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTransferServiceServer struct {
}

func (*UnimplementedTransferServiceServer) ExecuteACHPull(context.Context, *ExecuteRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteACHPull not implemented")
}
func (*UnimplementedTransferServiceServer) ExecuteACHPush(context.Context, *ExecuteRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteACHPush not implemented")
}
func (*UnimplementedTransferServiceServer) ExecuteDebitPull(context.Context, *ExecuteRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDebitPull not implemented")
}
func (*UnimplementedTransferServiceServer) ExecuteDebitPush(context.Context, *ExecuteRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDebitPush not implemented")
}
func (*UnimplementedTransferServiceServer) ExecuteWire(context.Context, *ExecuteRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteWire not implemented")
}
func (*UnimplementedTransferServiceServer) ExecuteCheck(context.Context, *ExecuteRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCheck not implemented")
}
func (*UnimplementedTransferServiceServer) AgentExecute(context.Context, *AgentExecuteRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentExecute not implemented")
}
func (*UnimplementedTransferServiceServer) AgentDecline(context.Context, *AgentDeclineRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentDecline not implemented")
}
func (*UnimplementedTransferServiceServer) CloseValidatorFailure(context.Context, *CloseValidatorFailureRequest) (*ValidatorFailure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseValidatorFailure not implemented")
}
func (*UnimplementedTransferServiceServer) ProcessNotification(context.Context, *NotificationRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessNotification not implemented")
}
func (*UnimplementedTransferServiceServer) Cancel(context.Context, *CancelRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (*UnimplementedTransferServiceServer) Update(context.Context, *UpdateRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedTransferServiceServer) Get(context.Context, *GetRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedTransferServiceServer) GetMany(context.Context, *GetManyRequest) (*Transfers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}

func RegisterTransferServiceServer(s *grpc.Server, srv TransferServiceServer) {
	s.RegisterService(&_TransferService_serviceDesc, srv)
}

func _TransferService_ExecuteACHPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).ExecuteACHPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/ExecuteACHPull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).ExecuteACHPull(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_ExecuteACHPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).ExecuteACHPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/ExecuteACHPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).ExecuteACHPush(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_ExecuteDebitPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).ExecuteDebitPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/ExecuteDebitPull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).ExecuteDebitPull(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_ExecuteDebitPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).ExecuteDebitPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/ExecuteDebitPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).ExecuteDebitPush(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_ExecuteWire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).ExecuteWire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/ExecuteWire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).ExecuteWire(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_ExecuteCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).ExecuteCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/ExecuteCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).ExecuteCheck(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_AgentExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).AgentExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/AgentExecute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).AgentExecute(ctx, req.(*AgentExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_AgentDecline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentDeclineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).AgentDecline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/AgentDecline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).AgentDecline(ctx, req.(*AgentDeclineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_CloseValidatorFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseValidatorFailureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).CloseValidatorFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/CloseValidatorFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).CloseValidatorFailure(ctx, req.(*CloseValidatorFailureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_ProcessNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).ProcessNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/ProcessNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).ProcessNotification(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.transfer.TransferService/GetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).GetMany(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransferService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wise.protobuf.banking.transfer.TransferService",
	HandlerType: (*TransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteACHPull",
			Handler:    _TransferService_ExecuteACHPull_Handler,
		},
		{
			MethodName: "ExecuteACHPush",
			Handler:    _TransferService_ExecuteACHPush_Handler,
		},
		{
			MethodName: "ExecuteDebitPull",
			Handler:    _TransferService_ExecuteDebitPull_Handler,
		},
		{
			MethodName: "ExecuteDebitPush",
			Handler:    _TransferService_ExecuteDebitPush_Handler,
		},
		{
			MethodName: "ExecuteWire",
			Handler:    _TransferService_ExecuteWire_Handler,
		},
		{
			MethodName: "ExecuteCheck",
			Handler:    _TransferService_ExecuteCheck_Handler,
		},
		{
			MethodName: "AgentExecute",
			Handler:    _TransferService_AgentExecute_Handler,
		},
		{
			MethodName: "AgentDecline",
			Handler:    _TransferService_AgentDecline_Handler,
		},
		{
			MethodName: "CloseValidatorFailure",
			Handler:    _TransferService_CloseValidatorFailure_Handler,
		},
		{
			MethodName: "ProcessNotification",
			Handler:    _TransferService_ProcessNotification_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _TransferService_Cancel_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TransferService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TransferService_Get_Handler,
		},
		{
			MethodName: "GetMany",
			Handler:    _TransferService_GetMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banking/transfer/service.proto",
}
