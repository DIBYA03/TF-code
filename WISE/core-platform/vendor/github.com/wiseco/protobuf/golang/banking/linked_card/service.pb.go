// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: banking/linked_card/service.proto

package linked_card

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	golang "github.com/wiseco/protobuf/golang"
	banking "github.com/wiseco/protobuf/golang/banking"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LinkedCardStatus int32

const (
	LinkedCardStatus_LCS_UNSPECIFIED LinkedCardStatus = 0
	LinkedCardStatus_LCS_ACTIVE      LinkedCardStatus = 1
	LinkedCardStatus_LCS_INACTIVE    LinkedCardStatus = 2
)

// Enum value maps for LinkedCardStatus.
var (
	LinkedCardStatus_name = map[int32]string{
		0: "LCS_UNSPECIFIED",
		1: "LCS_ACTIVE",
		2: "LCS_INACTIVE",
	}
	LinkedCardStatus_value = map[string]int32{
		"LCS_UNSPECIFIED": 0,
		"LCS_ACTIVE":      1,
		"LCS_INACTIVE":    2,
	}
)

func (x LinkedCardStatus) Enum() *LinkedCardStatus {
	p := new(LinkedCardStatus)
	*p = x
	return p
}

func (x LinkedCardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkedCardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_banking_linked_card_service_proto_enumTypes[0].Descriptor()
}

func (LinkedCardStatus) Type() protoreflect.EnumType {
	return &file_banking_linked_card_service_proto_enumTypes[0]
}

func (x LinkedCardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkedCardStatus.Descriptor instead.
func (LinkedCardStatus) EnumDescriptor() ([]byte, []int) {
	return file_banking_linked_card_service_proto_rawDescGZIP(), []int{0}
}

type NetworkStatus int32

const (
	NetworkStatus_NS_UNSPECIFIED NetworkStatus = 0
	NetworkStatus_NS_VALID       NetworkStatus = 1
	NetworkStatus_NS_INVALID     NetworkStatus = 2
	NetworkStatus_NS_UNKNOWN     NetworkStatus = 3
)

// Enum value maps for NetworkStatus.
var (
	NetworkStatus_name = map[int32]string{
		0: "NS_UNSPECIFIED",
		1: "NS_VALID",
		2: "NS_INVALID",
		3: "NS_UNKNOWN",
	}
	NetworkStatus_value = map[string]int32{
		"NS_UNSPECIFIED": 0,
		"NS_VALID":       1,
		"NS_INVALID":     2,
		"NS_UNKNOWN":     3,
	}
)

func (x NetworkStatus) Enum() *NetworkStatus {
	p := new(NetworkStatus)
	*p = x
	return p
}

func (x NetworkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_banking_linked_card_service_proto_enumTypes[1].Descriptor()
}

func (NetworkStatus) Type() protoreflect.EnumType {
	return &file_banking_linked_card_service_proto_enumTypes[1]
}

func (x NetworkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkStatus.Descriptor instead.
func (NetworkStatus) EnumDescriptor() ([]byte, []int) {
	return file_banking_linked_card_service_proto_rawDescGZIP(), []int{1}
}

type VerificationResult int32

const (
	VerificationResult_VR_UNSPECIFIED VerificationResult = 0
	VerificationResult_VR_MATCH       VerificationResult = 1
	VerificationResult_VR_MISMATCH    VerificationResult = 2
	VerificationResult_VR_UNKNOWN     VerificationResult = 3
)

// Enum value maps for VerificationResult.
var (
	VerificationResult_name = map[int32]string{
		0: "VR_UNSPECIFIED",
		1: "VR_MATCH",
		2: "VR_MISMATCH",
		3: "VR_UNKNOWN",
	}
	VerificationResult_value = map[string]int32{
		"VR_UNSPECIFIED": 0,
		"VR_MATCH":       1,
		"VR_MISMATCH":    2,
		"VR_UNKNOWN":     3,
	}
)

func (x VerificationResult) Enum() *VerificationResult {
	p := new(VerificationResult)
	*p = x
	return p
}

func (x VerificationResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationResult) Descriptor() protoreflect.EnumDescriptor {
	return file_banking_linked_card_service_proto_enumTypes[2].Descriptor()
}

func (VerificationResult) Type() protoreflect.EnumType {
	return &file_banking_linked_card_service_proto_enumTypes[2]
}

func (x VerificationResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationResult.Descriptor instead.
func (VerificationResult) EnumDescriptor() ([]byte, []int) {
	return file_banking_linked_card_service_proto_rawDescGZIP(), []int{2}
}

type LinkedCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ConsumerId                string                `protobuf:"bytes,2,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	BusinessId                string                `protobuf:"bytes,3,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ContactId                 string                `protobuf:"bytes,4,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	Address                   *golang.Address       `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	PartnerName               banking.PartnerName   `protobuf:"varint,6,opt,name=partner_name,json=partnerName,proto3,enum=wise.protobuf.banking.PartnerName" json:"partner_name,omitempty"`
	PartnerReferenceId        string                `protobuf:"bytes,7,opt,name=partner_reference_id,json=partnerReferenceId,proto3" json:"partner_reference_id,omitempty"`
	CardNumberLast_4          string                `protobuf:"bytes,8,opt,name=card_number_last_4,json=cardNumberLast4,proto3" json:"card_number_last_4,omitempty"`
	CardType                  string                `protobuf:"bytes,9,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	CardBrand                 string                `protobuf:"bytes,10,opt,name=card_brand,json=cardBrand,proto3" json:"card_brand,omitempty"`
	IssuerBankName            string                `protobuf:"bytes,11,opt,name=issuer_bank_name,json=issuerBankName,proto3" json:"issuer_bank_name,omitempty"`
	HolderName                string                `protobuf:"bytes,12,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	Alias                     string                `protobuf:"bytes,13,opt,name=alias,proto3" json:"alias,omitempty"`
	UsageType                 banking.UsageType     `protobuf:"varint,14,opt,name=usage_type,json=usageType,proto3,enum=wise.protobuf.banking.UsageType" json:"usage_type,omitempty"`
	LinkedCardSubtype         banking.LinkedSubtype `protobuf:"varint,15,opt,name=linked_card_subtype,json=linkedCardSubtype,proto3,enum=wise.protobuf.banking.LinkedSubtype" json:"linked_card_subtype,omitempty"`
	FastFundsEnabled          string                `protobuf:"bytes,16,opt,name=fast_funds_enabled,json=fastFundsEnabled,proto3" json:"fast_funds_enabled,omitempty"`
	LinkedCardStatus          LinkedCardStatus      `protobuf:"varint,17,opt,name=linked_card_status,json=linkedCardStatus,proto3,enum=wise.protobuf.banking.linked_card.LinkedCardStatus" json:"linked_card_status,omitempty"`
	Created                   *timestamp.Timestamp  `protobuf:"bytes,18,opt,name=created,proto3" json:"created,omitempty"`
	Modified                  *timestamp.Timestamp  `protobuf:"bytes,19,opt,name=modified,proto3" json:"modified,omitempty"`
	NetworkStatus             NetworkStatus         `protobuf:"varint,20,opt,name=network_status,json=networkStatus,proto3,enum=wise.protobuf.banking.linked_card.NetworkStatus" json:"network_status,omitempty"`
	CvvVerificationResult     VerificationResult    `protobuf:"varint,21,opt,name=cvv_verification_result,json=cvvVerificationResult,proto3,enum=wise.protobuf.banking.linked_card.VerificationResult" json:"cvv_verification_result,omitempty"`
	AddressVerificationResult VerificationResult    `protobuf:"varint,22,opt,name=address_verification_result,json=addressVerificationResult,proto3,enum=wise.protobuf.banking.linked_card.VerificationResult" json:"address_verification_result,omitempty"`
}

func (x *LinkedCard) Reset() {
	*x = LinkedCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_card_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedCard) ProtoMessage() {}

func (x *LinkedCard) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_card_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedCard.ProtoReflect.Descriptor instead.
func (*LinkedCard) Descriptor() ([]byte, []int) {
	return file_banking_linked_card_service_proto_rawDescGZIP(), []int{0}
}

func (x *LinkedCard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LinkedCard) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *LinkedCard) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *LinkedCard) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *LinkedCard) GetAddress() *golang.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *LinkedCard) GetPartnerName() banking.PartnerName {
	if x != nil {
		return x.PartnerName
	}
	return banking.PartnerName_PN_UNSPECIFIED
}

func (x *LinkedCard) GetPartnerReferenceId() string {
	if x != nil {
		return x.PartnerReferenceId
	}
	return ""
}

func (x *LinkedCard) GetCardNumberLast_4() string {
	if x != nil {
		return x.CardNumberLast_4
	}
	return ""
}

func (x *LinkedCard) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *LinkedCard) GetCardBrand() string {
	if x != nil {
		return x.CardBrand
	}
	return ""
}

func (x *LinkedCard) GetIssuerBankName() string {
	if x != nil {
		return x.IssuerBankName
	}
	return ""
}

func (x *LinkedCard) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *LinkedCard) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *LinkedCard) GetUsageType() banking.UsageType {
	if x != nil {
		return x.UsageType
	}
	return banking.UsageType_UT_UNSPECIFIED
}

func (x *LinkedCard) GetLinkedCardSubtype() banking.LinkedSubtype {
	if x != nil {
		return x.LinkedCardSubtype
	}
	return banking.LinkedSubtype_LST_UNSPECIFIED
}

func (x *LinkedCard) GetFastFundsEnabled() string {
	if x != nil {
		return x.FastFundsEnabled
	}
	return ""
}

func (x *LinkedCard) GetLinkedCardStatus() LinkedCardStatus {
	if x != nil {
		return x.LinkedCardStatus
	}
	return LinkedCardStatus_LCS_UNSPECIFIED
}

func (x *LinkedCard) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *LinkedCard) GetModified() *timestamp.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *LinkedCard) GetNetworkStatus() NetworkStatus {
	if x != nil {
		return x.NetworkStatus
	}
	return NetworkStatus_NS_UNSPECIFIED
}

func (x *LinkedCard) GetCvvVerificationResult() VerificationResult {
	if x != nil {
		return x.CvvVerificationResult
	}
	return VerificationResult_VR_UNSPECIFIED
}

func (x *LinkedCard) GetAddressVerificationResult() VerificationResult {
	if x != nil {
		return x.AddressVerificationResult
	}
	return VerificationResult_VR_UNSPECIFIED
}

type LinkedCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedCards []*LinkedCard `protobuf:"bytes,1,rep,name=linked_cards,json=linkedCards,proto3" json:"linked_cards,omitempty"`
}

func (x *LinkedCards) Reset() {
	*x = LinkedCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_card_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedCards) ProtoMessage() {}

func (x *LinkedCards) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_card_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedCards.ProtoReflect.Descriptor instead.
func (*LinkedCards) Descriptor() ([]byte, []int) {
	return file_banking_linked_card_service_proto_rawDescGZIP(), []int{1}
}

func (x *LinkedCards) GetLinkedCards() []*LinkedCard {
	if x != nil {
		return x.LinkedCards
	}
	return nil
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerId          string                `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	BusinessId          string                `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ContactId           string                `protobuf:"bytes,3,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	PartnerName         banking.PartnerName   `protobuf:"varint,4,opt,name=partner_name,json=partnerName,proto3,enum=wise.protobuf.banking.PartnerName" json:"partner_name,omitempty"`
	Address             *golang.Address       `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Cvv2CvcCode         string                `protobuf:"bytes,6,opt,name=cvv2_cvc_code,json=cvv2CvcCode,proto3" json:"cvv2_cvc_code,omitempty"`
	IssuerAccountNumber string                `protobuf:"bytes,7,opt,name=issuer_account_number,json=issuerAccountNumber,proto3" json:"issuer_account_number,omitempty"`
	ExpirationDate      string                `protobuf:"bytes,8,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	HolderName          string                `protobuf:"bytes,9,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	Alias               string                `protobuf:"bytes,10,opt,name=alias,proto3" json:"alias,omitempty"`
	UsageType           banking.UsageType     `protobuf:"varint,11,opt,name=usage_type,json=usageType,proto3,enum=wise.protobuf.banking.UsageType" json:"usage_type,omitempty"`
	LinkedCardSubtype   banking.LinkedSubtype `protobuf:"varint,12,opt,name=linked_card_subtype,json=linkedCardSubtype,proto3,enum=wise.protobuf.banking.LinkedSubtype" json:"linked_card_subtype,omitempty"`
	IpAddress           string                `protobuf:"bytes,13,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	ValidateCard        golang.Boolean        `protobuf:"varint,14,opt,name=validate_card,json=validateCard,proto3,enum=wise.protobuf.Boolean" json:"validate_card,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_card_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_card_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_card_service_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterRequest) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *RegisterRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *RegisterRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *RegisterRequest) GetPartnerName() banking.PartnerName {
	if x != nil {
		return x.PartnerName
	}
	return banking.PartnerName_PN_UNSPECIFIED
}

func (x *RegisterRequest) GetAddress() *golang.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *RegisterRequest) GetCvv2CvcCode() string {
	if x != nil {
		return x.Cvv2CvcCode
	}
	return ""
}

func (x *RegisterRequest) GetIssuerAccountNumber() string {
	if x != nil {
		return x.IssuerAccountNumber
	}
	return ""
}

func (x *RegisterRequest) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *RegisterRequest) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *RegisterRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *RegisterRequest) GetUsageType() banking.UsageType {
	if x != nil {
		return x.UsageType
	}
	return banking.UsageType_UT_UNSPECIFIED
}

func (x *RegisterRequest) GetLinkedCardSubtype() banking.LinkedSubtype {
	if x != nil {
		return x.LinkedCardSubtype
	}
	return banking.LinkedSubtype_LST_UNSPECIFIED
}

func (x *RegisterRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *RegisterRequest) GetValidateCard() golang.Boolean {
	if x != nil {
		return x.ValidateCard
	}
	return golang.Boolean_B_UNSPECIFIED
}

type RegisterExistingCardToNewContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId     string `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ConsumerId     string `protobuf:"bytes,2,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	ContactId      string `protobuf:"bytes,3,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	CardInfoHashed string `protobuf:"bytes,4,opt,name=card_info_hashed,json=cardInfoHashed,proto3" json:"card_info_hashed,omitempty"`
}

func (x *RegisterExistingCardToNewContactRequest) Reset() {
	*x = RegisterExistingCardToNewContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_card_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterExistingCardToNewContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterExistingCardToNewContactRequest) ProtoMessage() {}

func (x *RegisterExistingCardToNewContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_card_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterExistingCardToNewContactRequest.ProtoReflect.Descriptor instead.
func (*RegisterExistingCardToNewContactRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_card_service_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterExistingCardToNewContactRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *RegisterExistingCardToNewContactRequest) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *RegisterExistingCardToNewContactRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *RegisterExistingCardToNewContactRequest) GetCardInfoHashed() string {
	if x != nil {
		return x.CardInfoHashed
	}
	return ""
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedCardId        string                `protobuf:"bytes,1,opt,name=linked_card_id,json=linkedCardId,proto3" json:"linked_card_id,omitempty"`
	Address             *golang.Address       `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Cvv2CvcCode         string                `protobuf:"bytes,3,opt,name=cvv2_cvc_code,json=cvv2CvcCode,proto3" json:"cvv2_cvc_code,omitempty"`
	IssuerAccountNumber string                `protobuf:"bytes,4,opt,name=issuer_account_number,json=issuerAccountNumber,proto3" json:"issuer_account_number,omitempty"`
	ExpirationDate      string                `protobuf:"bytes,5,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	HolderName          string                `protobuf:"bytes,6,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	Alias               string                `protobuf:"bytes,7,opt,name=alias,proto3" json:"alias,omitempty"`
	LinkedCardSubtype   banking.LinkedSubtype `protobuf:"varint,8,opt,name=linked_card_subtype,json=linkedCardSubtype,proto3,enum=wise.protobuf.banking.LinkedSubtype" json:"linked_card_subtype,omitempty"`
	IpAddress           string                `protobuf:"bytes,9,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	ContactId           string                `protobuf:"bytes,10,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	LinkedCardStatus    LinkedCardStatus      `protobuf:"varint,11,opt,name=linked_card_status,json=linkedCardStatus,proto3,enum=wise.protobuf.banking.linked_card.LinkedCardStatus" json:"linked_card_status,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_card_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_card_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_card_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateRequest) GetLinkedCardId() string {
	if x != nil {
		return x.LinkedCardId
	}
	return ""
}

func (x *UpdateRequest) GetAddress() *golang.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UpdateRequest) GetCvv2CvcCode() string {
	if x != nil {
		return x.Cvv2CvcCode
	}
	return ""
}

func (x *UpdateRequest) GetIssuerAccountNumber() string {
	if x != nil {
		return x.IssuerAccountNumber
	}
	return ""
}

func (x *UpdateRequest) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *UpdateRequest) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *UpdateRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *UpdateRequest) GetLinkedCardSubtype() banking.LinkedSubtype {
	if x != nil {
		return x.LinkedCardSubtype
	}
	return banking.LinkedSubtype_LST_UNSPECIFIED
}

func (x *UpdateRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *UpdateRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *UpdateRequest) GetLinkedCardStatus() LinkedCardStatus {
	if x != nil {
		return x.LinkedCardStatus
	}
	return LinkedCardStatus_LCS_UNSPECIFIED
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedCardId string           `protobuf:"bytes,1,opt,name=linked_card_id,json=linkedCardId,proto3" json:"linked_card_id,omitempty"`
	ActorId      string           `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActorType    golang.ActorType `protobuf:"varint,3,opt,name=actor_type,json=actorType,proto3,enum=wise.protobuf.ActorType" json:"actor_type,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_card_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_card_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_card_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteRequest) GetLinkedCardId() string {
	if x != nil {
		return x.LinkedCardId
	}
	return ""
}

func (x *DeleteRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *DeleteRequest) GetActorType() golang.ActorType {
	if x != nil {
		return x.ActorType
	}
	return golang.ActorType_AT_UNSPECIFIED
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedCardId       string `protobuf:"bytes,1,opt,name=linked_card_id,json=linkedCardId,proto3" json:"linked_card_id,omitempty"`
	PartnerReferenceId string `protobuf:"bytes,2,opt,name=partner_reference_id,json=partnerReferenceId,proto3" json:"partner_reference_id,omitempty"`
	CardInfoHashed     string `protobuf:"bytes,3,opt,name=card_info_hashed,json=cardInfoHashed,proto3" json:"card_info_hashed,omitempty"`
	ContactId          string `protobuf:"bytes,4,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_card_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_card_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_card_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetRequest) GetLinkedCardId() string {
	if x != nil {
		return x.LinkedCardId
	}
	return ""
}

func (x *GetRequest) GetPartnerReferenceId() string {
	if x != nil {
		return x.PartnerReferenceId
	}
	return ""
}

func (x *GetRequest) GetCardInfoHashed() string {
	if x != nil {
		return x.CardInfoHashed
	}
	return ""
}

func (x *GetRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

type GetForCardInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId          string `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	IssuerAccountNumber string `protobuf:"bytes,2,opt,name=issuer_account_number,json=issuerAccountNumber,proto3" json:"issuer_account_number,omitempty"`
	ExpirationDate      string `protobuf:"bytes,3,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Cvv2CvcCode         string `protobuf:"bytes,4,opt,name=cvv2_cvc_code,json=cvv2CvcCode,proto3" json:"cvv2_cvc_code,omitempty"`
	ContactId           string `protobuf:"bytes,5,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
}

func (x *GetForCardInfoRequest) Reset() {
	*x = GetForCardInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_card_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForCardInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForCardInfoRequest) ProtoMessage() {}

func (x *GetForCardInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_card_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForCardInfoRequest.ProtoReflect.Descriptor instead.
func (*GetForCardInfoRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_card_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetForCardInfoRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *GetForCardInfoRequest) GetIssuerAccountNumber() string {
	if x != nil {
		return x.IssuerAccountNumber
	}
	return ""
}

func (x *GetForCardInfoRequest) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *GetForCardInfoRequest) GetCvv2CvcCode() string {
	if x != nil {
		return x.Cvv2CvcCode
	}
	return ""
}

func (x *GetForCardInfoRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

type GetManyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId     string                  `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ContactId      string                  `protobuf:"bytes,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	CardInfoHashed string                  `protobuf:"bytes,3,opt,name=card_info_hashed,json=cardInfoHashed,proto3" json:"card_info_hashed,omitempty"`
	Limit          int32                   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32                   `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	StatusFilter   []LinkedCardStatus      `protobuf:"varint,6,rep,packed,name=status_filter,json=statusFilter,proto3,enum=wise.protobuf.banking.linked_card.LinkedCardStatus" json:"status_filter,omitempty"`
	SubtypeFilter  []banking.LinkedSubtype `protobuf:"varint,7,rep,packed,name=subtype_filter,json=subtypeFilter,proto3,enum=wise.protobuf.banking.LinkedSubtype" json:"subtype_filter,omitempty"`
}

func (x *GetManyRequest) Reset() {
	*x = GetManyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_linked_card_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManyRequest) ProtoMessage() {}

func (x *GetManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_linked_card_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManyRequest.ProtoReflect.Descriptor instead.
func (*GetManyRequest) Descriptor() ([]byte, []int) {
	return file_banking_linked_card_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetManyRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *GetManyRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *GetManyRequest) GetCardInfoHashed() string {
	if x != nil {
		return x.CardInfoHashed
	}
	return ""
}

func (x *GetManyRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetManyRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetManyRequest) GetStatusFilter() []LinkedCardStatus {
	if x != nil {
		return x.StatusFilter
	}
	return nil
}

func (x *GetManyRequest) GetSubtypeFilter() []banking.LinkedSubtype {
	if x != nil {
		return x.SubtypeFilter
	}
	return nil
}

var File_banking_linked_card_service_proto protoreflect.FileDescriptor

var file_banking_linked_card_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x21, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x09, 0x0a,
	0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x34, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x61, 0x73, 0x74, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x6d, 0x0a, 0x17, 0x63, 0x76, 0x76, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x15, 0x63, 0x76, 0x76, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x75, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5f, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x96, 0x05, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x76, 0x76, 0x32, 0x5f, 0x63, 0x76,
	0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x76,
	0x76, 0x32, 0x43, 0x76, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x3f, 0x0a,
	0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54,
	0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x22, 0xb4, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x22, 0x96, 0x04, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x76, 0x76, 0x32, 0x5f, 0x63, 0x76, 0x63, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x76, 0x76, 0x32, 0x43, 0x76,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x61, 0x0a,
	0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x89, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xad, 0x01, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0xd8, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x76, 0x76, 0x32, 0x5f, 0x63, 0x76, 0x63,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x76, 0x76,
	0x32, 0x43, 0x76, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0xcf, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x58, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0e,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2a, 0x49, 0x0a, 0x10, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x43, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x43, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x43, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x2a, 0x51, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x53, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x53, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a, 0x57, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x0e, 0x56, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x56, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03,
	0x32, 0xba, 0x06, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x9d, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x4a, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f,
	0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x69, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x52, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x63, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x79, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x6c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x31, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x42, 0x37, 0x5a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_banking_linked_card_service_proto_rawDescOnce sync.Once
	file_banking_linked_card_service_proto_rawDescData = file_banking_linked_card_service_proto_rawDesc
)

func file_banking_linked_card_service_proto_rawDescGZIP() []byte {
	file_banking_linked_card_service_proto_rawDescOnce.Do(func() {
		file_banking_linked_card_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_banking_linked_card_service_proto_rawDescData)
	})
	return file_banking_linked_card_service_proto_rawDescData
}

var file_banking_linked_card_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_banking_linked_card_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_banking_linked_card_service_proto_goTypes = []interface{}{
	(LinkedCardStatus)(0),                           // 0: wise.protobuf.banking.linked_card.LinkedCardStatus
	(NetworkStatus)(0),                              // 1: wise.protobuf.banking.linked_card.NetworkStatus
	(VerificationResult)(0),                         // 2: wise.protobuf.banking.linked_card.VerificationResult
	(*LinkedCard)(nil),                              // 3: wise.protobuf.banking.linked_card.LinkedCard
	(*LinkedCards)(nil),                             // 4: wise.protobuf.banking.linked_card.LinkedCards
	(*RegisterRequest)(nil),                         // 5: wise.protobuf.banking.linked_card.RegisterRequest
	(*RegisterExistingCardToNewContactRequest)(nil), // 6: wise.protobuf.banking.linked_card.RegisterExistingCardToNewContactRequest
	(*UpdateRequest)(nil),                           // 7: wise.protobuf.banking.linked_card.UpdateRequest
	(*DeleteRequest)(nil),                           // 8: wise.protobuf.banking.linked_card.DeleteRequest
	(*GetRequest)(nil),                              // 9: wise.protobuf.banking.linked_card.GetRequest
	(*GetForCardInfoRequest)(nil),                   // 10: wise.protobuf.banking.linked_card.GetForCardInfoRequest
	(*GetManyRequest)(nil),                          // 11: wise.protobuf.banking.linked_card.GetManyRequest
	(*golang.Address)(nil),                          // 12: wise.protobuf.Address
	(banking.PartnerName)(0),                        // 13: wise.protobuf.banking.PartnerName
	(banking.UsageType)(0),                          // 14: wise.protobuf.banking.UsageType
	(banking.LinkedSubtype)(0),                      // 15: wise.protobuf.banking.LinkedSubtype
	(*timestamp.Timestamp)(nil),                     // 16: google.protobuf.Timestamp
	(golang.Boolean)(0),                             // 17: wise.protobuf.Boolean
	(golang.ActorType)(0),                           // 18: wise.protobuf.ActorType
	(*empty.Empty)(nil),                             // 19: google.protobuf.Empty
}
var file_banking_linked_card_service_proto_depIdxs = []int32{
	12, // 0: wise.protobuf.banking.linked_card.LinkedCard.address:type_name -> wise.protobuf.Address
	13, // 1: wise.protobuf.banking.linked_card.LinkedCard.partner_name:type_name -> wise.protobuf.banking.PartnerName
	14, // 2: wise.protobuf.banking.linked_card.LinkedCard.usage_type:type_name -> wise.protobuf.banking.UsageType
	15, // 3: wise.protobuf.banking.linked_card.LinkedCard.linked_card_subtype:type_name -> wise.protobuf.banking.LinkedSubtype
	0,  // 4: wise.protobuf.banking.linked_card.LinkedCard.linked_card_status:type_name -> wise.protobuf.banking.linked_card.LinkedCardStatus
	16, // 5: wise.protobuf.banking.linked_card.LinkedCard.created:type_name -> google.protobuf.Timestamp
	16, // 6: wise.protobuf.banking.linked_card.LinkedCard.modified:type_name -> google.protobuf.Timestamp
	1,  // 7: wise.protobuf.banking.linked_card.LinkedCard.network_status:type_name -> wise.protobuf.banking.linked_card.NetworkStatus
	2,  // 8: wise.protobuf.banking.linked_card.LinkedCard.cvv_verification_result:type_name -> wise.protobuf.banking.linked_card.VerificationResult
	2,  // 9: wise.protobuf.banking.linked_card.LinkedCard.address_verification_result:type_name -> wise.protobuf.banking.linked_card.VerificationResult
	3,  // 10: wise.protobuf.banking.linked_card.LinkedCards.linked_cards:type_name -> wise.protobuf.banking.linked_card.LinkedCard
	13, // 11: wise.protobuf.banking.linked_card.RegisterRequest.partner_name:type_name -> wise.protobuf.banking.PartnerName
	12, // 12: wise.protobuf.banking.linked_card.RegisterRequest.address:type_name -> wise.protobuf.Address
	14, // 13: wise.protobuf.banking.linked_card.RegisterRequest.usage_type:type_name -> wise.protobuf.banking.UsageType
	15, // 14: wise.protobuf.banking.linked_card.RegisterRequest.linked_card_subtype:type_name -> wise.protobuf.banking.LinkedSubtype
	17, // 15: wise.protobuf.banking.linked_card.RegisterRequest.validate_card:type_name -> wise.protobuf.Boolean
	12, // 16: wise.protobuf.banking.linked_card.UpdateRequest.address:type_name -> wise.protobuf.Address
	15, // 17: wise.protobuf.banking.linked_card.UpdateRequest.linked_card_subtype:type_name -> wise.protobuf.banking.LinkedSubtype
	0,  // 18: wise.protobuf.banking.linked_card.UpdateRequest.linked_card_status:type_name -> wise.protobuf.banking.linked_card.LinkedCardStatus
	18, // 19: wise.protobuf.banking.linked_card.DeleteRequest.actor_type:type_name -> wise.protobuf.ActorType
	0,  // 20: wise.protobuf.banking.linked_card.GetManyRequest.status_filter:type_name -> wise.protobuf.banking.linked_card.LinkedCardStatus
	15, // 21: wise.protobuf.banking.linked_card.GetManyRequest.subtype_filter:type_name -> wise.protobuf.banking.LinkedSubtype
	5,  // 22: wise.protobuf.banking.linked_card.LinkedCardService.RegisterAndValidate:input_type -> wise.protobuf.banking.linked_card.RegisterRequest
	6,  // 23: wise.protobuf.banking.linked_card.LinkedCardService.RegisterExistingCardToNewContact:input_type -> wise.protobuf.banking.linked_card.RegisterExistingCardToNewContactRequest
	7,  // 24: wise.protobuf.banking.linked_card.LinkedCardService.Update:input_type -> wise.protobuf.banking.linked_card.UpdateRequest
	8,  // 25: wise.protobuf.banking.linked_card.LinkedCardService.Delete:input_type -> wise.protobuf.banking.linked_card.DeleteRequest
	9,  // 26: wise.protobuf.banking.linked_card.LinkedCardService.Get:input_type -> wise.protobuf.banking.linked_card.GetRequest
	10, // 27: wise.protobuf.banking.linked_card.LinkedCardService.GetForCardInfo:input_type -> wise.protobuf.banking.linked_card.GetForCardInfoRequest
	11, // 28: wise.protobuf.banking.linked_card.LinkedCardService.GetMany:input_type -> wise.protobuf.banking.linked_card.GetManyRequest
	3,  // 29: wise.protobuf.banking.linked_card.LinkedCardService.RegisterAndValidate:output_type -> wise.protobuf.banking.linked_card.LinkedCard
	3,  // 30: wise.protobuf.banking.linked_card.LinkedCardService.RegisterExistingCardToNewContact:output_type -> wise.protobuf.banking.linked_card.LinkedCard
	3,  // 31: wise.protobuf.banking.linked_card.LinkedCardService.Update:output_type -> wise.protobuf.banking.linked_card.LinkedCard
	19, // 32: wise.protobuf.banking.linked_card.LinkedCardService.Delete:output_type -> google.protobuf.Empty
	3,  // 33: wise.protobuf.banking.linked_card.LinkedCardService.Get:output_type -> wise.protobuf.banking.linked_card.LinkedCard
	3,  // 34: wise.protobuf.banking.linked_card.LinkedCardService.GetForCardInfo:output_type -> wise.protobuf.banking.linked_card.LinkedCard
	4,  // 35: wise.protobuf.banking.linked_card.LinkedCardService.GetMany:output_type -> wise.protobuf.banking.linked_card.LinkedCards
	29, // [29:36] is the sub-list for method output_type
	22, // [22:29] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_banking_linked_card_service_proto_init() }
func file_banking_linked_card_service_proto_init() {
	if File_banking_linked_card_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_banking_linked_card_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_card_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_card_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_card_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterExistingCardToNewContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_card_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_card_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_card_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_card_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForCardInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_linked_card_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_banking_linked_card_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_banking_linked_card_service_proto_goTypes,
		DependencyIndexes: file_banking_linked_card_service_proto_depIdxs,
		EnumInfos:         file_banking_linked_card_service_proto_enumTypes,
		MessageInfos:      file_banking_linked_card_service_proto_msgTypes,
	}.Build()
	File_banking_linked_card_service_proto = out.File
	file_banking_linked_card_service_proto_rawDesc = nil
	file_banking_linked_card_service_proto_goTypes = nil
	file_banking_linked_card_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LinkedCardServiceClient is the client API for LinkedCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LinkedCardServiceClient interface {
	RegisterAndValidate(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*LinkedCard, error)
	RegisterExistingCardToNewContact(ctx context.Context, in *RegisterExistingCardToNewContactRequest, opts ...grpc.CallOption) (*LinkedCard, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*LinkedCard, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*LinkedCard, error)
	GetForCardInfo(ctx context.Context, in *GetForCardInfoRequest, opts ...grpc.CallOption) (*LinkedCard, error)
	GetMany(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*LinkedCards, error)
}

type linkedCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkedCardServiceClient(cc grpc.ClientConnInterface) LinkedCardServiceClient {
	return &linkedCardServiceClient{cc}
}

func (c *linkedCardServiceClient) RegisterAndValidate(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*LinkedCard, error) {
	out := new(LinkedCard)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_card.LinkedCardService/RegisterAndValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedCardServiceClient) RegisterExistingCardToNewContact(ctx context.Context, in *RegisterExistingCardToNewContactRequest, opts ...grpc.CallOption) (*LinkedCard, error) {
	out := new(LinkedCard)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_card.LinkedCardService/RegisterExistingCardToNewContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedCardServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*LinkedCard, error) {
	out := new(LinkedCard)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_card.LinkedCardService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedCardServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_card.LinkedCardService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedCardServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*LinkedCard, error) {
	out := new(LinkedCard)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_card.LinkedCardService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedCardServiceClient) GetForCardInfo(ctx context.Context, in *GetForCardInfoRequest, opts ...grpc.CallOption) (*LinkedCard, error) {
	out := new(LinkedCard)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_card.LinkedCardService/GetForCardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedCardServiceClient) GetMany(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*LinkedCards, error) {
	out := new(LinkedCards)
	err := c.cc.Invoke(ctx, "/wise.protobuf.banking.linked_card.LinkedCardService/GetMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkedCardServiceServer is the server API for LinkedCardService service.
type LinkedCardServiceServer interface {
	RegisterAndValidate(context.Context, *RegisterRequest) (*LinkedCard, error)
	RegisterExistingCardToNewContact(context.Context, *RegisterExistingCardToNewContactRequest) (*LinkedCard, error)
	Update(context.Context, *UpdateRequest) (*LinkedCard, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	Get(context.Context, *GetRequest) (*LinkedCard, error)
	GetForCardInfo(context.Context, *GetForCardInfoRequest) (*LinkedCard, error)
	GetMany(context.Context, *GetManyRequest) (*LinkedCards, error)
}

// UnimplementedLinkedCardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLinkedCardServiceServer struct {
}

func (*UnimplementedLinkedCardServiceServer) RegisterAndValidate(context.Context, *RegisterRequest) (*LinkedCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAndValidate not implemented")
}
func (*UnimplementedLinkedCardServiceServer) RegisterExistingCardToNewContact(context.Context, *RegisterExistingCardToNewContactRequest) (*LinkedCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExistingCardToNewContact not implemented")
}
func (*UnimplementedLinkedCardServiceServer) Update(context.Context, *UpdateRequest) (*LinkedCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedLinkedCardServiceServer) Delete(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedLinkedCardServiceServer) Get(context.Context, *GetRequest) (*LinkedCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedLinkedCardServiceServer) GetForCardInfo(context.Context, *GetForCardInfoRequest) (*LinkedCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForCardInfo not implemented")
}
func (*UnimplementedLinkedCardServiceServer) GetMany(context.Context, *GetManyRequest) (*LinkedCards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}

func RegisterLinkedCardServiceServer(s *grpc.Server, srv LinkedCardServiceServer) {
	s.RegisterService(&_LinkedCardService_serviceDesc, srv)
}

func _LinkedCardService_RegisterAndValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedCardServiceServer).RegisterAndValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_card.LinkedCardService/RegisterAndValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedCardServiceServer).RegisterAndValidate(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedCardService_RegisterExistingCardToNewContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterExistingCardToNewContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedCardServiceServer).RegisterExistingCardToNewContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_card.LinkedCardService/RegisterExistingCardToNewContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedCardServiceServer).RegisterExistingCardToNewContact(ctx, req.(*RegisterExistingCardToNewContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedCardService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedCardServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_card.LinkedCardService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedCardServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedCardService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedCardServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_card.LinkedCardService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedCardServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedCardService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedCardServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_card.LinkedCardService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedCardServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedCardService_GetForCardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForCardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedCardServiceServer).GetForCardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_card.LinkedCardService/GetForCardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedCardServiceServer).GetForCardInfo(ctx, req.(*GetForCardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedCardService_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedCardServiceServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.banking.linked_card.LinkedCardService/GetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedCardServiceServer).GetMany(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LinkedCardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wise.protobuf.banking.linked_card.LinkedCardService",
	HandlerType: (*LinkedCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAndValidate",
			Handler:    _LinkedCardService_RegisterAndValidate_Handler,
		},
		{
			MethodName: "RegisterExistingCardToNewContact",
			Handler:    _LinkedCardService_RegisterExistingCardToNewContact_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LinkedCardService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LinkedCardService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LinkedCardService_Get_Handler,
		},
		{
			MethodName: "GetForCardInfo",
			Handler:    _LinkedCardService_GetForCardInfo_Handler,
		},
		{
			MethodName: "GetMany",
			Handler:    _LinkedCardService_GetMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banking/linked_card/service.proto",
}
