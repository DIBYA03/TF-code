// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: error.proto

package golang

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// API error codes
type ErrorCode int32

const (
	// Unspecified
	ErrorCode_EC_UNSPECIFIED ErrorCode = 0
	// Authentication error
	ErrorCode_EC_AUTH_ERROR ErrorCode = 100
	// Invalid api secret key
	ErrorCode_EC_AUTH_INVALID_API_SECRET ErrorCode = 101
	// Consumer error
	ErrorCode_EC_CONSUMER_ERROR ErrorCode = 200
	// Consumer not found
	ErrorCode_EC_CONSUMER_NOT_FOUND ErrorCode = 201
	// Consumer already exists error
	ErrorCode_EC_CONSUMER_ALREADY_EXISTS ErrorCode = 202
	// Consumer document error
	ErrorCode_EC_CONSUMER_DOCUMENT_ERROR ErrorCode = 240
	// Consumer document not found
	ErrorCode_EC_CONSUMER_DOCUMENT_NOT_FOUND ErrorCode = 241
	// Consumer document exists
	ErrorCode_EC_CONSUMER_DOCUMENT_ALREADY_EXISTS ErrorCode = 242
	// Business error
	ErrorCode_EC_BUSINESS_ERROR ErrorCode = 300
	// Business not found
	ErrorCode_EC_BUSINESS_NOT_FOUND ErrorCode = 301
	// Business already exists
	ErrorCode_EC_BUSINESS_ALREADY_EXISTS ErrorCode = 302
	// Business document error
	ErrorCode_EC_BUSINESS_DOCUMENT_ERROR ErrorCode = 340
	// Business document not found
	ErrorCode_EC_BUSINESS_DOCUMENT_NOT_FOUND ErrorCode = 341
	// Business document exists
	ErrorCode_EC_BUSINESS_DOCUMENT_ALREADY_EXISTS ErrorCode = 342
	// Business member
	ErrorCode_EC_BUSINESS_MEMBER_ERROR ErrorCode = 350
	// Business member not found
	ErrorCode_EC_BUSINESS_MEMBER_NOT_FOUND ErrorCode = 351
	// Business member exists
	ErrorCode_EC_BUSINESS_MEMBER_ALREADY_EXISTS ErrorCode = 352
	// Business member document error
	ErrorCode_EC_BUSINESS_MEMBER_DOCUMENT_ERROR ErrorCode = 360
	// Business member document not found
	ErrorCode_EC_BUSINESS_MEMBER_DOCUMENT_NOT_FOUND ErrorCode = 361
	// Business member document exists
	ErrorCode_EC_BUSINESS_MEMBER_DOCUMENT_ALREADY_EXISTS ErrorCode = 362
	// Verification error
	ErrorCode_EC_VERIFICATION_ERROR ErrorCode = 400
	// Error sending SMS
	ErrorCode_EC_VERIFICATION_SEND_SMS_ERROR ErrorCode = 401
	// Service Banking error
	ErrorCode_EC_SERVICE_BANKING_ERROR ErrorCode = 450
	// Service Banking configuration error
	ErrorCode_EC_SERVICE_BANKING_CONFIGURATION_ERROR ErrorCode = 451
	ErrorCode_EC_BANKING_ERROR                       ErrorCode = 500
	// Banking Party
	ErrorCode_EC_BANKING_PARTY_ERROR ErrorCode = 510
	// Banking Party not found
	ErrorCode_EC_BANKING_PARTY_NOT_FOUND ErrorCode = 511
	// Banking Party exists
	ErrorCode_EC_BANKING_PARTY_ALREADY_EXISTS ErrorCode = 512
	// Banking Transfer
	ErrorCode_EC_BANKING_TRANSFER_ERROR ErrorCode = 530
	// Banking check
	ErrorCode_EC_BANKING_CHECK_ERROR ErrorCode = 550
	// Banking check invalid image
	ErrorCode_EC_BANKING_CHECK_INVALID_IMAGE ErrorCode = 551
	//Banking limit
	ErrorCode_EC_BANKING_LIMIT_ERROR ErrorCode = 560
	// If the product id sent as part of invoice request does not exist
	ErrorCode_EC_INVOICE_ERROR                    ErrorCode = 600
	ErrorCode_EC_INVOICE_NO_MATCHING_ITEM         ErrorCode = 601
	ErrorCode_EC_INVOICE_DECIMAL_CONVERSION_ERROR ErrorCode = 602
	ErrorCode_EC_INVOICE_ITEM_INVALID_PRICE       ErrorCode = 604
	ErrorCode_EC_INVOICE_ACTION_ERROR             ErrorCode = 605
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:   "EC_UNSPECIFIED",
		100: "EC_AUTH_ERROR",
		101: "EC_AUTH_INVALID_API_SECRET",
		200: "EC_CONSUMER_ERROR",
		201: "EC_CONSUMER_NOT_FOUND",
		202: "EC_CONSUMER_ALREADY_EXISTS",
		240: "EC_CONSUMER_DOCUMENT_ERROR",
		241: "EC_CONSUMER_DOCUMENT_NOT_FOUND",
		242: "EC_CONSUMER_DOCUMENT_ALREADY_EXISTS",
		300: "EC_BUSINESS_ERROR",
		301: "EC_BUSINESS_NOT_FOUND",
		302: "EC_BUSINESS_ALREADY_EXISTS",
		340: "EC_BUSINESS_DOCUMENT_ERROR",
		341: "EC_BUSINESS_DOCUMENT_NOT_FOUND",
		342: "EC_BUSINESS_DOCUMENT_ALREADY_EXISTS",
		350: "EC_BUSINESS_MEMBER_ERROR",
		351: "EC_BUSINESS_MEMBER_NOT_FOUND",
		352: "EC_BUSINESS_MEMBER_ALREADY_EXISTS",
		360: "EC_BUSINESS_MEMBER_DOCUMENT_ERROR",
		361: "EC_BUSINESS_MEMBER_DOCUMENT_NOT_FOUND",
		362: "EC_BUSINESS_MEMBER_DOCUMENT_ALREADY_EXISTS",
		400: "EC_VERIFICATION_ERROR",
		401: "EC_VERIFICATION_SEND_SMS_ERROR",
		450: "EC_SERVICE_BANKING_ERROR",
		451: "EC_SERVICE_BANKING_CONFIGURATION_ERROR",
		500: "EC_BANKING_ERROR",
		510: "EC_BANKING_PARTY_ERROR",
		511: "EC_BANKING_PARTY_NOT_FOUND",
		512: "EC_BANKING_PARTY_ALREADY_EXISTS",
		530: "EC_BANKING_TRANSFER_ERROR",
		550: "EC_BANKING_CHECK_ERROR",
		551: "EC_BANKING_CHECK_INVALID_IMAGE",
		560: "EC_BANKING_LIMIT_ERROR",
		600: "EC_INVOICE_ERROR",
		601: "EC_INVOICE_NO_MATCHING_ITEM",
		602: "EC_INVOICE_DECIMAL_CONVERSION_ERROR",
		604: "EC_INVOICE_ITEM_INVALID_PRICE",
		605: "EC_INVOICE_ACTION_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"EC_UNSPECIFIED":                             0,
		"EC_AUTH_ERROR":                              100,
		"EC_AUTH_INVALID_API_SECRET":                 101,
		"EC_CONSUMER_ERROR":                          200,
		"EC_CONSUMER_NOT_FOUND":                      201,
		"EC_CONSUMER_ALREADY_EXISTS":                 202,
		"EC_CONSUMER_DOCUMENT_ERROR":                 240,
		"EC_CONSUMER_DOCUMENT_NOT_FOUND":             241,
		"EC_CONSUMER_DOCUMENT_ALREADY_EXISTS":        242,
		"EC_BUSINESS_ERROR":                          300,
		"EC_BUSINESS_NOT_FOUND":                      301,
		"EC_BUSINESS_ALREADY_EXISTS":                 302,
		"EC_BUSINESS_DOCUMENT_ERROR":                 340,
		"EC_BUSINESS_DOCUMENT_NOT_FOUND":             341,
		"EC_BUSINESS_DOCUMENT_ALREADY_EXISTS":        342,
		"EC_BUSINESS_MEMBER_ERROR":                   350,
		"EC_BUSINESS_MEMBER_NOT_FOUND":               351,
		"EC_BUSINESS_MEMBER_ALREADY_EXISTS":          352,
		"EC_BUSINESS_MEMBER_DOCUMENT_ERROR":          360,
		"EC_BUSINESS_MEMBER_DOCUMENT_NOT_FOUND":      361,
		"EC_BUSINESS_MEMBER_DOCUMENT_ALREADY_EXISTS": 362,
		"EC_VERIFICATION_ERROR":                      400,
		"EC_VERIFICATION_SEND_SMS_ERROR":             401,
		"EC_SERVICE_BANKING_ERROR":                   450,
		"EC_SERVICE_BANKING_CONFIGURATION_ERROR":     451,
		"EC_BANKING_ERROR":                           500,
		"EC_BANKING_PARTY_ERROR":                     510,
		"EC_BANKING_PARTY_NOT_FOUND":                 511,
		"EC_BANKING_PARTY_ALREADY_EXISTS":            512,
		"EC_BANKING_TRANSFER_ERROR":                  530,
		"EC_BANKING_CHECK_ERROR":                     550,
		"EC_BANKING_CHECK_INVALID_IMAGE":             551,
		"EC_BANKING_LIMIT_ERROR":                     560,
		"EC_INVOICE_ERROR":                           600,
		"EC_INVOICE_NO_MATCHING_ITEM":                601,
		"EC_INVOICE_DECIMAL_CONVERSION_ERROR":        602,
		"EC_INVOICE_ITEM_INVALID_PRICE":              604,
		"EC_INVOICE_ACTION_ERROR":                    605,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_error_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_error_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{0}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=wise.protobuf.ErrorCode" json:"code,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_EC_UNSPECIFIED
}

type HttpError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API request id
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// HTTP method
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// HTTP status code
	Status int32 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	// API error code
	Code ErrorCode `protobuf:"varint,4,opt,name=code,proto3,enum=wise.protobuf.ErrorCode" json:"code,omitempty"`
	// Error message
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HttpError) Reset() {
	*x = HttpError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpError) ProtoMessage() {}

func (x *HttpError) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpError.ProtoReflect.Descriptor instead.
func (*HttpError) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{1}
}

func (x *HttpError) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *HttpError) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpError) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HttpError) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_EC_UNSPECIFIED
}

func (x *HttpError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_error_proto protoreflect.FileDescriptor

var file_error_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x35, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x09, 0x48, 0x74, 0x74, 0x70, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0xf7, 0x09, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x43, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x64, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x65, 0x12, 0x16, 0x0a,
	0x11, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0xc8, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x55, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xc9,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52,
	0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0xca, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45,
	0x52, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0xf0, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d,
	0x45, 0x52, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xf1, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x45, 0x43, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0xf2, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x43, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xac, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x43,
	0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0xad, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x43, 0x5f, 0x42, 0x55, 0x53,
	0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x10, 0xae, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x43, 0x5f, 0x42, 0x55,
	0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd4, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x45, 0x43, 0x5f, 0x42,
	0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xd5, 0x02, 0x12, 0x28, 0x0a,
	0x23, 0x45, 0x43, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x10, 0xd6, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x43, 0x5f, 0x42, 0x55,
	0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0xde, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x43, 0x5f, 0x42, 0x55, 0x53,
	0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xdf, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x45, 0x43, 0x5f,
	0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xe0,
	0x02, 0x12, 0x26, 0x0a, 0x21, 0x45, 0x43, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xe8, 0x02, 0x12, 0x2a, 0x0a, 0x25, 0x45, 0x43, 0x5f,
	0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0xe9, 0x02, 0x12, 0x2f, 0x0a, 0x2a, 0x45, 0x43, 0x5f, 0x42, 0x55, 0x53, 0x49,
	0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x43, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0xea, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x43, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x90, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x45, 0x43, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x91, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x43, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0xc2, 0x03, 0x12, 0x2b, 0x0a, 0x26, 0x45, 0x43, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0xc3, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x43, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf4, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x43,
	0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xfe, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x43, 0x5f, 0x42, 0x41,
	0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xff, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x43, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x80, 0x04, 0x12, 0x1e,
	0x0a, 0x19, 0x45, 0x43, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x92, 0x04, 0x12, 0x1b,
	0x0a, 0x16, 0x45, 0x43, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa6, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x45,
	0x43, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0xa7, 0x04,
	0x12, 0x1b, 0x0a, 0x16, 0x45, 0x43, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xb0, 0x04, 0x12, 0x15, 0x0a,
	0x10, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xd8, 0x04, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x10, 0xd9, 0x04, 0x12, 0x28, 0x0a, 0x23, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xda, 0x04,
	0x12, 0x22, 0x0a, 0x1d, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x10, 0xdc, 0x04, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0xdd, 0x04, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x77, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_error_proto_rawDescOnce sync.Once
	file_error_proto_rawDescData = file_error_proto_rawDesc
)

func file_error_proto_rawDescGZIP() []byte {
	file_error_proto_rawDescOnce.Do(func() {
		file_error_proto_rawDescData = protoimpl.X.CompressGZIP(file_error_proto_rawDescData)
	})
	return file_error_proto_rawDescData
}

var file_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_error_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_error_proto_goTypes = []interface{}{
	(ErrorCode)(0),    // 0: wise.protobuf.ErrorCode
	(*Error)(nil),     // 1: wise.protobuf.Error
	(*HttpError)(nil), // 2: wise.protobuf.HttpError
}
var file_error_proto_depIdxs = []int32{
	0, // 0: wise.protobuf.Error.code:type_name -> wise.protobuf.ErrorCode
	0, // 1: wise.protobuf.HttpError.code:type_name -> wise.protobuf.ErrorCode
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_error_proto_init() }
func file_error_proto_init() {
	if File_error_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_error_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_error_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_error_proto_goTypes,
		DependencyIndexes: file_error_proto_depIdxs,
		EnumInfos:         file_error_proto_enumTypes,
		MessageInfos:      file_error_proto_msgTypes,
	}.Build()
	File_error_proto = out.File
	file_error_proto_rawDesc = nil
	file_error_proto_goTypes = nil
	file_error_proto_depIdxs = nil
}
