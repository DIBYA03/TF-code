// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: business.proto

package golang

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BusinessKYCStatus int32

const (
	BusinessKYCStatus_BKS_UNSPECIFIED BusinessKYCStatus = 0
	BusinessKYCStatus_BKS_NOT_STARTED BusinessKYCStatus = 100
	BusinessKYCStatus_BKS_SUBMITTED   BusinessKYCStatus = 101
	BusinessKYCStatus_BKS_REVIEW      BusinessKYCStatus = 102
	BusinessKYCStatus_BKS_APPROVED    BusinessKYCStatus = 103
	BusinessKYCStatus_BKS_DECLINED    BusinessKYCStatus = 104
)

// Enum value maps for BusinessKYCStatus.
var (
	BusinessKYCStatus_name = map[int32]string{
		0:   "BKS_UNSPECIFIED",
		100: "BKS_NOT_STARTED",
		101: "BKS_SUBMITTED",
		102: "BKS_REVIEW",
		103: "BKS_APPROVED",
		104: "BKS_DECLINED",
	}
	BusinessKYCStatus_value = map[string]int32{
		"BKS_UNSPECIFIED": 0,
		"BKS_NOT_STARTED": 100,
		"BKS_SUBMITTED":   101,
		"BKS_REVIEW":      102,
		"BKS_APPROVED":    103,
		"BKS_DECLINED":    104,
	}
)

func (x BusinessKYCStatus) Enum() *BusinessKYCStatus {
	p := new(BusinessKYCStatus)
	*p = x
	return p
}

func (x BusinessKYCStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessKYCStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_business_proto_enumTypes[0].Descriptor()
}

func (BusinessKYCStatus) Type() protoreflect.EnumType {
	return &file_business_proto_enumTypes[0]
}

func (x BusinessKYCStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessKYCStatus.Descriptor instead.
func (BusinessKYCStatus) EnumDescriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{0}
}

type BusinessStatus int32

const (
	BusinessStatus_BS_UNSPECIFIED BusinessStatus = 0
	BusinessStatus_BS_ACTIVE      BusinessStatus = 100
	BusinessStatus_BS_INACTIVE    BusinessStatus = 101
	BusinessStatus_BS_SUSPENDED   BusinessStatus = 102
	BusinessStatus_BS_CLOSED      BusinessStatus = 103
)

// Enum value maps for BusinessStatus.
var (
	BusinessStatus_name = map[int32]string{
		0:   "BS_UNSPECIFIED",
		100: "BS_ACTIVE",
		101: "BS_INACTIVE",
		102: "BS_SUSPENDED",
		103: "BS_CLOSED",
	}
	BusinessStatus_value = map[string]int32{
		"BS_UNSPECIFIED": 0,
		"BS_ACTIVE":      100,
		"BS_INACTIVE":    101,
		"BS_SUSPENDED":   102,
		"BS_CLOSED":      103,
	}
)

func (x BusinessStatus) Enum() *BusinessStatus {
	p := new(BusinessStatus)
	*p = x
	return p
}

func (x BusinessStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_business_proto_enumTypes[1].Descriptor()
}

func (BusinessStatus) Type() protoreflect.EnumType {
	return &file_business_proto_enumTypes[1]
}

func (x BusinessStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessStatus.Descriptor instead.
func (BusinessStatus) EnumDescriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{1}
}

// BusinessEntityType
//
// Entity type of business
type BusinessEntityType int32

const (
	BusinessEntityType_BET_UNSPECIFIED                    BusinessEntityType = 0
	BusinessEntityType_BET_SOLE_PROPRIETOR                BusinessEntityType = 100
	BusinessEntityType_BET_SOLE_LIMITED_LIABILITY_COMPANY BusinessEntityType = 101
	BusinessEntityType_BET_LIMITED_LIABILITY_COMPANY      BusinessEntityType = 102
	BusinessEntityType_BET_GENERAL_PARTNERSHIP            BusinessEntityType = 103
	BusinessEntityType_BET_LIMITED_PARTNERSHIP            BusinessEntityType = 104
	BusinessEntityType_BET_LIMITED_LIABILITY_PARTNERSHIP  BusinessEntityType = 105
	BusinessEntityType_BET_PROFESSIONAL_ASSOCIATION       BusinessEntityType = 106
	BusinessEntityType_BET_UNLISTED_CORPORATION           BusinessEntityType = 107
	BusinessEntityType_BET_PROFESSIONAL_CORPORATION       BusinessEntityType = 108
	BusinessEntityType_BET_NON_PROFIT_CORPORATION         BusinessEntityType = 109
	BusinessEntityType_BET_PUBLICLY_TRADED_CORPORATION    BusinessEntityType = 110
)

// Enum value maps for BusinessEntityType.
var (
	BusinessEntityType_name = map[int32]string{
		0:   "BET_UNSPECIFIED",
		100: "BET_SOLE_PROPRIETOR",
		101: "BET_SOLE_LIMITED_LIABILITY_COMPANY",
		102: "BET_LIMITED_LIABILITY_COMPANY",
		103: "BET_GENERAL_PARTNERSHIP",
		104: "BET_LIMITED_PARTNERSHIP",
		105: "BET_LIMITED_LIABILITY_PARTNERSHIP",
		106: "BET_PROFESSIONAL_ASSOCIATION",
		107: "BET_UNLISTED_CORPORATION",
		108: "BET_PROFESSIONAL_CORPORATION",
		109: "BET_NON_PROFIT_CORPORATION",
		110: "BET_PUBLICLY_TRADED_CORPORATION",
	}
	BusinessEntityType_value = map[string]int32{
		"BET_UNSPECIFIED":                    0,
		"BET_SOLE_PROPRIETOR":                100,
		"BET_SOLE_LIMITED_LIABILITY_COMPANY": 101,
		"BET_LIMITED_LIABILITY_COMPANY":      102,
		"BET_GENERAL_PARTNERSHIP":            103,
		"BET_LIMITED_PARTNERSHIP":            104,
		"BET_LIMITED_LIABILITY_PARTNERSHIP":  105,
		"BET_PROFESSIONAL_ASSOCIATION":       106,
		"BET_UNLISTED_CORPORATION":           107,
		"BET_PROFESSIONAL_CORPORATION":       108,
		"BET_NON_PROFIT_CORPORATION":         109,
		"BET_PUBLICLY_TRADED_CORPORATION":    110,
	}
)

func (x BusinessEntityType) Enum() *BusinessEntityType {
	p := new(BusinessEntityType)
	*p = x
	return p
}

func (x BusinessEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_business_proto_enumTypes[2].Descriptor()
}

func (BusinessEntityType) Type() protoreflect.EnumType {
	return &file_business_proto_enumTypes[2]
}

func (x BusinessEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessEntityType.Descriptor instead.
func (BusinessEntityType) EnumDescriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{2}
}

type BusinessIndustryType int32

const (
	BusinessIndustryType_BIT_UNSPECIFIED                         BusinessIndustryType = 0
	BusinessIndustryType_BIT_ACCOUNTING_TAX_PREP                 BusinessIndustryType = 100
	BusinessIndustryType_BIT_ANIMAL_FARMING_PRODUCTION           BusinessIndustryType = 101
	BusinessIndustryType_BIT_ART_PHOTOGRAPHY                     BusinessIndustryType = 102
	BusinessIndustryType_BIT_AUTO_DEALERS                        BusinessIndustryType = 103
	BusinessIndustryType_BIT_BANK_FINANCIAL_INSTITUTION          BusinessIndustryType = 104
	BusinessIndustryType_BIT_BEAUTY_OR_BARBER_SHOPS              BusinessIndustryType = 105
	BusinessIndustryType_BIT_BEER_WINE_LIQUOR_STORES             BusinessIndustryType = 106
	BusinessIndustryType_BIT_BUILDING_MATERIALS_HARDWARE         BusinessIndustryType = 107
	BusinessIndustryType_BIT_CAR_WASH                            BusinessIndustryType = 108
	BusinessIndustryType_BIT_CASINO_GAMBLING_GAMING              BusinessIndustryType = 109
	BusinessIndustryType_BIT_CASINO_HOTEL                        BusinessIndustryType = 110
	BusinessIndustryType_BIT_CHECK_CASHER                        BusinessIndustryType = 111
	BusinessIndustryType_BIT_CIGARETTE_MANUFACTURING             BusinessIndustryType = 112
	BusinessIndustryType_BIT_COLLECTION_AGENCIES                 BusinessIndustryType = 113
	BusinessIndustryType_BIT_COLLEGES_UNIVERSITIES_SCHOOLS       BusinessIndustryType = 114
	BusinessIndustryType_BIT_COMPUTER_SERVICE_REPAIR             BusinessIndustryType = 115
	BusinessIndustryType_BIT_CONSTRUCTION                        BusinessIndustryType = 116
	BusinessIndustryType_BIT_CONSULATE_EMBASSY                   BusinessIndustryType = 117
	BusinessIndustryType_BIT_CROP_FARMING                        BusinessIndustryType = 118
	BusinessIndustryType_BIT_CURRENCY_EXCHANGERS                 BusinessIndustryType = 119
	BusinessIndustryType_BIT_EMPLOYMENT_SERVICES                 BusinessIndustryType = 120
	BusinessIndustryType_BIT_FINANCIAL_INVESTMENTS               BusinessIndustryType = 121
	BusinessIndustryType_BIT_FISHING_HUNTING_TRAPPING            BusinessIndustryType = 122
	BusinessIndustryType_BIT_FITNESS_SPORTS_CENTERS              BusinessIndustryType = 123
	BusinessIndustryType_BIT_FORESTRY_ACTIVITIES                 BusinessIndustryType = 124
	BusinessIndustryType_BIT_FREELANCE_PROFESSIONAL              BusinessIndustryType = 125
	BusinessIndustryType_BIT_FUNDS_TRUSTS_OTHER                  BusinessIndustryType = 126
	BusinessIndustryType_BIT_GASOLINE_SERVICE_STATION            BusinessIndustryType = 127
	BusinessIndustryType_BIT_GOVERNMENT_AGENCY                   BusinessIndustryType = 128
	BusinessIndustryType_BIT_HEALTH_SERVICES                     BusinessIndustryType = 129
	BusinessIndustryType_BIT_HOME_FURNISHING                     BusinessIndustryType = 130
	BusinessIndustryType_BIT_HOSPITALS                           BusinessIndustryType = 131
	BusinessIndustryType_BIT_HOTEL_MOTEL                         BusinessIndustryType = 132
	BusinessIndustryType_BIT_INDUSTRIAL_COMMERCIAL_MACHINERY     BusinessIndustryType = 133
	BusinessIndustryType_BIT_INSURANCE                           BusinessIndustryType = 134
	BusinessIndustryType_BIT_LANDSCAPE_SERVICES                  BusinessIndustryType = 135
	BusinessIndustryType_BIT_LEGAL_SERVICES                      BusinessIndustryType = 136
	BusinessIndustryType_BIT_MASSAGE_TANNING_SERVICES            BusinessIndustryType = 137
	BusinessIndustryType_BIT_MONEY_TRANSFER_REMITTANCE           BusinessIndustryType = 138
	BusinessIndustryType_BIT_MUSEUMS_HISTORICAL_SITES            BusinessIndustryType = 139
	BusinessIndustryType_BIT_NON_GOVERNMENT_ORGANIZATION         BusinessIndustryType = 140
	BusinessIndustryType_BIT_ONLINE_RETAILER                     BusinessIndustryType = 141
	BusinessIndustryType_BIT_OTHER_ACCOMODATIONS                 BusinessIndustryType = 142
	BusinessIndustryType_BIT_OTHER_AGRICULTURE_FORESTRY_FISHING  BusinessIndustryType = 143
	BusinessIndustryType_BIT_OTHER_ARTS_ENTERTAINMENT_RECREATION BusinessIndustryType = 144
	BusinessIndustryType_BIT_OTHER_EDUCATION_SERVICES            BusinessIndustryType = 145
	BusinessIndustryType_BIT_OTHER_FOOD_SERVICES                 BusinessIndustryType = 146
	BusinessIndustryType_BIT_OTHER_HEALTH_FITNESS                BusinessIndustryType = 147
	BusinessIndustryType_BIT_OTHER_MANUFACTURING                 BusinessIndustryType = 148
	BusinessIndustryType_BIT_OTHER_PROFESSIONAL_SERVICES         BusinessIndustryType = 149
	BusinessIndustryType_BIT_OTHER_TRADE_CONTRACTOR              BusinessIndustryType = 150
	BusinessIndustryType_BIT_OTHER_TRANSPORT_SERVICES            BusinessIndustryType = 151
	BusinessIndustryType_BIT_OTHER_TRAVEL_SERVICES               BusinessIndustryType = 152
	BusinessIndustryType_BIT_PARKING_GARAGES                     BusinessIndustryType = 153
	BusinessIndustryType_BIT_PAWN_SHOP                           BusinessIndustryType = 154
	BusinessIndustryType_BIT_PLUMBING_HVAC                       BusinessIndustryType = 155
	BusinessIndustryType_BIT_PRIVATE_ATM                         BusinessIndustryType = 156
	BusinessIndustryType_BIT_PRIVATE_INVESTMENT_COMPANIES        BusinessIndustryType = 157
	BusinessIndustryType_BIT_RACE_TRACK                          BusinessIndustryType = 158
	BusinessIndustryType_BIT_REAL_ESTATE                         BusinessIndustryType = 159
	BusinessIndustryType_BIT_RELIGIOUS_ORGANIZATION              BusinessIndustryType = 160
	BusinessIndustryType_BIT_RESTAURANTS                         BusinessIndustryType = 161
	BusinessIndustryType_BIT_RESTAURANTS_WITH_CASH               BusinessIndustryType = 162
	BusinessIndustryType_BIT_RETAIL                              BusinessIndustryType = 163
	BusinessIndustryType_BIT_RETAIL_WITH_CASH                    BusinessIndustryType = 164
	BusinessIndustryType_BIT_RETAIL_JEWELER_DIAMONDS_GEMS_GOLD   BusinessIndustryType = 165
	BusinessIndustryType_BIT_SPORTS_TEAMS_CLUBS                  BusinessIndustryType = 166
	BusinessIndustryType_BIT_TAXI                                BusinessIndustryType = 167
	BusinessIndustryType_BIT_TOUR_OPERATOR                       BusinessIndustryType = 168
	BusinessIndustryType_BIT_TRAVEL_AGENCY                       BusinessIndustryType = 169
	BusinessIndustryType_BIT_TRUCKING_SHIPPING                   BusinessIndustryType = 170
	BusinessIndustryType_BIT_UNIONS                              BusinessIndustryType = 171
	BusinessIndustryType_BIT_USED_CLOTHES_DEALERS                BusinessIndustryType = 172
	BusinessIndustryType_BIT_WAREHOUSE_DISTRIBUTION              BusinessIndustryType = 173
	BusinessIndustryType_BIT_WHOLESALE                           BusinessIndustryType = 174
	BusinessIndustryType_BIT_WHOLESALE_JEWELER                   BusinessIndustryType = 175
)

// Enum value maps for BusinessIndustryType.
var (
	BusinessIndustryType_name = map[int32]string{
		0:   "BIT_UNSPECIFIED",
		100: "BIT_ACCOUNTING_TAX_PREP",
		101: "BIT_ANIMAL_FARMING_PRODUCTION",
		102: "BIT_ART_PHOTOGRAPHY",
		103: "BIT_AUTO_DEALERS",
		104: "BIT_BANK_FINANCIAL_INSTITUTION",
		105: "BIT_BEAUTY_OR_BARBER_SHOPS",
		106: "BIT_BEER_WINE_LIQUOR_STORES",
		107: "BIT_BUILDING_MATERIALS_HARDWARE",
		108: "BIT_CAR_WASH",
		109: "BIT_CASINO_GAMBLING_GAMING",
		110: "BIT_CASINO_HOTEL",
		111: "BIT_CHECK_CASHER",
		112: "BIT_CIGARETTE_MANUFACTURING",
		113: "BIT_COLLECTION_AGENCIES",
		114: "BIT_COLLEGES_UNIVERSITIES_SCHOOLS",
		115: "BIT_COMPUTER_SERVICE_REPAIR",
		116: "BIT_CONSTRUCTION",
		117: "BIT_CONSULATE_EMBASSY",
		118: "BIT_CROP_FARMING",
		119: "BIT_CURRENCY_EXCHANGERS",
		120: "BIT_EMPLOYMENT_SERVICES",
		121: "BIT_FINANCIAL_INVESTMENTS",
		122: "BIT_FISHING_HUNTING_TRAPPING",
		123: "BIT_FITNESS_SPORTS_CENTERS",
		124: "BIT_FORESTRY_ACTIVITIES",
		125: "BIT_FREELANCE_PROFESSIONAL",
		126: "BIT_FUNDS_TRUSTS_OTHER",
		127: "BIT_GASOLINE_SERVICE_STATION",
		128: "BIT_GOVERNMENT_AGENCY",
		129: "BIT_HEALTH_SERVICES",
		130: "BIT_HOME_FURNISHING",
		131: "BIT_HOSPITALS",
		132: "BIT_HOTEL_MOTEL",
		133: "BIT_INDUSTRIAL_COMMERCIAL_MACHINERY",
		134: "BIT_INSURANCE",
		135: "BIT_LANDSCAPE_SERVICES",
		136: "BIT_LEGAL_SERVICES",
		137: "BIT_MASSAGE_TANNING_SERVICES",
		138: "BIT_MONEY_TRANSFER_REMITTANCE",
		139: "BIT_MUSEUMS_HISTORICAL_SITES",
		140: "BIT_NON_GOVERNMENT_ORGANIZATION",
		141: "BIT_ONLINE_RETAILER",
		142: "BIT_OTHER_ACCOMODATIONS",
		143: "BIT_OTHER_AGRICULTURE_FORESTRY_FISHING",
		144: "BIT_OTHER_ARTS_ENTERTAINMENT_RECREATION",
		145: "BIT_OTHER_EDUCATION_SERVICES",
		146: "BIT_OTHER_FOOD_SERVICES",
		147: "BIT_OTHER_HEALTH_FITNESS",
		148: "BIT_OTHER_MANUFACTURING",
		149: "BIT_OTHER_PROFESSIONAL_SERVICES",
		150: "BIT_OTHER_TRADE_CONTRACTOR",
		151: "BIT_OTHER_TRANSPORT_SERVICES",
		152: "BIT_OTHER_TRAVEL_SERVICES",
		153: "BIT_PARKING_GARAGES",
		154: "BIT_PAWN_SHOP",
		155: "BIT_PLUMBING_HVAC",
		156: "BIT_PRIVATE_ATM",
		157: "BIT_PRIVATE_INVESTMENT_COMPANIES",
		158: "BIT_RACE_TRACK",
		159: "BIT_REAL_ESTATE",
		160: "BIT_RELIGIOUS_ORGANIZATION",
		161: "BIT_RESTAURANTS",
		162: "BIT_RESTAURANTS_WITH_CASH",
		163: "BIT_RETAIL",
		164: "BIT_RETAIL_WITH_CASH",
		165: "BIT_RETAIL_JEWELER_DIAMONDS_GEMS_GOLD",
		166: "BIT_SPORTS_TEAMS_CLUBS",
		167: "BIT_TAXI",
		168: "BIT_TOUR_OPERATOR",
		169: "BIT_TRAVEL_AGENCY",
		170: "BIT_TRUCKING_SHIPPING",
		171: "BIT_UNIONS",
		172: "BIT_USED_CLOTHES_DEALERS",
		173: "BIT_WAREHOUSE_DISTRIBUTION",
		174: "BIT_WHOLESALE",
		175: "BIT_WHOLESALE_JEWELER",
	}
	BusinessIndustryType_value = map[string]int32{
		"BIT_UNSPECIFIED":                         0,
		"BIT_ACCOUNTING_TAX_PREP":                 100,
		"BIT_ANIMAL_FARMING_PRODUCTION":           101,
		"BIT_ART_PHOTOGRAPHY":                     102,
		"BIT_AUTO_DEALERS":                        103,
		"BIT_BANK_FINANCIAL_INSTITUTION":          104,
		"BIT_BEAUTY_OR_BARBER_SHOPS":              105,
		"BIT_BEER_WINE_LIQUOR_STORES":             106,
		"BIT_BUILDING_MATERIALS_HARDWARE":         107,
		"BIT_CAR_WASH":                            108,
		"BIT_CASINO_GAMBLING_GAMING":              109,
		"BIT_CASINO_HOTEL":                        110,
		"BIT_CHECK_CASHER":                        111,
		"BIT_CIGARETTE_MANUFACTURING":             112,
		"BIT_COLLECTION_AGENCIES":                 113,
		"BIT_COLLEGES_UNIVERSITIES_SCHOOLS":       114,
		"BIT_COMPUTER_SERVICE_REPAIR":             115,
		"BIT_CONSTRUCTION":                        116,
		"BIT_CONSULATE_EMBASSY":                   117,
		"BIT_CROP_FARMING":                        118,
		"BIT_CURRENCY_EXCHANGERS":                 119,
		"BIT_EMPLOYMENT_SERVICES":                 120,
		"BIT_FINANCIAL_INVESTMENTS":               121,
		"BIT_FISHING_HUNTING_TRAPPING":            122,
		"BIT_FITNESS_SPORTS_CENTERS":              123,
		"BIT_FORESTRY_ACTIVITIES":                 124,
		"BIT_FREELANCE_PROFESSIONAL":              125,
		"BIT_FUNDS_TRUSTS_OTHER":                  126,
		"BIT_GASOLINE_SERVICE_STATION":            127,
		"BIT_GOVERNMENT_AGENCY":                   128,
		"BIT_HEALTH_SERVICES":                     129,
		"BIT_HOME_FURNISHING":                     130,
		"BIT_HOSPITALS":                           131,
		"BIT_HOTEL_MOTEL":                         132,
		"BIT_INDUSTRIAL_COMMERCIAL_MACHINERY":     133,
		"BIT_INSURANCE":                           134,
		"BIT_LANDSCAPE_SERVICES":                  135,
		"BIT_LEGAL_SERVICES":                      136,
		"BIT_MASSAGE_TANNING_SERVICES":            137,
		"BIT_MONEY_TRANSFER_REMITTANCE":           138,
		"BIT_MUSEUMS_HISTORICAL_SITES":            139,
		"BIT_NON_GOVERNMENT_ORGANIZATION":         140,
		"BIT_ONLINE_RETAILER":                     141,
		"BIT_OTHER_ACCOMODATIONS":                 142,
		"BIT_OTHER_AGRICULTURE_FORESTRY_FISHING":  143,
		"BIT_OTHER_ARTS_ENTERTAINMENT_RECREATION": 144,
		"BIT_OTHER_EDUCATION_SERVICES":            145,
		"BIT_OTHER_FOOD_SERVICES":                 146,
		"BIT_OTHER_HEALTH_FITNESS":                147,
		"BIT_OTHER_MANUFACTURING":                 148,
		"BIT_OTHER_PROFESSIONAL_SERVICES":         149,
		"BIT_OTHER_TRADE_CONTRACTOR":              150,
		"BIT_OTHER_TRANSPORT_SERVICES":            151,
		"BIT_OTHER_TRAVEL_SERVICES":               152,
		"BIT_PARKING_GARAGES":                     153,
		"BIT_PAWN_SHOP":                           154,
		"BIT_PLUMBING_HVAC":                       155,
		"BIT_PRIVATE_ATM":                         156,
		"BIT_PRIVATE_INVESTMENT_COMPANIES":        157,
		"BIT_RACE_TRACK":                          158,
		"BIT_REAL_ESTATE":                         159,
		"BIT_RELIGIOUS_ORGANIZATION":              160,
		"BIT_RESTAURANTS":                         161,
		"BIT_RESTAURANTS_WITH_CASH":               162,
		"BIT_RETAIL":                              163,
		"BIT_RETAIL_WITH_CASH":                    164,
		"BIT_RETAIL_JEWELER_DIAMONDS_GEMS_GOLD":   165,
		"BIT_SPORTS_TEAMS_CLUBS":                  166,
		"BIT_TAXI":                                167,
		"BIT_TOUR_OPERATOR":                       168,
		"BIT_TRAVEL_AGENCY":                       169,
		"BIT_TRUCKING_SHIPPING":                   170,
		"BIT_UNIONS":                              171,
		"BIT_USED_CLOTHES_DEALERS":                172,
		"BIT_WAREHOUSE_DISTRIBUTION":              173,
		"BIT_WHOLESALE":                           174,
		"BIT_WHOLESALE_JEWELER":                   175,
	}
)

func (x BusinessIndustryType) Enum() *BusinessIndustryType {
	p := new(BusinessIndustryType)
	*p = x
	return p
}

func (x BusinessIndustryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessIndustryType) Descriptor() protoreflect.EnumDescriptor {
	return file_business_proto_enumTypes[3].Descriptor()
}

func (BusinessIndustryType) Type() protoreflect.EnumType {
	return &file_business_proto_enumTypes[3]
}

func (x BusinessIndustryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessIndustryType.Descriptor instead.
func (BusinessIndustryType) EnumDescriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{3}
}

type BusinessTaxIDType int32

const (
	BusinessTaxIDType_BTIDT_UNSPECIFIED BusinessTaxIDType = 0
	BusinessTaxIDType_BTIDT_SSN         BusinessTaxIDType = 100
	BusinessTaxIDType_BTIDT_EIN         BusinessTaxIDType = 101
)

// Enum value maps for BusinessTaxIDType.
var (
	BusinessTaxIDType_name = map[int32]string{
		0:   "BTIDT_UNSPECIFIED",
		100: "BTIDT_SSN",
		101: "BTIDT_EIN",
	}
	BusinessTaxIDType_value = map[string]int32{
		"BTIDT_UNSPECIFIED": 0,
		"BTIDT_SSN":         100,
		"BTIDT_EIN":         101,
	}
)

func (x BusinessTaxIDType) Enum() *BusinessTaxIDType {
	p := new(BusinessTaxIDType)
	*p = x
	return p
}

func (x BusinessTaxIDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessTaxIDType) Descriptor() protoreflect.EnumDescriptor {
	return file_business_proto_enumTypes[4].Descriptor()
}

func (BusinessTaxIDType) Type() protoreflect.EnumType {
	return &file_business_proto_enumTypes[4]
}

func (x BusinessTaxIDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessTaxIDType.Descriptor instead.
func (BusinessTaxIDType) EnumDescriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{4}
}

type BusinessOperationType int32

const (
	BusinessOperationType_BOT_UNSPECIFIED        BusinessOperationType = 0
	BusinessOperationType_BOT_LOCAL              BusinessOperationType = 100
	BusinessOperationType_BOT_FOREIGN_WITH_LOCAL BusinessOperationType = 101
	BusinessOperationType_BOT_FOREIGN            BusinessOperationType = 102
)

// Enum value maps for BusinessOperationType.
var (
	BusinessOperationType_name = map[int32]string{
		0:   "BOT_UNSPECIFIED",
		100: "BOT_LOCAL",
		101: "BOT_FOREIGN_WITH_LOCAL",
		102: "BOT_FOREIGN",
	}
	BusinessOperationType_value = map[string]int32{
		"BOT_UNSPECIFIED":        0,
		"BOT_LOCAL":              100,
		"BOT_FOREIGN_WITH_LOCAL": 101,
		"BOT_FOREIGN":            102,
	}
)

func (x BusinessOperationType) Enum() *BusinessOperationType {
	p := new(BusinessOperationType)
	*p = x
	return p
}

func (x BusinessOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_business_proto_enumTypes[5].Descriptor()
}

func (BusinessOperationType) Type() protoreflect.EnumType {
	return &file_business_proto_enumTypes[5]
}

func (x BusinessOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessOperationType.Descriptor instead.
func (BusinessOperationType) EnumDescriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{5}
}

var File_business_proto protoreflect.FileDescriptor

var file_business_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2a,
	0x84, 0x01, 0x0a, 0x11, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4b, 0x59, 0x43, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4b, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4b,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x64, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x4b, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44,
	0x10, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x10, 0x66, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4b, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0x67, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4b, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4c,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x68, 0x2a, 0x65, 0x0a, 0x0e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x42, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x66, 0x12, 0x0d,
	0x0a, 0x09, 0x42, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x67, 0x2a, 0x95, 0x03,
	0x0a, 0x12, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x45, 0x54,
	0x5f, 0x53, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x52, 0x49, 0x45, 0x54, 0x4f, 0x52,
	0x10, 0x64, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x4c, 0x45, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x45,
	0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10, 0x66, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x45, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x10, 0x67, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x45,
	0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45,
	0x52, 0x53, 0x48, 0x49, 0x50, 0x10, 0x68, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x45, 0x54, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x10, 0x69, 0x12, 0x20,
	0x0a, 0x1c, 0x42, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6a,
	0x12, 0x1c, 0x0a, 0x18, 0x42, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44,
	0x5f, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6b, 0x12, 0x20,
	0x0a, 0x1c, 0x42, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6c,
	0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6d,
	0x12, 0x23, 0x0a, 0x1f, 0x42, 0x45, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x4c, 0x59,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x6e, 0x2a, 0xd4, 0x11, 0x0a, 0x14, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x10, 0x64,
	0x12, 0x21, 0x0a, 0x1d, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x46,
	0x41, 0x52, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x52, 0x54, 0x5f, 0x50,
	0x48, 0x4f, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x59, 0x10, 0x66, 0x12, 0x14, 0x0a, 0x10,
	0x42, 0x49, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x53,
	0x10, 0x67, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x49, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x46,
	0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x49, 0x54, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x68, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x49, 0x54, 0x5f, 0x42, 0x45,
	0x41, 0x55, 0x54, 0x59, 0x5f, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x52, 0x42, 0x45, 0x52, 0x5f, 0x53,
	0x48, 0x4f, 0x50, 0x53, 0x10, 0x69, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x49, 0x54, 0x5f, 0x42, 0x45,
	0x45, 0x52, 0x5f, 0x57, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x4f, 0x52, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x53, 0x10, 0x6a, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x49, 0x54, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c,
	0x53, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x10, 0x6b, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x5f, 0x57, 0x41, 0x53, 0x48, 0x10, 0x6c, 0x12, 0x1e,
	0x0a, 0x1a, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x53, 0x49, 0x4e, 0x4f, 0x5f, 0x47, 0x41, 0x4d,
	0x42, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x6d, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x53, 0x49, 0x4e, 0x4f, 0x5f, 0x48, 0x4f, 0x54,
	0x45, 0x4c, 0x10, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x45, 0x52, 0x10, 0x6f, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x49,
	0x54, 0x5f, 0x43, 0x49, 0x47, 0x41, 0x52, 0x45, 0x54, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x46, 0x41, 0x43, 0x54, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x70, 0x12, 0x1b, 0x0a, 0x17, 0x42,
	0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x43, 0x49, 0x45, 0x53, 0x10, 0x71, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x49, 0x54, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x47, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x53, 0x10, 0x72, 0x12,
	0x1f, 0x0a, 0x1b, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x10, 0x73,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4d, 0x42, 0x41, 0x53, 0x53, 0x59, 0x10,
	0x75, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x50, 0x5f, 0x46, 0x41,
	0x52, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x76, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x49, 0x54, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x52, 0x53, 0x10, 0x77, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x49, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x4c,
	0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10,
	0x78, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x49, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49,
	0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x79,
	0x12, 0x20, 0x0a, 0x1c, 0x42, 0x49, 0x54, 0x5f, 0x46, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x5f,
	0x48, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x7a, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x49, 0x54, 0x5f, 0x46, 0x49, 0x54, 0x4e, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x53,
	0x10, 0x7b, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x7c, 0x12,
	0x1e, 0x0a, 0x1a, 0x42, 0x49, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x4c, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x7d, 0x12,
	0x1a, 0x0a, 0x16, 0x42, 0x49, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x54, 0x52, 0x55,
	0x53, 0x54, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x7e, 0x12, 0x20, 0x0a, 0x1c, 0x42,
	0x49, 0x54, 0x5f, 0x47, 0x41, 0x53, 0x4f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x7f, 0x12, 0x1a, 0x0a,
	0x15, 0x42, 0x49, 0x54, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x80, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x49, 0x54,
	0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53,
	0x10, 0x81, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x49, 0x54, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f,
	0x46, 0x55, 0x52, 0x4e, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x82, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x42, 0x49, 0x54, 0x5f, 0x48, 0x4f, 0x53, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x53, 0x10, 0x83,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x42, 0x49, 0x54, 0x5f, 0x48, 0x4f, 0x54, 0x45, 0x4c, 0x5f, 0x4d,
	0x4f, 0x54, 0x45, 0x4c, 0x10, 0x84, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x42, 0x49, 0x54, 0x5f, 0x49,
	0x4e, 0x44, 0x55, 0x53, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x52,
	0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x52, 0x59, 0x10, 0x85,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x42, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x86, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x42, 0x49, 0x54, 0x5f, 0x4c, 0x41, 0x4e,
	0x44, 0x53, 0x43, 0x41, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10,
	0x87, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x49, 0x54, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x88, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x42,
	0x49, 0x54, 0x5f, 0x4d, 0x41, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x89, 0x01, 0x12, 0x22,
	0x0a, 0x1d, 0x42, 0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x8a, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x42, 0x49, 0x54, 0x5f, 0x4d, 0x55, 0x53, 0x45, 0x55, 0x4d,
	0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x54,
	0x45, 0x53, 0x10, 0x8b, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x42, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x4e,
	0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x47, 0x41,
	0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8c, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x42,
	0x49, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x45, 0x52, 0x10, 0x8d, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x8e, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x41, 0x47, 0x52, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x45, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x8f, 0x01,
	0x12, 0x2c, 0x0a, 0x27, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x41, 0x52,
	0x54, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x90, 0x01, 0x12, 0x21,
	0x0a, 0x1c, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x55, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x91,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x46,
	0x4f, 0x4f, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x92, 0x01, 0x12,
	0x1d, 0x0a, 0x18, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x5f, 0x46, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x93, 0x01, 0x12, 0x1c,
	0x0a, 0x17, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x46, 0x41, 0x43, 0x54, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x94, 0x01, 0x12, 0x24, 0x0a, 0x1f,
	0x42, 0x49, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10,
	0x95, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x10, 0x96, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x53, 0x10, 0x97, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x53, 0x10, 0x98, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x49, 0x54, 0x5f, 0x50, 0x41,
	0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x52, 0x41, 0x47, 0x45, 0x53, 0x10, 0x99, 0x01,
	0x12, 0x12, 0x0a, 0x0d, 0x42, 0x49, 0x54, 0x5f, 0x50, 0x41, 0x57, 0x4e, 0x5f, 0x53, 0x48, 0x4f,
	0x50, 0x10, 0x9a, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x49, 0x54, 0x5f, 0x50, 0x4c, 0x55, 0x4d,
	0x42, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x56, 0x41, 0x43, 0x10, 0x9b, 0x01, 0x12, 0x14, 0x0a, 0x0f,
	0x42, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x54, 0x4d, 0x10,
	0x9c, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x42, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x4e, 0x49, 0x45, 0x53, 0x10, 0x9d, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x42, 0x49, 0x54,
	0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x9e, 0x01, 0x12, 0x14,
	0x0a, 0x0f, 0x42, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x9f, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x42, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x49,
	0x47, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xa0, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x42, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x41, 0x55, 0x52, 0x41, 0x4e, 0x54, 0x53, 0x10, 0xa1, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x42,
	0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x55, 0x52, 0x41, 0x4e, 0x54, 0x53, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x10, 0xa2, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x42,
	0x49, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0xa3, 0x01, 0x12, 0x19, 0x0a, 0x14,
	0x42, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x43, 0x41, 0x53, 0x48, 0x10, 0xa4, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x42, 0x49, 0x54, 0x5f, 0x52,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x4a, 0x45, 0x57, 0x45, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x49,
	0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x53, 0x5f, 0x47, 0x45, 0x4d, 0x53, 0x5f, 0x47, 0x4f, 0x4c, 0x44,
	0x10, 0xa5, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x53, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x53, 0x10, 0xa6, 0x01,
	0x12, 0x0d, 0x0a, 0x08, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x58, 0x49, 0x10, 0xa7, 0x01, 0x12,
	0x16, 0x0a, 0x11, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0xa8, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x49, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0xa9, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x55, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x48, 0x49, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0xaa, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x42,
	0x49, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xab, 0x01, 0x12, 0x1d, 0x0a, 0x18,
	0x42, 0x49, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53,
	0x5f, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x53, 0x10, 0xac, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x42,
	0x49, 0x54, 0x5f, 0x57, 0x41, 0x52, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xad, 0x01, 0x12, 0x12, 0x0a, 0x0d,
	0x42, 0x49, 0x54, 0x5f, 0x57, 0x48, 0x4f, 0x4c, 0x45, 0x53, 0x41, 0x4c, 0x45, 0x10, 0xae, 0x01,
	0x12, 0x1a, 0x0a, 0x15, 0x42, 0x49, 0x54, 0x5f, 0x57, 0x48, 0x4f, 0x4c, 0x45, 0x53, 0x41, 0x4c,
	0x45, 0x5f, 0x4a, 0x45, 0x57, 0x45, 0x4c, 0x45, 0x52, 0x10, 0xaf, 0x01, 0x2a, 0x48, 0x0a, 0x11,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x61, 0x78, 0x49, 0x44, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x54, 0x49, 0x44, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x54, 0x49, 0x44,
	0x54, 0x5f, 0x53, 0x53, 0x4e, 0x10, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x54, 0x49, 0x44, 0x54,
	0x5f, 0x45, 0x49, 0x4e, 0x10, 0x65, 0x2a, 0x68, 0x0a, 0x15, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x10, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49,
	0x47, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x10, 0x66,
	0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_business_proto_rawDescOnce sync.Once
	file_business_proto_rawDescData = file_business_proto_rawDesc
)

func file_business_proto_rawDescGZIP() []byte {
	file_business_proto_rawDescOnce.Do(func() {
		file_business_proto_rawDescData = protoimpl.X.CompressGZIP(file_business_proto_rawDescData)
	})
	return file_business_proto_rawDescData
}

var file_business_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_business_proto_goTypes = []interface{}{
	(BusinessKYCStatus)(0),     // 0: wise.protobuf.BusinessKYCStatus
	(BusinessStatus)(0),        // 1: wise.protobuf.BusinessStatus
	(BusinessEntityType)(0),    // 2: wise.protobuf.BusinessEntityType
	(BusinessIndustryType)(0),  // 3: wise.protobuf.BusinessIndustryType
	(BusinessTaxIDType)(0),     // 4: wise.protobuf.BusinessTaxIDType
	(BusinessOperationType)(0), // 5: wise.protobuf.BusinessOperationType
}
var file_business_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_business_proto_init() }
func file_business_proto_init() {
	if File_business_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_business_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_business_proto_goTypes,
		DependencyIndexes: file_business_proto_depIdxs,
		EnumInfos:         file_business_proto_enumTypes,
	}.Build()
	File_business_proto = out.File
	file_business_proto_rawDesc = nil
	file_business_proto_goTypes = nil
	file_business_proto_depIdxs = nil
}
