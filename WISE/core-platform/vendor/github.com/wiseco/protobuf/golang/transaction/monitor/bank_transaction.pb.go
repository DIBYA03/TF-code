// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: transaction/monitor/bank_transaction.proto

package monitor

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	banking "github.com/wiseco/protobuf/golang/banking"
	transaction "github.com/wiseco/protobuf/golang/transaction"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BankTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BusinessId             string                              `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ConsumerId             string                              `protobuf:"bytes,3,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	ContactId              string                              `protobuf:"bytes,4,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	BankTransferId         string                              `protobuf:"bytes,5,opt,name=bank_transfer_id,json=bankTransferId,proto3" json:"bank_transfer_id,omitempty"`
	PaymentRequestId       string                              `protobuf:"bytes,6,opt,name=payment_request_id,json=paymentRequestId,proto3" json:"payment_request_id,omitempty"`
	SourceAccountId        string                              `protobuf:"bytes,7,opt,name=source_account_id,json=sourceAccountId,proto3" json:"source_account_id,omitempty"`
	DestAccountId          string                              `protobuf:"bytes,8,opt,name=dest_account_id,json=destAccountId,proto3" json:"dest_account_id,omitempty"`
	DebitCardId            string                              `protobuf:"bytes,9,opt,name=debit_card_id,json=debitCardId,proto3" json:"debit_card_id,omitempty"`
	DebitCardLast_4        string                              `protobuf:"bytes,10,opt,name=debit_card_last_4,json=debitCardLast4,proto3" json:"debit_card_last_4,omitempty"`
	DebitCardHolderId      string                              `protobuf:"bytes,11,opt,name=debit_card_holder_id,json=debitCardHolderId,proto3" json:"debit_card_holder_id,omitempty"`
	BankName               string                              `protobuf:"bytes,12,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	PartnerName            banking.PartnerName                 `protobuf:"varint,13,opt,name=partner_name,json=partnerName,proto3,enum=wise.protobuf.banking.PartnerName" json:"partner_name,omitempty"`
	PartnerTransactionId   string                              `protobuf:"bytes,14,opt,name=partner_transaction_id,json=partnerTransactionId,proto3" json:"partner_transaction_id,omitempty"`
	PartnerTransactionDesc string                              `protobuf:"bytes,15,opt,name=partner_transaction_desc,json=partnerTransactionDesc,proto3" json:"partner_transaction_desc,omitempty"`
	CardPostedDedupeId     string                              `protobuf:"bytes,16,opt,name=card_posted_dedupe_id,json=cardPostedDedupeId,proto3" json:"card_posted_dedupe_id,omitempty"`
	Status                 transaction.BankTransactionStatus   `protobuf:"varint,17,opt,name=status,proto3,enum=wise.protobuf.transaction.BankTransactionStatus" json:"status,omitempty"`
	Category               transaction.BankTransactionCategory `protobuf:"varint,18,opt,name=category,proto3,enum=wise.protobuf.transaction.BankTransactionCategory" json:"category,omitempty"`
	Type                   transaction.BankTransactionType     `protobuf:"varint,19,opt,name=type,proto3,enum=wise.protobuf.transaction.BankTransactionType" json:"type,omitempty"`
	Amount                 string                              `protobuf:"bytes,20,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency               string                              `protobuf:"bytes,21,opt,name=currency,proto3" json:"currency,omitempty"`
	TransactionDate        *timestamp.Timestamp                `protobuf:"bytes,22,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	TransferProvider       string                              `protobuf:"bytes,23,opt,name=transfer_provider,json=transferProvider,proto3" json:"transfer_provider,omitempty"`
	CounterpartyName       string                              `protobuf:"bytes,24,opt,name=counterparty_name,json=counterpartyName,proto3" json:"counterparty_name,omitempty"`
	TransactionDesc        string                              `protobuf:"bytes,25,opt,name=transaction_desc,json=transactionDesc,proto3" json:"transaction_desc,omitempty"`
	Created                *timestamp.Timestamp                `protobuf:"bytes,26,opt,name=created,proto3" json:"created,omitempty"`
	Modified               *timestamp.Timestamp                `protobuf:"bytes,27,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *BankTransactionRequest) Reset() {
	*x = BankTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_monitor_bank_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankTransactionRequest) ProtoMessage() {}

func (x *BankTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_monitor_bank_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankTransactionRequest.ProtoReflect.Descriptor instead.
func (*BankTransactionRequest) Descriptor() ([]byte, []int) {
	return file_transaction_monitor_bank_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *BankTransactionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BankTransactionRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *BankTransactionRequest) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *BankTransactionRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *BankTransactionRequest) GetBankTransferId() string {
	if x != nil {
		return x.BankTransferId
	}
	return ""
}

func (x *BankTransactionRequest) GetPaymentRequestId() string {
	if x != nil {
		return x.PaymentRequestId
	}
	return ""
}

func (x *BankTransactionRequest) GetSourceAccountId() string {
	if x != nil {
		return x.SourceAccountId
	}
	return ""
}

func (x *BankTransactionRequest) GetDestAccountId() string {
	if x != nil {
		return x.DestAccountId
	}
	return ""
}

func (x *BankTransactionRequest) GetDebitCardId() string {
	if x != nil {
		return x.DebitCardId
	}
	return ""
}

func (x *BankTransactionRequest) GetDebitCardLast_4() string {
	if x != nil {
		return x.DebitCardLast_4
	}
	return ""
}

func (x *BankTransactionRequest) GetDebitCardHolderId() string {
	if x != nil {
		return x.DebitCardHolderId
	}
	return ""
}

func (x *BankTransactionRequest) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *BankTransactionRequest) GetPartnerName() banking.PartnerName {
	if x != nil {
		return x.PartnerName
	}
	return banking.PartnerName_PN_UNSPECIFIED
}

func (x *BankTransactionRequest) GetPartnerTransactionId() string {
	if x != nil {
		return x.PartnerTransactionId
	}
	return ""
}

func (x *BankTransactionRequest) GetPartnerTransactionDesc() string {
	if x != nil {
		return x.PartnerTransactionDesc
	}
	return ""
}

func (x *BankTransactionRequest) GetCardPostedDedupeId() string {
	if x != nil {
		return x.CardPostedDedupeId
	}
	return ""
}

func (x *BankTransactionRequest) GetStatus() transaction.BankTransactionStatus {
	if x != nil {
		return x.Status
	}
	return transaction.BankTransactionStatus_BTS_UNSPECIFIED
}

func (x *BankTransactionRequest) GetCategory() transaction.BankTransactionCategory {
	if x != nil {
		return x.Category
	}
	return transaction.BankTransactionCategory_BTC_UNSPECIFIED
}

func (x *BankTransactionRequest) GetType() transaction.BankTransactionType {
	if x != nil {
		return x.Type
	}
	return transaction.BankTransactionType_BTT_UNSPECIFIED
}

func (x *BankTransactionRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *BankTransactionRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BankTransactionRequest) GetTransactionDate() *timestamp.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *BankTransactionRequest) GetTransferProvider() string {
	if x != nil {
		return x.TransferProvider
	}
	return ""
}

func (x *BankTransactionRequest) GetCounterpartyName() string {
	if x != nil {
		return x.CounterpartyName
	}
	return ""
}

func (x *BankTransactionRequest) GetTransactionDesc() string {
	if x != nil {
		return x.TransactionDesc
	}
	return ""
}

func (x *BankTransactionRequest) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *BankTransactionRequest) GetModified() *timestamp.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

var File_transaction_monitor_bank_transaction_proto protoreflect.FileDescriptor

var file_transaction_monitor_bank_transaction_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x1a,
	0x1a, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x88, 0x0a, 0x0a, 0x16, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x69,
	0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x34, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x31, 0x0a, 0x15,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x37, 0x5a, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_monitor_bank_transaction_proto_rawDescOnce sync.Once
	file_transaction_monitor_bank_transaction_proto_rawDescData = file_transaction_monitor_bank_transaction_proto_rawDesc
)

func file_transaction_monitor_bank_transaction_proto_rawDescGZIP() []byte {
	file_transaction_monitor_bank_transaction_proto_rawDescOnce.Do(func() {
		file_transaction_monitor_bank_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_monitor_bank_transaction_proto_rawDescData)
	})
	return file_transaction_monitor_bank_transaction_proto_rawDescData
}

var file_transaction_monitor_bank_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_transaction_monitor_bank_transaction_proto_goTypes = []interface{}{
	(*BankTransactionRequest)(nil),           // 0: wise.protobuf.transaction.monitor.BankTransactionRequest
	(banking.PartnerName)(0),                 // 1: wise.protobuf.banking.PartnerName
	(transaction.BankTransactionStatus)(0),   // 2: wise.protobuf.transaction.BankTransactionStatus
	(transaction.BankTransactionCategory)(0), // 3: wise.protobuf.transaction.BankTransactionCategory
	(transaction.BankTransactionType)(0),     // 4: wise.protobuf.transaction.BankTransactionType
	(*timestamp.Timestamp)(nil),              // 5: google.protobuf.Timestamp
}
var file_transaction_monitor_bank_transaction_proto_depIdxs = []int32{
	1, // 0: wise.protobuf.transaction.monitor.BankTransactionRequest.partner_name:type_name -> wise.protobuf.banking.PartnerName
	2, // 1: wise.protobuf.transaction.monitor.BankTransactionRequest.status:type_name -> wise.protobuf.transaction.BankTransactionStatus
	3, // 2: wise.protobuf.transaction.monitor.BankTransactionRequest.category:type_name -> wise.protobuf.transaction.BankTransactionCategory
	4, // 3: wise.protobuf.transaction.monitor.BankTransactionRequest.type:type_name -> wise.protobuf.transaction.BankTransactionType
	5, // 4: wise.protobuf.transaction.monitor.BankTransactionRequest.transaction_date:type_name -> google.protobuf.Timestamp
	5, // 5: wise.protobuf.transaction.monitor.BankTransactionRequest.created:type_name -> google.protobuf.Timestamp
	5, // 6: wise.protobuf.transaction.monitor.BankTransactionRequest.modified:type_name -> google.protobuf.Timestamp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_transaction_monitor_bank_transaction_proto_init() }
func file_transaction_monitor_bank_transaction_proto_init() {
	if File_transaction_monitor_bank_transaction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transaction_monitor_bank_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_monitor_bank_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transaction_monitor_bank_transaction_proto_goTypes,
		DependencyIndexes: file_transaction_monitor_bank_transaction_proto_depIdxs,
		MessageInfos:      file_transaction_monitor_bank_transaction_proto_msgTypes,
	}.Build()
	File_transaction_monitor_bank_transaction_proto = out.File
	file_transaction_monitor_bank_transaction_proto_rawDesc = nil
	file_transaction_monitor_bank_transaction_proto_goTypes = nil
	file_transaction_monitor_bank_transaction_proto_depIdxs = nil
}
