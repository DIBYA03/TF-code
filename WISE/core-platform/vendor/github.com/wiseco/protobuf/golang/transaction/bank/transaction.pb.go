// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: transaction/bank/transaction.proto

package bank

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	banking "github.com/wiseco/protobuf/golang/banking"
	transaction "github.com/wiseco/protobuf/golang/transaction"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BusinessId             string                                      `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ConsumerId             string                                      `protobuf:"bytes,3,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	AccountId              string                                      `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	DebitCardId            string                                      `protobuf:"bytes,5,opt,name=debit_card_id,json=debitCardId,proto3" json:"debit_card_id,omitempty"`
	BankTransferId         string                                      `protobuf:"bytes,6,opt,name=bank_transfer_id,json=bankTransferId,proto3" json:"bank_transfer_id,omitempty"`
	PaymentRequestId       string                                      `protobuf:"bytes,7,opt,name=payment_request_id,json=paymentRequestId,proto3" json:"payment_request_id,omitempty"`
	ContactId              string                                      `protobuf:"bytes,8,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	PartnerName            banking.PartnerName                         `protobuf:"varint,9,opt,name=partner_name,json=partnerName,proto3,enum=wise.protobuf.banking.PartnerName" json:"partner_name,omitempty"`
	PartnerTransactionId   string                                      `protobuf:"bytes,10,opt,name=partner_transaction_id,json=partnerTransactionId,proto3" json:"partner_transaction_id,omitempty"`
	PartnerTransactionDesc string                                      `protobuf:"bytes,11,opt,name=partner_transaction_desc,json=partnerTransactionDesc,proto3" json:"partner_transaction_desc,omitempty"`
	EventThreadId          string                                      `protobuf:"bytes,12,opt,name=event_thread_id,json=eventThreadId,proto3" json:"event_thread_id,omitempty"`
	Status                 transaction.BankTransactionStatus           `protobuf:"varint,13,opt,name=status,proto3,enum=wise.protobuf.transaction.BankTransactionStatus" json:"status,omitempty"`
	Category               transaction.BankTransactionCategory         `protobuf:"varint,14,opt,name=category,proto3,enum=wise.protobuf.transaction.BankTransactionCategory" json:"category,omitempty"`
	Type                   transaction.BankTransactionType             `protobuf:"varint,15,opt,name=type,proto3,enum=wise.protobuf.transaction.BankTransactionType" json:"type,omitempty"`
	Amount                 string                                      `protobuf:"bytes,16,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency               string                                      `protobuf:"bytes,17,opt,name=currency,proto3" json:"currency,omitempty"`
	TransactionDate        *timestamp.Timestamp                        `protobuf:"bytes,18,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	Counterparty           string                                      `protobuf:"bytes,19,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	CounterpartyType       transaction.BankTransactionCounterpartyType `protobuf:"varint,20,opt,name=counterparty_type,json=counterpartyType,proto3,enum=wise.protobuf.transaction.BankTransactionCounterpartyType" json:"counterparty_type,omitempty"`
	InterestDate           string                                      `protobuf:"bytes,21,opt,name=interest_date,json=interestDate,proto3" json:"interest_date,omitempty"`
	Created                *timestamp.Timestamp                        `protobuf:"bytes,22,opt,name=created,proto3" json:"created,omitempty"`
	Modified               *timestamp.Timestamp                        `protobuf:"bytes,23,opt,name=modified,proto3" json:"modified,omitempty"`
	NotificationId         string                                      `protobuf:"bytes,24,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
	// Legacy for migration back compatability
	LegacyType        string `protobuf:"bytes,100,opt,name=legacy_type,json=legacyType,proto3" json:"legacy_type,omitempty"`
	LegacyCodeType    string `protobuf:"bytes,101,opt,name=legacy_code_type,json=legacyCodeType,proto3" json:"legacy_code_type,omitempty"`
	LegacySubtype     string `protobuf:"bytes,102,opt,name=legacy_subtype,json=legacySubtype,proto3" json:"legacy_subtype,omitempty"`
	LegacyTitle       string `protobuf:"bytes,103,opt,name=legacy_title,json=legacyTitle,proto3" json:"legacy_title,omitempty"`
	LegacyDescription string `protobuf:"bytes,104,opt,name=legacy_description,json=legacyDescription,proto3" json:"legacy_description,omitempty"`
	LegacyNotes       string `protobuf:"bytes,105,opt,name=legacy_notes,json=legacyNotes,proto3" json:"legacy_notes,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_transaction_bank_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *Transaction) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *Transaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Transaction) GetDebitCardId() string {
	if x != nil {
		return x.DebitCardId
	}
	return ""
}

func (x *Transaction) GetBankTransferId() string {
	if x != nil {
		return x.BankTransferId
	}
	return ""
}

func (x *Transaction) GetPaymentRequestId() string {
	if x != nil {
		return x.PaymentRequestId
	}
	return ""
}

func (x *Transaction) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *Transaction) GetPartnerName() banking.PartnerName {
	if x != nil {
		return x.PartnerName
	}
	return banking.PartnerName_PN_UNSPECIFIED
}

func (x *Transaction) GetPartnerTransactionId() string {
	if x != nil {
		return x.PartnerTransactionId
	}
	return ""
}

func (x *Transaction) GetPartnerTransactionDesc() string {
	if x != nil {
		return x.PartnerTransactionDesc
	}
	return ""
}

func (x *Transaction) GetEventThreadId() string {
	if x != nil {
		return x.EventThreadId
	}
	return ""
}

func (x *Transaction) GetStatus() transaction.BankTransactionStatus {
	if x != nil {
		return x.Status
	}
	return transaction.BankTransactionStatus_BTS_UNSPECIFIED
}

func (x *Transaction) GetCategory() transaction.BankTransactionCategory {
	if x != nil {
		return x.Category
	}
	return transaction.BankTransactionCategory_BTC_UNSPECIFIED
}

func (x *Transaction) GetType() transaction.BankTransactionType {
	if x != nil {
		return x.Type
	}
	return transaction.BankTransactionType_BTT_UNSPECIFIED
}

func (x *Transaction) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transaction) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Transaction) GetTransactionDate() *timestamp.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *Transaction) GetCounterparty() string {
	if x != nil {
		return x.Counterparty
	}
	return ""
}

func (x *Transaction) GetCounterpartyType() transaction.BankTransactionCounterpartyType {
	if x != nil {
		return x.CounterpartyType
	}
	return transaction.BankTransactionCounterpartyType_BTCT_UNSPECIFIED
}

func (x *Transaction) GetInterestDate() string {
	if x != nil {
		return x.InterestDate
	}
	return ""
}

func (x *Transaction) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Transaction) GetModified() *timestamp.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *Transaction) GetNotificationId() string {
	if x != nil {
		return x.NotificationId
	}
	return ""
}

func (x *Transaction) GetLegacyType() string {
	if x != nil {
		return x.LegacyType
	}
	return ""
}

func (x *Transaction) GetLegacyCodeType() string {
	if x != nil {
		return x.LegacyCodeType
	}
	return ""
}

func (x *Transaction) GetLegacySubtype() string {
	if x != nil {
		return x.LegacySubtype
	}
	return ""
}

func (x *Transaction) GetLegacyTitle() string {
	if x != nil {
		return x.LegacyTitle
	}
	return ""
}

func (x *Transaction) GetLegacyDescription() string {
	if x != nil {
		return x.LegacyDescription
	}
	return ""
}

func (x *Transaction) GetLegacyNotes() string {
	if x != nil {
		return x.LegacyNotes
	}
	return ""
}

type CardTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardHolderId          string                   `protobuf:"bytes,1,opt,name=card_holder_id,json=cardHolderId,proto3" json:"card_holder_id,omitempty"`
	NetworkTransactionId  string                   `protobuf:"bytes,2,opt,name=network_transaction_id,json=networkTransactionId,proto3" json:"network_transaction_id,omitempty"`
	Network               banking.DebitCardNetwork `protobuf:"varint,3,opt,name=network,proto3,enum=wise.protobuf.banking.DebitCardNetwork" json:"network,omitempty"`
	AuthAmount            string                   `protobuf:"bytes,4,opt,name=auth_amount,json=authAmount,proto3" json:"auth_amount,omitempty"`
	AuthDate              *timestamp.Timestamp     `protobuf:"bytes,5,opt,name=auth_date,json=authDate,proto3" json:"auth_date,omitempty"`
	AuthResponseCode      string                   `protobuf:"bytes,6,opt,name=auth_response_code,json=authResponseCode,proto3" json:"auth_response_code,omitempty"`
	AuthNumber            string                   `protobuf:"bytes,7,opt,name=auth_number,json=authNumber,proto3" json:"auth_number,omitempty"`
	CardTransactionType   string                   `protobuf:"bytes,8,opt,name=card_transaction_type,json=cardTransactionType,proto3" json:"card_transaction_type,omitempty"`
	LocalAmount           string                   `protobuf:"bytes,9,opt,name=local_amount,json=localAmount,proto3" json:"local_amount,omitempty"`
	LocalCurrency         string                   `protobuf:"bytes,10,opt,name=local_currency,json=localCurrency,proto3" json:"local_currency,omitempty"`
	LocalDate             *timestamp.Timestamp     `protobuf:"bytes,11,opt,name=local_date,json=localDate,proto3" json:"local_date,omitempty"`
	BillingCurrency       string                   `protobuf:"bytes,12,opt,name=billing_currency,json=billingCurrency,proto3" json:"billing_currency,omitempty"`
	PosEntryMode          string                   `protobuf:"bytes,13,opt,name=pos_entry_mode,json=posEntryMode,proto3" json:"pos_entry_mode,omitempty"`
	PosConditionCode      string                   `protobuf:"bytes,14,opt,name=pos_condition_code,json=posConditionCode,proto3" json:"pos_condition_code,omitempty"`
	AcquirerBin           string                   `protobuf:"bytes,15,opt,name=acquirer_bin,json=acquirerBin,proto3" json:"acquirer_bin,omitempty"`
	MerchantName          string                   `protobuf:"bytes,16,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`
	MerchantCategoryCode  string                   `protobuf:"bytes,17,opt,name=merchant_category_code,json=merchantCategoryCode,proto3" json:"merchant_category_code,omitempty"`
	AcceptorId            string                   `protobuf:"bytes,18,opt,name=acceptor_id,json=acceptorId,proto3" json:"acceptor_id,omitempty"`
	AcceptorTerminal      string                   `protobuf:"bytes,19,opt,name=acceptor_terminal,json=acceptorTerminal,proto3" json:"acceptor_terminal,omitempty"`
	AcceptorStreetAddress string                   `protobuf:"bytes,20,opt,name=acceptor_street_address,json=acceptorStreetAddress,proto3" json:"acceptor_street_address,omitempty"`
	AcceptorCity          string                   `protobuf:"bytes,21,opt,name=acceptor_city,json=acceptorCity,proto3" json:"acceptor_city,omitempty"`
	AcceptorState         string                   `protobuf:"bytes,22,opt,name=acceptor_state,json=acceptorState,proto3" json:"acceptor_state,omitempty"`
	AcceptorCountry       string                   `protobuf:"bytes,23,opt,name=acceptor_country,json=acceptorCountry,proto3" json:"acceptor_country,omitempty"`
	Created               *timestamp.Timestamp     `protobuf:"bytes,24,opt,name=created,proto3" json:"created,omitempty"`
	Modified              *timestamp.Timestamp     `protobuf:"bytes,25,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *CardTransaction) Reset() {
	*x = CardTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardTransaction) ProtoMessage() {}

func (x *CardTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardTransaction.ProtoReflect.Descriptor instead.
func (*CardTransaction) Descriptor() ([]byte, []int) {
	return file_transaction_bank_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *CardTransaction) GetCardHolderId() string {
	if x != nil {
		return x.CardHolderId
	}
	return ""
}

func (x *CardTransaction) GetNetworkTransactionId() string {
	if x != nil {
		return x.NetworkTransactionId
	}
	return ""
}

func (x *CardTransaction) GetNetwork() banking.DebitCardNetwork {
	if x != nil {
		return x.Network
	}
	return banking.DebitCardNetwork_DCN_UNSPECIFIED
}

func (x *CardTransaction) GetAuthAmount() string {
	if x != nil {
		return x.AuthAmount
	}
	return ""
}

func (x *CardTransaction) GetAuthDate() *timestamp.Timestamp {
	if x != nil {
		return x.AuthDate
	}
	return nil
}

func (x *CardTransaction) GetAuthResponseCode() string {
	if x != nil {
		return x.AuthResponseCode
	}
	return ""
}

func (x *CardTransaction) GetAuthNumber() string {
	if x != nil {
		return x.AuthNumber
	}
	return ""
}

func (x *CardTransaction) GetCardTransactionType() string {
	if x != nil {
		return x.CardTransactionType
	}
	return ""
}

func (x *CardTransaction) GetLocalAmount() string {
	if x != nil {
		return x.LocalAmount
	}
	return ""
}

func (x *CardTransaction) GetLocalCurrency() string {
	if x != nil {
		return x.LocalCurrency
	}
	return ""
}

func (x *CardTransaction) GetLocalDate() *timestamp.Timestamp {
	if x != nil {
		return x.LocalDate
	}
	return nil
}

func (x *CardTransaction) GetBillingCurrency() string {
	if x != nil {
		return x.BillingCurrency
	}
	return ""
}

func (x *CardTransaction) GetPosEntryMode() string {
	if x != nil {
		return x.PosEntryMode
	}
	return ""
}

func (x *CardTransaction) GetPosConditionCode() string {
	if x != nil {
		return x.PosConditionCode
	}
	return ""
}

func (x *CardTransaction) GetAcquirerBin() string {
	if x != nil {
		return x.AcquirerBin
	}
	return ""
}

func (x *CardTransaction) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *CardTransaction) GetMerchantCategoryCode() string {
	if x != nil {
		return x.MerchantCategoryCode
	}
	return ""
}

func (x *CardTransaction) GetAcceptorId() string {
	if x != nil {
		return x.AcceptorId
	}
	return ""
}

func (x *CardTransaction) GetAcceptorTerminal() string {
	if x != nil {
		return x.AcceptorTerminal
	}
	return ""
}

func (x *CardTransaction) GetAcceptorStreetAddress() string {
	if x != nil {
		return x.AcceptorStreetAddress
	}
	return ""
}

func (x *CardTransaction) GetAcceptorCity() string {
	if x != nil {
		return x.AcceptorCity
	}
	return ""
}

func (x *CardTransaction) GetAcceptorState() string {
	if x != nil {
		return x.AcceptorState
	}
	return ""
}

func (x *CardTransaction) GetAcceptorCountry() string {
	if x != nil {
		return x.AcceptorCountry
	}
	return ""
}

func (x *CardTransaction) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CardTransaction) GetModified() *timestamp.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

type HoldTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldNumber      string               `protobuf:"bytes,1,opt,name=hold_number,json=holdNumber,proto3" json:"hold_number,omitempty"`
	Amount          string               `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	TransactionDate *timestamp.Timestamp `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	ExpiryDate      *timestamp.Timestamp `protobuf:"bytes,4,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	Created         *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	Modified        *timestamp.Timestamp `protobuf:"bytes,6,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *HoldTransaction) Reset() {
	*x = HoldTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldTransaction) ProtoMessage() {}

func (x *HoldTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldTransaction.ProtoReflect.Descriptor instead.
func (*HoldTransaction) Descriptor() ([]byte, []int) {
	return file_transaction_bank_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *HoldTransaction) GetHoldNumber() string {
	if x != nil {
		return x.HoldNumber
	}
	return ""
}

func (x *HoldTransaction) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *HoldTransaction) GetTransactionDate() *timestamp.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *HoldTransaction) GetExpiryDate() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *HoldTransaction) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *HoldTransaction) GetModified() *timestamp.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

type FullTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction     *Transaction     `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	CardTransaction *CardTransaction `protobuf:"bytes,2,opt,name=card_transaction,json=cardTransaction,proto3" json:"card_transaction,omitempty"`
	HoldTransaction *HoldTransaction `protobuf:"bytes,3,opt,name=hold_transaction,json=holdTransaction,proto3" json:"hold_transaction,omitempty"`
}

func (x *FullTransaction) Reset() {
	*x = FullTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullTransaction) ProtoMessage() {}

func (x *FullTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullTransaction.ProtoReflect.Descriptor instead.
func (*FullTransaction) Descriptor() ([]byte, []int) {
	return file_transaction_bank_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *FullTransaction) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *FullTransaction) GetCardTransaction() *CardTransaction {
	if x != nil {
		return x.CardTransaction
	}
	return nil
}

func (x *FullTransaction) GetHoldTransaction() *HoldTransaction {
	if x != nil {
		return x.HoldTransaction
	}
	return nil
}

type UpsertCardTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardHolderId          string                   `protobuf:"bytes,1,opt,name=card_holder_id,json=cardHolderId,proto3" json:"card_holder_id,omitempty"`
	NetworkTransactionId  string                   `protobuf:"bytes,2,opt,name=network_transaction_id,json=networkTransactionId,proto3" json:"network_transaction_id,omitempty"`
	Network               banking.DebitCardNetwork `protobuf:"varint,3,opt,name=network,proto3,enum=wise.protobuf.banking.DebitCardNetwork" json:"network,omitempty"`
	AuthAmount            string                   `protobuf:"bytes,4,opt,name=auth_amount,json=authAmount,proto3" json:"auth_amount,omitempty"`
	AuthDate              *timestamp.Timestamp     `protobuf:"bytes,5,opt,name=auth_date,json=authDate,proto3" json:"auth_date,omitempty"`
	AuthResponseCode      string                   `protobuf:"bytes,6,opt,name=auth_response_code,json=authResponseCode,proto3" json:"auth_response_code,omitempty"`
	AuthNumber            string                   `protobuf:"bytes,7,opt,name=auth_number,json=authNumber,proto3" json:"auth_number,omitempty"`
	CardTransactionType   string                   `protobuf:"bytes,8,opt,name=card_transaction_type,json=cardTransactionType,proto3" json:"card_transaction_type,omitempty"`
	LocalAmount           string                   `protobuf:"bytes,9,opt,name=local_amount,json=localAmount,proto3" json:"local_amount,omitempty"`
	LocalCurrency         string                   `protobuf:"bytes,10,opt,name=local_currency,json=localCurrency,proto3" json:"local_currency,omitempty"`
	LocalDate             *timestamp.Timestamp     `protobuf:"bytes,11,opt,name=local_date,json=localDate,proto3" json:"local_date,omitempty"`
	BillingCurrency       string                   `protobuf:"bytes,12,opt,name=billing_currency,json=billingCurrency,proto3" json:"billing_currency,omitempty"`
	PosEntryMode          string                   `protobuf:"bytes,13,opt,name=pos_entry_mode,json=posEntryMode,proto3" json:"pos_entry_mode,omitempty"`
	PosConditionCode      string                   `protobuf:"bytes,14,opt,name=pos_condition_code,json=posConditionCode,proto3" json:"pos_condition_code,omitempty"`
	AcquirerBin           string                   `protobuf:"bytes,15,opt,name=acquirer_bin,json=acquirerBin,proto3" json:"acquirer_bin,omitempty"`
	MerchantName          string                   `protobuf:"bytes,16,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`
	MerchantCategoryCode  string                   `protobuf:"bytes,17,opt,name=merchant_category_code,json=merchantCategoryCode,proto3" json:"merchant_category_code,omitempty"`
	AcceptorId            string                   `protobuf:"bytes,18,opt,name=acceptor_id,json=acceptorId,proto3" json:"acceptor_id,omitempty"`
	AcceptorTerminal      string                   `protobuf:"bytes,19,opt,name=acceptor_terminal,json=acceptorTerminal,proto3" json:"acceptor_terminal,omitempty"`
	AcceptorStreetAddress string                   `protobuf:"bytes,20,opt,name=acceptor_street_address,json=acceptorStreetAddress,proto3" json:"acceptor_street_address,omitempty"`
	AcceptorCity          string                   `protobuf:"bytes,21,opt,name=acceptor_city,json=acceptorCity,proto3" json:"acceptor_city,omitempty"`
	AcceptorState         string                   `protobuf:"bytes,22,opt,name=acceptor_state,json=acceptorState,proto3" json:"acceptor_state,omitempty"`
	AcceptorCountry       string                   `protobuf:"bytes,23,opt,name=acceptor_country,json=acceptorCountry,proto3" json:"acceptor_country,omitempty"`
	Created               *timestamp.Timestamp     `protobuf:"bytes,24,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *UpsertCardTransactionRequest) Reset() {
	*x = UpsertCardTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertCardTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCardTransactionRequest) ProtoMessage() {}

func (x *UpsertCardTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCardTransactionRequest.ProtoReflect.Descriptor instead.
func (*UpsertCardTransactionRequest) Descriptor() ([]byte, []int) {
	return file_transaction_bank_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *UpsertCardTransactionRequest) GetCardHolderId() string {
	if x != nil {
		return x.CardHolderId
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetNetworkTransactionId() string {
	if x != nil {
		return x.NetworkTransactionId
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetNetwork() banking.DebitCardNetwork {
	if x != nil {
		return x.Network
	}
	return banking.DebitCardNetwork_DCN_UNSPECIFIED
}

func (x *UpsertCardTransactionRequest) GetAuthAmount() string {
	if x != nil {
		return x.AuthAmount
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetAuthDate() *timestamp.Timestamp {
	if x != nil {
		return x.AuthDate
	}
	return nil
}

func (x *UpsertCardTransactionRequest) GetAuthResponseCode() string {
	if x != nil {
		return x.AuthResponseCode
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetAuthNumber() string {
	if x != nil {
		return x.AuthNumber
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetCardTransactionType() string {
	if x != nil {
		return x.CardTransactionType
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetLocalAmount() string {
	if x != nil {
		return x.LocalAmount
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetLocalCurrency() string {
	if x != nil {
		return x.LocalCurrency
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetLocalDate() *timestamp.Timestamp {
	if x != nil {
		return x.LocalDate
	}
	return nil
}

func (x *UpsertCardTransactionRequest) GetBillingCurrency() string {
	if x != nil {
		return x.BillingCurrency
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetPosEntryMode() string {
	if x != nil {
		return x.PosEntryMode
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetPosConditionCode() string {
	if x != nil {
		return x.PosConditionCode
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetAcquirerBin() string {
	if x != nil {
		return x.AcquirerBin
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetMerchantCategoryCode() string {
	if x != nil {
		return x.MerchantCategoryCode
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetAcceptorId() string {
	if x != nil {
		return x.AcceptorId
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetAcceptorTerminal() string {
	if x != nil {
		return x.AcceptorTerminal
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetAcceptorStreetAddress() string {
	if x != nil {
		return x.AcceptorStreetAddress
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetAcceptorCity() string {
	if x != nil {
		return x.AcceptorCity
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetAcceptorState() string {
	if x != nil {
		return x.AcceptorState
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetAcceptorCountry() string {
	if x != nil {
		return x.AcceptorCountry
	}
	return ""
}

func (x *UpsertCardTransactionRequest) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type UpsertHoldTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldNumber      string               `protobuf:"bytes,1,opt,name=hold_number,json=holdNumber,proto3" json:"hold_number,omitempty"`
	Amount          string               `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	TransactionDate *timestamp.Timestamp `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	ExpiryDate      *timestamp.Timestamp `protobuf:"bytes,4,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	Created         *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *UpsertHoldTransactionRequest) Reset() {
	*x = UpsertHoldTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertHoldTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertHoldTransactionRequest) ProtoMessage() {}

func (x *UpsertHoldTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertHoldTransactionRequest.ProtoReflect.Descriptor instead.
func (*UpsertHoldTransactionRequest) Descriptor() ([]byte, []int) {
	return file_transaction_bank_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *UpsertHoldTransactionRequest) GetHoldNumber() string {
	if x != nil {
		return x.HoldNumber
	}
	return ""
}

func (x *UpsertHoldTransactionRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UpsertHoldTransactionRequest) GetTransactionDate() *timestamp.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *UpsertHoldTransactionRequest) GetExpiryDate() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *UpsertHoldTransactionRequest) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type UpsertTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BusinessId             string                                      `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ConsumerId             string                                      `protobuf:"bytes,3,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	AccountId              string                                      `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	DebitCardId            string                                      `protobuf:"bytes,5,opt,name=debit_card_id,json=debitCardId,proto3" json:"debit_card_id,omitempty"`
	BankTransferId         string                                      `protobuf:"bytes,6,opt,name=bank_transfer_id,json=bankTransferId,proto3" json:"bank_transfer_id,omitempty"`
	PaymentRequestId       string                                      `protobuf:"bytes,7,opt,name=payment_request_id,json=paymentRequestId,proto3" json:"payment_request_id,omitempty"`
	ContactId              string                                      `protobuf:"bytes,8,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	PartnerName            banking.PartnerName                         `protobuf:"varint,9,opt,name=partner_name,json=partnerName,proto3,enum=wise.protobuf.banking.PartnerName" json:"partner_name,omitempty"`
	PartnerTransactionId   string                                      `protobuf:"bytes,10,opt,name=partner_transaction_id,json=partnerTransactionId,proto3" json:"partner_transaction_id,omitempty"`
	PartnerTransactionDesc string                                      `protobuf:"bytes,11,opt,name=partner_transaction_desc,json=partnerTransactionDesc,proto3" json:"partner_transaction_desc,omitempty"`
	EventId                string                                      `protobuf:"bytes,12,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventThreadId          string                                      `protobuf:"bytes,13,opt,name=event_thread_id,json=eventThreadId,proto3" json:"event_thread_id,omitempty"`
	Status                 transaction.BankTransactionStatus           `protobuf:"varint,14,opt,name=status,proto3,enum=wise.protobuf.transaction.BankTransactionStatus" json:"status,omitempty"`
	Category               transaction.BankTransactionCategory         `protobuf:"varint,15,opt,name=category,proto3,enum=wise.protobuf.transaction.BankTransactionCategory" json:"category,omitempty"`
	Type                   transaction.BankTransactionType             `protobuf:"varint,16,opt,name=type,proto3,enum=wise.protobuf.transaction.BankTransactionType" json:"type,omitempty"`
	Amount                 string                                      `protobuf:"bytes,17,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency               string                                      `protobuf:"bytes,18,opt,name=currency,proto3" json:"currency,omitempty"`
	TransactionDate        *timestamp.Timestamp                        `protobuf:"bytes,19,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	Counterparty           string                                      `protobuf:"bytes,20,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	CounterpartyType       transaction.BankTransactionCounterpartyType `protobuf:"varint,21,opt,name=counterparty_type,json=counterpartyType,proto3,enum=wise.protobuf.transaction.BankTransactionCounterpartyType" json:"counterparty_type,omitempty"`
	InterestDate           string                                      `protobuf:"bytes,22,opt,name=interest_date,json=interestDate,proto3" json:"interest_date,omitempty"`
	Created                *timestamp.Timestamp                        `protobuf:"bytes,23,opt,name=created,proto3" json:"created,omitempty"`
	CardRequest            *UpsertCardTransactionRequest               `protobuf:"bytes,24,opt,name=card_request,json=cardRequest,proto3" json:"card_request,omitempty"`
	HoldRequest            *UpsertHoldTransactionRequest               `protobuf:"bytes,25,opt,name=hold_request,json=holdRequest,proto3" json:"hold_request,omitempty"`
	NotificationId         string                                      `protobuf:"bytes,26,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
	// Legacy for migration back compatability
	LegacyType        string `protobuf:"bytes,100,opt,name=legacy_type,json=legacyType,proto3" json:"legacy_type,omitempty"`
	LegacyCodeType    string `protobuf:"bytes,101,opt,name=legacy_code_type,json=legacyCodeType,proto3" json:"legacy_code_type,omitempty"`
	LegacySubtype     string `protobuf:"bytes,102,opt,name=legacy_subtype,json=legacySubtype,proto3" json:"legacy_subtype,omitempty"`
	LegacyTitle       string `protobuf:"bytes,103,opt,name=legacy_title,json=legacyTitle,proto3" json:"legacy_title,omitempty"`
	LegacyDescription string `protobuf:"bytes,104,opt,name=legacy_description,json=legacyDescription,proto3" json:"legacy_description,omitempty"`
	LegacyNotes       string `protobuf:"bytes,105,opt,name=legacy_notes,json=legacyNotes,proto3" json:"legacy_notes,omitempty"`
}

func (x *UpsertTransactionRequest) Reset() {
	*x = UpsertTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertTransactionRequest) ProtoMessage() {}

func (x *UpsertTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertTransactionRequest.ProtoReflect.Descriptor instead.
func (*UpsertTransactionRequest) Descriptor() ([]byte, []int) {
	return file_transaction_bank_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertTransactionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpsertTransactionRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *UpsertTransactionRequest) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *UpsertTransactionRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UpsertTransactionRequest) GetDebitCardId() string {
	if x != nil {
		return x.DebitCardId
	}
	return ""
}

func (x *UpsertTransactionRequest) GetBankTransferId() string {
	if x != nil {
		return x.BankTransferId
	}
	return ""
}

func (x *UpsertTransactionRequest) GetPaymentRequestId() string {
	if x != nil {
		return x.PaymentRequestId
	}
	return ""
}

func (x *UpsertTransactionRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *UpsertTransactionRequest) GetPartnerName() banking.PartnerName {
	if x != nil {
		return x.PartnerName
	}
	return banking.PartnerName_PN_UNSPECIFIED
}

func (x *UpsertTransactionRequest) GetPartnerTransactionId() string {
	if x != nil {
		return x.PartnerTransactionId
	}
	return ""
}

func (x *UpsertTransactionRequest) GetPartnerTransactionDesc() string {
	if x != nil {
		return x.PartnerTransactionDesc
	}
	return ""
}

func (x *UpsertTransactionRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UpsertTransactionRequest) GetEventThreadId() string {
	if x != nil {
		return x.EventThreadId
	}
	return ""
}

func (x *UpsertTransactionRequest) GetStatus() transaction.BankTransactionStatus {
	if x != nil {
		return x.Status
	}
	return transaction.BankTransactionStatus_BTS_UNSPECIFIED
}

func (x *UpsertTransactionRequest) GetCategory() transaction.BankTransactionCategory {
	if x != nil {
		return x.Category
	}
	return transaction.BankTransactionCategory_BTC_UNSPECIFIED
}

func (x *UpsertTransactionRequest) GetType() transaction.BankTransactionType {
	if x != nil {
		return x.Type
	}
	return transaction.BankTransactionType_BTT_UNSPECIFIED
}

func (x *UpsertTransactionRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UpsertTransactionRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UpsertTransactionRequest) GetTransactionDate() *timestamp.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *UpsertTransactionRequest) GetCounterparty() string {
	if x != nil {
		return x.Counterparty
	}
	return ""
}

func (x *UpsertTransactionRequest) GetCounterpartyType() transaction.BankTransactionCounterpartyType {
	if x != nil {
		return x.CounterpartyType
	}
	return transaction.BankTransactionCounterpartyType_BTCT_UNSPECIFIED
}

func (x *UpsertTransactionRequest) GetInterestDate() string {
	if x != nil {
		return x.InterestDate
	}
	return ""
}

func (x *UpsertTransactionRequest) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UpsertTransactionRequest) GetCardRequest() *UpsertCardTransactionRequest {
	if x != nil {
		return x.CardRequest
	}
	return nil
}

func (x *UpsertTransactionRequest) GetHoldRequest() *UpsertHoldTransactionRequest {
	if x != nil {
		return x.HoldRequest
	}
	return nil
}

func (x *UpsertTransactionRequest) GetNotificationId() string {
	if x != nil {
		return x.NotificationId
	}
	return ""
}

func (x *UpsertTransactionRequest) GetLegacyType() string {
	if x != nil {
		return x.LegacyType
	}
	return ""
}

func (x *UpsertTransactionRequest) GetLegacyCodeType() string {
	if x != nil {
		return x.LegacyCodeType
	}
	return ""
}

func (x *UpsertTransactionRequest) GetLegacySubtype() string {
	if x != nil {
		return x.LegacySubtype
	}
	return ""
}

func (x *UpsertTransactionRequest) GetLegacyTitle() string {
	if x != nil {
		return x.LegacyTitle
	}
	return ""
}

func (x *UpsertTransactionRequest) GetLegacyDescription() string {
	if x != nil {
		return x.LegacyDescription
	}
	return ""
}

func (x *UpsertTransactionRequest) GetLegacyNotes() string {
	if x != nil {
		return x.LegacyNotes
	}
	return ""
}

type UpdateTransactionPropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PartnerTransactionDesc string                                      `protobuf:"bytes,2,opt,name=partner_transaction_desc,json=partnerTransactionDesc,proto3" json:"partner_transaction_desc,omitempty"`
	Status                 transaction.BankTransactionStatus           `protobuf:"varint,3,opt,name=status,proto3,enum=wise.protobuf.transaction.BankTransactionStatus" json:"status,omitempty"`
	Category               transaction.BankTransactionCategory         `protobuf:"varint,4,opt,name=category,proto3,enum=wise.protobuf.transaction.BankTransactionCategory" json:"category,omitempty"`
	Type                   transaction.BankTransactionType             `protobuf:"varint,5,opt,name=type,proto3,enum=wise.protobuf.transaction.BankTransactionType" json:"type,omitempty"`
	Amount                 string                                      `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency               string                                      `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	TransactionDate        *timestamp.Timestamp                        `protobuf:"bytes,8,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	Counterparty           string                                      `protobuf:"bytes,9,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	CounterpartyType       transaction.BankTransactionCounterpartyType `protobuf:"varint,10,opt,name=counterparty_type,json=counterpartyType,proto3,enum=wise.protobuf.transaction.BankTransactionCounterpartyType" json:"counterparty_type,omitempty"`
	InterestDate           string                                      `protobuf:"bytes,11,opt,name=interest_date,json=interestDate,proto3" json:"interest_date,omitempty"`
	// Legacy for migration back compatability
	LegacyType        string `protobuf:"bytes,100,opt,name=legacy_type,json=legacyType,proto3" json:"legacy_type,omitempty"`
	LegacyCodeType    string `protobuf:"bytes,101,opt,name=legacy_code_type,json=legacyCodeType,proto3" json:"legacy_code_type,omitempty"`
	LegacySubtype     string `protobuf:"bytes,102,opt,name=legacy_subtype,json=legacySubtype,proto3" json:"legacy_subtype,omitempty"`
	LegacyTitle       string `protobuf:"bytes,103,opt,name=legacy_title,json=legacyTitle,proto3" json:"legacy_title,omitempty"`
	LegacyDescription string `protobuf:"bytes,104,opt,name=legacy_description,json=legacyDescription,proto3" json:"legacy_description,omitempty"`
	LegacyNotes       string `protobuf:"bytes,105,opt,name=legacy_notes,json=legacyNotes,proto3" json:"legacy_notes,omitempty"`
}

func (x *UpdateTransactionPropertyRequest) Reset() {
	*x = UpdateTransactionPropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_transaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTransactionPropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionPropertyRequest) ProtoMessage() {}

func (x *UpdateTransactionPropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_transaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionPropertyRequest.ProtoReflect.Descriptor instead.
func (*UpdateTransactionPropertyRequest) Descriptor() ([]byte, []int) {
	return file_transaction_bank_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTransactionPropertyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTransactionPropertyRequest) GetPartnerTransactionDesc() string {
	if x != nil {
		return x.PartnerTransactionDesc
	}
	return ""
}

func (x *UpdateTransactionPropertyRequest) GetStatus() transaction.BankTransactionStatus {
	if x != nil {
		return x.Status
	}
	return transaction.BankTransactionStatus_BTS_UNSPECIFIED
}

func (x *UpdateTransactionPropertyRequest) GetCategory() transaction.BankTransactionCategory {
	if x != nil {
		return x.Category
	}
	return transaction.BankTransactionCategory_BTC_UNSPECIFIED
}

func (x *UpdateTransactionPropertyRequest) GetType() transaction.BankTransactionType {
	if x != nil {
		return x.Type
	}
	return transaction.BankTransactionType_BTT_UNSPECIFIED
}

func (x *UpdateTransactionPropertyRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UpdateTransactionPropertyRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UpdateTransactionPropertyRequest) GetTransactionDate() *timestamp.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *UpdateTransactionPropertyRequest) GetCounterparty() string {
	if x != nil {
		return x.Counterparty
	}
	return ""
}

func (x *UpdateTransactionPropertyRequest) GetCounterpartyType() transaction.BankTransactionCounterpartyType {
	if x != nil {
		return x.CounterpartyType
	}
	return transaction.BankTransactionCounterpartyType_BTCT_UNSPECIFIED
}

func (x *UpdateTransactionPropertyRequest) GetInterestDate() string {
	if x != nil {
		return x.InterestDate
	}
	return ""
}

func (x *UpdateTransactionPropertyRequest) GetLegacyType() string {
	if x != nil {
		return x.LegacyType
	}
	return ""
}

func (x *UpdateTransactionPropertyRequest) GetLegacyCodeType() string {
	if x != nil {
		return x.LegacyCodeType
	}
	return ""
}

func (x *UpdateTransactionPropertyRequest) GetLegacySubtype() string {
	if x != nil {
		return x.LegacySubtype
	}
	return ""
}

func (x *UpdateTransactionPropertyRequest) GetLegacyTitle() string {
	if x != nil {
		return x.LegacyTitle
	}
	return ""
}

func (x *UpdateTransactionPropertyRequest) GetLegacyDescription() string {
	if x != nil {
		return x.LegacyDescription
	}
	return ""
}

func (x *UpdateTransactionPropertyRequest) GetLegacyNotes() string {
	if x != nil {
		return x.LegacyNotes
	}
	return ""
}

var File_transaction_bank_transaction_proto protoreflect.FileDescriptor

var file_transaction_bank_transaction_proto_rawDesc = []byte{
	0x0a, 0x22, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x61,
	0x6e, 0x6b, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x1a, 0x18, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x65,
	0x62, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x81, 0x0b, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x22, 0xfa, 0x08, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x62,
	0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x63, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x39, 0x0a,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x69, 0x74, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x22, 0xbc, 0x02, 0x0a, 0x0f, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22,
	0x98, 0x02, 0x0a, 0x0f, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63,
	0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a,
	0x0a, 0x10, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x68, 0x6f, 0x6c, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcf, 0x08, 0x0a, 0x1c, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x91, 0x02, 0x0a,
	0x1c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x22, 0xb3, 0x0c, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61,
	0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x67, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xde, 0x06, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4e, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x67, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_bank_transaction_proto_rawDescOnce sync.Once
	file_transaction_bank_transaction_proto_rawDescData = file_transaction_bank_transaction_proto_rawDesc
)

func file_transaction_bank_transaction_proto_rawDescGZIP() []byte {
	file_transaction_bank_transaction_proto_rawDescOnce.Do(func() {
		file_transaction_bank_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_bank_transaction_proto_rawDescData)
	})
	return file_transaction_bank_transaction_proto_rawDescData
}

var file_transaction_bank_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_transaction_bank_transaction_proto_goTypes = []interface{}{
	(*Transaction)(nil),                              // 0: wise.protobuf.transaction.bank.Transaction
	(*CardTransaction)(nil),                          // 1: wise.protobuf.transaction.bank.CardTransaction
	(*HoldTransaction)(nil),                          // 2: wise.protobuf.transaction.bank.HoldTransaction
	(*FullTransaction)(nil),                          // 3: wise.protobuf.transaction.bank.FullTransaction
	(*UpsertCardTransactionRequest)(nil),             // 4: wise.protobuf.transaction.bank.UpsertCardTransactionRequest
	(*UpsertHoldTransactionRequest)(nil),             // 5: wise.protobuf.transaction.bank.UpsertHoldTransactionRequest
	(*UpsertTransactionRequest)(nil),                 // 6: wise.protobuf.transaction.bank.UpsertTransactionRequest
	(*UpdateTransactionPropertyRequest)(nil),         // 7: wise.protobuf.transaction.bank.UpdateTransactionPropertyRequest
	(banking.PartnerName)(0),                         // 8: wise.protobuf.banking.PartnerName
	(transaction.BankTransactionStatus)(0),           // 9: wise.protobuf.transaction.BankTransactionStatus
	(transaction.BankTransactionCategory)(0),         // 10: wise.protobuf.transaction.BankTransactionCategory
	(transaction.BankTransactionType)(0),             // 11: wise.protobuf.transaction.BankTransactionType
	(*timestamp.Timestamp)(nil),                      // 12: google.protobuf.Timestamp
	(transaction.BankTransactionCounterpartyType)(0), // 13: wise.protobuf.transaction.BankTransactionCounterpartyType
	(banking.DebitCardNetwork)(0),                    // 14: wise.protobuf.banking.DebitCardNetwork
}
var file_transaction_bank_transaction_proto_depIdxs = []int32{
	8,  // 0: wise.protobuf.transaction.bank.Transaction.partner_name:type_name -> wise.protobuf.banking.PartnerName
	9,  // 1: wise.protobuf.transaction.bank.Transaction.status:type_name -> wise.protobuf.transaction.BankTransactionStatus
	10, // 2: wise.protobuf.transaction.bank.Transaction.category:type_name -> wise.protobuf.transaction.BankTransactionCategory
	11, // 3: wise.protobuf.transaction.bank.Transaction.type:type_name -> wise.protobuf.transaction.BankTransactionType
	12, // 4: wise.protobuf.transaction.bank.Transaction.transaction_date:type_name -> google.protobuf.Timestamp
	13, // 5: wise.protobuf.transaction.bank.Transaction.counterparty_type:type_name -> wise.protobuf.transaction.BankTransactionCounterpartyType
	12, // 6: wise.protobuf.transaction.bank.Transaction.created:type_name -> google.protobuf.Timestamp
	12, // 7: wise.protobuf.transaction.bank.Transaction.modified:type_name -> google.protobuf.Timestamp
	14, // 8: wise.protobuf.transaction.bank.CardTransaction.network:type_name -> wise.protobuf.banking.DebitCardNetwork
	12, // 9: wise.protobuf.transaction.bank.CardTransaction.auth_date:type_name -> google.protobuf.Timestamp
	12, // 10: wise.protobuf.transaction.bank.CardTransaction.local_date:type_name -> google.protobuf.Timestamp
	12, // 11: wise.protobuf.transaction.bank.CardTransaction.created:type_name -> google.protobuf.Timestamp
	12, // 12: wise.protobuf.transaction.bank.CardTransaction.modified:type_name -> google.protobuf.Timestamp
	12, // 13: wise.protobuf.transaction.bank.HoldTransaction.transaction_date:type_name -> google.protobuf.Timestamp
	12, // 14: wise.protobuf.transaction.bank.HoldTransaction.expiry_date:type_name -> google.protobuf.Timestamp
	12, // 15: wise.protobuf.transaction.bank.HoldTransaction.created:type_name -> google.protobuf.Timestamp
	12, // 16: wise.protobuf.transaction.bank.HoldTransaction.modified:type_name -> google.protobuf.Timestamp
	0,  // 17: wise.protobuf.transaction.bank.FullTransaction.transaction:type_name -> wise.protobuf.transaction.bank.Transaction
	1,  // 18: wise.protobuf.transaction.bank.FullTransaction.card_transaction:type_name -> wise.protobuf.transaction.bank.CardTransaction
	2,  // 19: wise.protobuf.transaction.bank.FullTransaction.hold_transaction:type_name -> wise.protobuf.transaction.bank.HoldTransaction
	14, // 20: wise.protobuf.transaction.bank.UpsertCardTransactionRequest.network:type_name -> wise.protobuf.banking.DebitCardNetwork
	12, // 21: wise.protobuf.transaction.bank.UpsertCardTransactionRequest.auth_date:type_name -> google.protobuf.Timestamp
	12, // 22: wise.protobuf.transaction.bank.UpsertCardTransactionRequest.local_date:type_name -> google.protobuf.Timestamp
	12, // 23: wise.protobuf.transaction.bank.UpsertCardTransactionRequest.created:type_name -> google.protobuf.Timestamp
	12, // 24: wise.protobuf.transaction.bank.UpsertHoldTransactionRequest.transaction_date:type_name -> google.protobuf.Timestamp
	12, // 25: wise.protobuf.transaction.bank.UpsertHoldTransactionRequest.expiry_date:type_name -> google.protobuf.Timestamp
	12, // 26: wise.protobuf.transaction.bank.UpsertHoldTransactionRequest.created:type_name -> google.protobuf.Timestamp
	8,  // 27: wise.protobuf.transaction.bank.UpsertTransactionRequest.partner_name:type_name -> wise.protobuf.banking.PartnerName
	9,  // 28: wise.protobuf.transaction.bank.UpsertTransactionRequest.status:type_name -> wise.protobuf.transaction.BankTransactionStatus
	10, // 29: wise.protobuf.transaction.bank.UpsertTransactionRequest.category:type_name -> wise.protobuf.transaction.BankTransactionCategory
	11, // 30: wise.protobuf.transaction.bank.UpsertTransactionRequest.type:type_name -> wise.protobuf.transaction.BankTransactionType
	12, // 31: wise.protobuf.transaction.bank.UpsertTransactionRequest.transaction_date:type_name -> google.protobuf.Timestamp
	13, // 32: wise.protobuf.transaction.bank.UpsertTransactionRequest.counterparty_type:type_name -> wise.protobuf.transaction.BankTransactionCounterpartyType
	12, // 33: wise.protobuf.transaction.bank.UpsertTransactionRequest.created:type_name -> google.protobuf.Timestamp
	4,  // 34: wise.protobuf.transaction.bank.UpsertTransactionRequest.card_request:type_name -> wise.protobuf.transaction.bank.UpsertCardTransactionRequest
	5,  // 35: wise.protobuf.transaction.bank.UpsertTransactionRequest.hold_request:type_name -> wise.protobuf.transaction.bank.UpsertHoldTransactionRequest
	9,  // 36: wise.protobuf.transaction.bank.UpdateTransactionPropertyRequest.status:type_name -> wise.protobuf.transaction.BankTransactionStatus
	10, // 37: wise.protobuf.transaction.bank.UpdateTransactionPropertyRequest.category:type_name -> wise.protobuf.transaction.BankTransactionCategory
	11, // 38: wise.protobuf.transaction.bank.UpdateTransactionPropertyRequest.type:type_name -> wise.protobuf.transaction.BankTransactionType
	12, // 39: wise.protobuf.transaction.bank.UpdateTransactionPropertyRequest.transaction_date:type_name -> google.protobuf.Timestamp
	13, // 40: wise.protobuf.transaction.bank.UpdateTransactionPropertyRequest.counterparty_type:type_name -> wise.protobuf.transaction.BankTransactionCounterpartyType
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_transaction_bank_transaction_proto_init() }
func file_transaction_bank_transaction_proto_init() {
	if File_transaction_bank_transaction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transaction_bank_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertCardTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_transaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertHoldTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_transaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_transaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTransactionPropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_bank_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transaction_bank_transaction_proto_goTypes,
		DependencyIndexes: file_transaction_bank_transaction_proto_depIdxs,
		MessageInfos:      file_transaction_bank_transaction_proto_msgTypes,
	}.Build()
	File_transaction_bank_transaction_proto = out.File
	file_transaction_bank_transaction_proto_rawDesc = nil
	file_transaction_bank_transaction_proto_goTypes = nil
	file_transaction_bank_transaction_proto_depIdxs = nil
}
