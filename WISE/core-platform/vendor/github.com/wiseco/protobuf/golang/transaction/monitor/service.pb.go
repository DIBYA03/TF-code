// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: transaction/monitor/service.proto

package monitor

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BankTransactionMonitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BankTransactionMonitorResponse) Reset() {
	*x = BankTransactionMonitorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_monitor_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankTransactionMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankTransactionMonitorResponse) ProtoMessage() {}

func (x *BankTransactionMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_monitor_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankTransactionMonitorResponse.ProtoReflect.Descriptor instead.
func (*BankTransactionMonitorResponse) Descriptor() ([]byte, []int) {
	return file_transaction_monitor_service_proto_rawDescGZIP(), []int{0}
}

func (x *BankTransactionMonitorResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BankTransactionMonitorResponse) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_transaction_monitor_service_proto protoreflect.FileDescriptor

var file_transaction_monitor_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x21, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x1a, 0x26, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x64, 0x65, 0x62, 0x69,
	0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a, 0x0a, 0x1e, 0x42, 0x61, 0x6e,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0xee, 0x05, 0x0a, 0x1d, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x32, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8c, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x94, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_monitor_service_proto_rawDescOnce sync.Once
	file_transaction_monitor_service_proto_rawDescData = file_transaction_monitor_service_proto_rawDesc
)

func file_transaction_monitor_service_proto_rawDescGZIP() []byte {
	file_transaction_monitor_service_proto_rawDescOnce.Do(func() {
		file_transaction_monitor_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_monitor_service_proto_rawDescData)
	})
	return file_transaction_monitor_service_proto_rawDescData
}

var file_transaction_monitor_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_transaction_monitor_service_proto_goTypes = []interface{}{
	(*BankTransactionMonitorResponse)(nil), // 0: wise.protobuf.transaction.monitor.BankTransactionMonitorResponse
	(*timestamp.Timestamp)(nil),            // 1: google.protobuf.Timestamp
	(*BusinessRequest)(nil),                // 2: wise.protobuf.transaction.monitor.BusinessRequest
	(*ConsumerRequest)(nil),                // 3: wise.protobuf.transaction.monitor.ConsumerRequest
	(*BankAccountRequest)(nil),             // 4: wise.protobuf.transaction.monitor.BankAccountRequest
	(*DebitCardRequest)(nil),               // 5: wise.protobuf.transaction.monitor.DebitCardRequest
	(*BankTransactionRequest)(nil),         // 6: wise.protobuf.transaction.monitor.BankTransactionRequest
}
var file_transaction_monitor_service_proto_depIdxs = []int32{
	1, // 0: wise.protobuf.transaction.monitor.BankTransactionMonitorResponse.timestamp:type_name -> google.protobuf.Timestamp
	2, // 1: wise.protobuf.transaction.monitor.BankTransactionMonitorService.AddUpdateBusiness:input_type -> wise.protobuf.transaction.monitor.BusinessRequest
	3, // 2: wise.protobuf.transaction.monitor.BankTransactionMonitorService.AddUpdateConsumer:input_type -> wise.protobuf.transaction.monitor.ConsumerRequest
	4, // 3: wise.protobuf.transaction.monitor.BankTransactionMonitorService.AddUpdateAccount:input_type -> wise.protobuf.transaction.monitor.BankAccountRequest
	5, // 4: wise.protobuf.transaction.monitor.BankTransactionMonitorService.AddUpdateDebitCard:input_type -> wise.protobuf.transaction.monitor.DebitCardRequest
	6, // 5: wise.protobuf.transaction.monitor.BankTransactionMonitorService.AddUpdateTransaction:input_type -> wise.protobuf.transaction.monitor.BankTransactionRequest
	0, // 6: wise.protobuf.transaction.monitor.BankTransactionMonitorService.AddUpdateBusiness:output_type -> wise.protobuf.transaction.monitor.BankTransactionMonitorResponse
	0, // 7: wise.protobuf.transaction.monitor.BankTransactionMonitorService.AddUpdateConsumer:output_type -> wise.protobuf.transaction.monitor.BankTransactionMonitorResponse
	0, // 8: wise.protobuf.transaction.monitor.BankTransactionMonitorService.AddUpdateAccount:output_type -> wise.protobuf.transaction.monitor.BankTransactionMonitorResponse
	0, // 9: wise.protobuf.transaction.monitor.BankTransactionMonitorService.AddUpdateDebitCard:output_type -> wise.protobuf.transaction.monitor.BankTransactionMonitorResponse
	0, // 10: wise.protobuf.transaction.monitor.BankTransactionMonitorService.AddUpdateTransaction:output_type -> wise.protobuf.transaction.monitor.BankTransactionMonitorResponse
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_transaction_monitor_service_proto_init() }
func file_transaction_monitor_service_proto_init() {
	if File_transaction_monitor_service_proto != nil {
		return
	}
	file_transaction_monitor_bank_account_proto_init()
	file_transaction_monitor_business_proto_init()
	file_transaction_monitor_consumer_proto_init()
	file_transaction_monitor_debit_card_proto_init()
	file_transaction_monitor_bank_transaction_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_transaction_monitor_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankTransactionMonitorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_monitor_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transaction_monitor_service_proto_goTypes,
		DependencyIndexes: file_transaction_monitor_service_proto_depIdxs,
		MessageInfos:      file_transaction_monitor_service_proto_msgTypes,
	}.Build()
	File_transaction_monitor_service_proto = out.File
	file_transaction_monitor_service_proto_rawDesc = nil
	file_transaction_monitor_service_proto_goTypes = nil
	file_transaction_monitor_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BankTransactionMonitorServiceClient is the client API for BankTransactionMonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BankTransactionMonitorServiceClient interface {
	// Business entity
	AddUpdateBusiness(ctx context.Context, in *BusinessRequest, opts ...grpc.CallOption) (*BankTransactionMonitorResponse, error)
	// Consumer entity
	AddUpdateConsumer(ctx context.Context, in *ConsumerRequest, opts ...grpc.CallOption) (*BankTransactionMonitorResponse, error)
	// Accounts (depository and cards)
	AddUpdateAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*BankTransactionMonitorResponse, error)
	// Debit Card
	AddUpdateDebitCard(ctx context.Context, in *DebitCardRequest, opts ...grpc.CallOption) (*BankTransactionMonitorResponse, error)
	// Transactions
	AddUpdateTransaction(ctx context.Context, in *BankTransactionRequest, opts ...grpc.CallOption) (*BankTransactionMonitorResponse, error)
}

type bankTransactionMonitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankTransactionMonitorServiceClient(cc grpc.ClientConnInterface) BankTransactionMonitorServiceClient {
	return &bankTransactionMonitorServiceClient{cc}
}

func (c *bankTransactionMonitorServiceClient) AddUpdateBusiness(ctx context.Context, in *BusinessRequest, opts ...grpc.CallOption) (*BankTransactionMonitorResponse, error) {
	out := new(BankTransactionMonitorResponse)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.monitor.BankTransactionMonitorService/AddUpdateBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankTransactionMonitorServiceClient) AddUpdateConsumer(ctx context.Context, in *ConsumerRequest, opts ...grpc.CallOption) (*BankTransactionMonitorResponse, error) {
	out := new(BankTransactionMonitorResponse)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.monitor.BankTransactionMonitorService/AddUpdateConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankTransactionMonitorServiceClient) AddUpdateAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*BankTransactionMonitorResponse, error) {
	out := new(BankTransactionMonitorResponse)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.monitor.BankTransactionMonitorService/AddUpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankTransactionMonitorServiceClient) AddUpdateDebitCard(ctx context.Context, in *DebitCardRequest, opts ...grpc.CallOption) (*BankTransactionMonitorResponse, error) {
	out := new(BankTransactionMonitorResponse)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.monitor.BankTransactionMonitorService/AddUpdateDebitCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankTransactionMonitorServiceClient) AddUpdateTransaction(ctx context.Context, in *BankTransactionRequest, opts ...grpc.CallOption) (*BankTransactionMonitorResponse, error) {
	out := new(BankTransactionMonitorResponse)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.monitor.BankTransactionMonitorService/AddUpdateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankTransactionMonitorServiceServer is the server API for BankTransactionMonitorService service.
type BankTransactionMonitorServiceServer interface {
	// Business entity
	AddUpdateBusiness(context.Context, *BusinessRequest) (*BankTransactionMonitorResponse, error)
	// Consumer entity
	AddUpdateConsumer(context.Context, *ConsumerRequest) (*BankTransactionMonitorResponse, error)
	// Accounts (depository and cards)
	AddUpdateAccount(context.Context, *BankAccountRequest) (*BankTransactionMonitorResponse, error)
	// Debit Card
	AddUpdateDebitCard(context.Context, *DebitCardRequest) (*BankTransactionMonitorResponse, error)
	// Transactions
	AddUpdateTransaction(context.Context, *BankTransactionRequest) (*BankTransactionMonitorResponse, error)
}

// UnimplementedBankTransactionMonitorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBankTransactionMonitorServiceServer struct {
}

func (*UnimplementedBankTransactionMonitorServiceServer) AddUpdateBusiness(context.Context, *BusinessRequest) (*BankTransactionMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUpdateBusiness not implemented")
}
func (*UnimplementedBankTransactionMonitorServiceServer) AddUpdateConsumer(context.Context, *ConsumerRequest) (*BankTransactionMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUpdateConsumer not implemented")
}
func (*UnimplementedBankTransactionMonitorServiceServer) AddUpdateAccount(context.Context, *BankAccountRequest) (*BankTransactionMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUpdateAccount not implemented")
}
func (*UnimplementedBankTransactionMonitorServiceServer) AddUpdateDebitCard(context.Context, *DebitCardRequest) (*BankTransactionMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUpdateDebitCard not implemented")
}
func (*UnimplementedBankTransactionMonitorServiceServer) AddUpdateTransaction(context.Context, *BankTransactionRequest) (*BankTransactionMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUpdateTransaction not implemented")
}

func RegisterBankTransactionMonitorServiceServer(s *grpc.Server, srv BankTransactionMonitorServiceServer) {
	s.RegisterService(&_BankTransactionMonitorService_serviceDesc, srv)
}

func _BankTransactionMonitorService_AddUpdateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankTransactionMonitorServiceServer).AddUpdateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.monitor.BankTransactionMonitorService/AddUpdateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankTransactionMonitorServiceServer).AddUpdateBusiness(ctx, req.(*BusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankTransactionMonitorService_AddUpdateConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankTransactionMonitorServiceServer).AddUpdateConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.monitor.BankTransactionMonitorService/AddUpdateConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankTransactionMonitorServiceServer).AddUpdateConsumer(ctx, req.(*ConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankTransactionMonitorService_AddUpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankTransactionMonitorServiceServer).AddUpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.monitor.BankTransactionMonitorService/AddUpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankTransactionMonitorServiceServer).AddUpdateAccount(ctx, req.(*BankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankTransactionMonitorService_AddUpdateDebitCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebitCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankTransactionMonitorServiceServer).AddUpdateDebitCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.monitor.BankTransactionMonitorService/AddUpdateDebitCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankTransactionMonitorServiceServer).AddUpdateDebitCard(ctx, req.(*DebitCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankTransactionMonitorService_AddUpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankTransactionMonitorServiceServer).AddUpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.monitor.BankTransactionMonitorService/AddUpdateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankTransactionMonitorServiceServer).AddUpdateTransaction(ctx, req.(*BankTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BankTransactionMonitorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wise.protobuf.transaction.monitor.BankTransactionMonitorService",
	HandlerType: (*BankTransactionMonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUpdateBusiness",
			Handler:    _BankTransactionMonitorService_AddUpdateBusiness_Handler,
		},
		{
			MethodName: "AddUpdateConsumer",
			Handler:    _BankTransactionMonitorService_AddUpdateConsumer_Handler,
		},
		{
			MethodName: "AddUpdateAccount",
			Handler:    _BankTransactionMonitorService_AddUpdateAccount_Handler,
		},
		{
			MethodName: "AddUpdateDebitCard",
			Handler:    _BankTransactionMonitorService_AddUpdateDebitCard_Handler,
		},
		{
			MethodName: "AddUpdateTransaction",
			Handler:    _BankTransactionMonitorService_AddUpdateTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/monitor/service.proto",
}
