// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: transaction/bank_transaction.proto

package transaction

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BankTransactionStatus int32

const (
	BankTransactionStatus_BTS_UNSPECIFIED BankTransactionStatus = 0
	// Hold set
	BankTransactionStatus_BTS_HOLD_SET BankTransactionStatus = 100
	// Hold released
	BankTransactionStatus_BTS_HOLD_RELEASED BankTransactionStatus = 101
	// Card authorized
	BankTransactionStatus_BTS_CARD_AUTHORIZED BankTransactionStatus = 200
	// Card declined
	BankTransactionStatus_BTS_CARD_AUTH_DECLINED BankTransactionStatus = 201
	// Card reversed
	BankTransactionStatus_BTS_CARD_AUTH_REVERSED BankTransactionStatus = 202
	// Card posted
	BankTransactionStatus_BTS_CARD_POSTED BankTransactionStatus = 203
	// Transfer in validation
	BankTransactionStatus_BTS_VALIDATION BankTransactionStatus = 300
	// Transfer in review
	BankTransactionStatus_BTS_REVIEW BankTransactionStatus = 301
	// Transfer declined
	BankTransactionStatus_BTS_SYSTEM_DECLINED BankTransactionStatus = 302
	// Transfer declined by agent
	BankTransactionStatus_BTS_AGENT_DECLINED BankTransactionStatus = 303
	// Transfer declined by bank
	BankTransactionStatus_BTS_BANK_DECLINED BankTransactionStatus = 304
	// Transfer canceled by agent
	BankTransactionStatus_BTS_AGENT_CANCELED BankTransactionStatus = 305
	// Transfer canceled by customer
	BankTransactionStatus_BTS_CUSTOMER_CANCELED BankTransactionStatus = 306
	// Transfer canceled by bank
	BankTransactionStatus_BTS_BANK_CANCELED BankTransactionStatus = 307
	// Transfer processing
	BankTransactionStatus_BTS_BANK_PROCESSING BankTransactionStatus = 308
	// Non-card posted
	BankTransactionStatus_BTS_NONCARD_POSTED BankTransactionStatus = 309
	// Transfer error
	BankTransactionStatus_BTS_BANK_TRANSFER_ERROR BankTransactionStatus = 310
)

// Enum value maps for BankTransactionStatus.
var (
	BankTransactionStatus_name = map[int32]string{
		0:   "BTS_UNSPECIFIED",
		100: "BTS_HOLD_SET",
		101: "BTS_HOLD_RELEASED",
		200: "BTS_CARD_AUTHORIZED",
		201: "BTS_CARD_AUTH_DECLINED",
		202: "BTS_CARD_AUTH_REVERSED",
		203: "BTS_CARD_POSTED",
		300: "BTS_VALIDATION",
		301: "BTS_REVIEW",
		302: "BTS_SYSTEM_DECLINED",
		303: "BTS_AGENT_DECLINED",
		304: "BTS_BANK_DECLINED",
		305: "BTS_AGENT_CANCELED",
		306: "BTS_CUSTOMER_CANCELED",
		307: "BTS_BANK_CANCELED",
		308: "BTS_BANK_PROCESSING",
		309: "BTS_NONCARD_POSTED",
		310: "BTS_BANK_TRANSFER_ERROR",
	}
	BankTransactionStatus_value = map[string]int32{
		"BTS_UNSPECIFIED":         0,
		"BTS_HOLD_SET":            100,
		"BTS_HOLD_RELEASED":       101,
		"BTS_CARD_AUTHORIZED":     200,
		"BTS_CARD_AUTH_DECLINED":  201,
		"BTS_CARD_AUTH_REVERSED":  202,
		"BTS_CARD_POSTED":         203,
		"BTS_VALIDATION":          300,
		"BTS_REVIEW":              301,
		"BTS_SYSTEM_DECLINED":     302,
		"BTS_AGENT_DECLINED":      303,
		"BTS_BANK_DECLINED":       304,
		"BTS_AGENT_CANCELED":      305,
		"BTS_CUSTOMER_CANCELED":   306,
		"BTS_BANK_CANCELED":       307,
		"BTS_BANK_PROCESSING":     308,
		"BTS_NONCARD_POSTED":      309,
		"BTS_BANK_TRANSFER_ERROR": 310,
	}
)

func (x BankTransactionStatus) Enum() *BankTransactionStatus {
	p := new(BankTransactionStatus)
	*p = x
	return p
}

func (x BankTransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BankTransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_bank_transaction_proto_enumTypes[0].Descriptor()
}

func (BankTransactionStatus) Type() protoreflect.EnumType {
	return &file_transaction_bank_transaction_proto_enumTypes[0]
}

func (x BankTransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BankTransactionStatus.Descriptor instead.
func (BankTransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_transaction_bank_transaction_proto_rawDescGZIP(), []int{0}
}

type BankTransactionCategory int32

const (
	BankTransactionCategory_BTC_UNSPECIFIED  BankTransactionCategory = 0
	BankTransactionCategory_BTC_ACH          BankTransactionCategory = 100
	BankTransactionCategory_BTC_ADJUSTMENT   BankTransactionCategory = 101
	BankTransactionCategory_BTC_ATM          BankTransactionCategory = 102
	BankTransactionCategory_BTC_CHECK        BankTransactionCategory = 103
	BankTransactionCategory_BTC_DEPOSIT      BankTransactionCategory = 104
	BankTransactionCategory_BTC_FEE          BankTransactionCategory = 105
	BankTransactionCategory_BTC_OTHER_CREDIT BankTransactionCategory = 106
	BankTransactionCategory_BTC_OTHER_DEBIT  BankTransactionCategory = 107
	BankTransactionCategory_BTC_PURCHASE     BankTransactionCategory = 108
	BankTransactionCategory_BTC_REFUND       BankTransactionCategory = 109
	BankTransactionCategory_BTC_RETURN       BankTransactionCategory = 110
	BankTransactionCategory_BTC_REVERSAL     BankTransactionCategory = 111
	BankTransactionCategory_BTC_INTRABANK    BankTransactionCategory = 112
	BankTransactionCategory_BTC_VISA_CREDIT  BankTransactionCategory = 113
	BankTransactionCategory_BTC_WITHDRAWAL   BankTransactionCategory = 114
	BankTransactionCategory_BTC_OTHER        BankTransactionCategory = 115
)

// Enum value maps for BankTransactionCategory.
var (
	BankTransactionCategory_name = map[int32]string{
		0:   "BTC_UNSPECIFIED",
		100: "BTC_ACH",
		101: "BTC_ADJUSTMENT",
		102: "BTC_ATM",
		103: "BTC_CHECK",
		104: "BTC_DEPOSIT",
		105: "BTC_FEE",
		106: "BTC_OTHER_CREDIT",
		107: "BTC_OTHER_DEBIT",
		108: "BTC_PURCHASE",
		109: "BTC_REFUND",
		110: "BTC_RETURN",
		111: "BTC_REVERSAL",
		112: "BTC_INTRABANK",
		113: "BTC_VISA_CREDIT",
		114: "BTC_WITHDRAWAL",
		115: "BTC_OTHER",
	}
	BankTransactionCategory_value = map[string]int32{
		"BTC_UNSPECIFIED":  0,
		"BTC_ACH":          100,
		"BTC_ADJUSTMENT":   101,
		"BTC_ATM":          102,
		"BTC_CHECK":        103,
		"BTC_DEPOSIT":      104,
		"BTC_FEE":          105,
		"BTC_OTHER_CREDIT": 106,
		"BTC_OTHER_DEBIT":  107,
		"BTC_PURCHASE":     108,
		"BTC_REFUND":       109,
		"BTC_RETURN":       110,
		"BTC_REVERSAL":     111,
		"BTC_INTRABANK":    112,
		"BTC_VISA_CREDIT":  113,
		"BTC_WITHDRAWAL":   114,
		"BTC_OTHER":        115,
	}
)

func (x BankTransactionCategory) Enum() *BankTransactionCategory {
	p := new(BankTransactionCategory)
	*p = x
	return p
}

func (x BankTransactionCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BankTransactionCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_bank_transaction_proto_enumTypes[1].Descriptor()
}

func (BankTransactionCategory) Type() protoreflect.EnumType {
	return &file_transaction_bank_transaction_proto_enumTypes[1]
}

func (x BankTransactionCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BankTransactionCategory.Descriptor instead.
func (BankTransactionCategory) EnumDescriptor() ([]byte, []int) {
	return file_transaction_bank_transaction_proto_rawDescGZIP(), []int{1}
}

type BankTransactionType int32

const (
	BankTransactionType_BTT_UNSPECIFIED BankTransactionType = 0
	// Credits
	BankTransactionType_BTT_ORIGINATION                 BankTransactionType = 100
	BankTransactionType_BTT_INTEREST_CREDIT             BankTransactionType = 101
	BankTransactionType_BTT_INTRABANK_CREDIT            BankTransactionType = 102
	BankTransactionType_BTT_ACH_CREDIT                  BankTransactionType = 103
	BankTransactionType_BTT_WIRE_CREDIT                 BankTransactionType = 104
	BankTransactionType_BTT_CARD_PULL_CREDIT            BankTransactionType = 105
	BankTransactionType_BTT_CARD_PUSH_CREDIT            BankTransactionType = 106
	BankTransactionType_BTT_CARD_PAYMENT_READER_CREDIT  BankTransactionType = 107
	BankTransactionType_BTT_CARD_PAYMENT_ONLINE_CREDIT  BankTransactionType = 108
	BankTransactionType_BTT_INTRABANK_ONLINE_CREDIT     BankTransactionType = 109
	BankTransactionType_BTT_ACH_ONLINE_CREDIT           BankTransactionType = 110
	BankTransactionType_BTT_CHECK_CREDIT                BankTransactionType = 111
	BankTransactionType_BTT_CHECK_ONLINE_CREDIT         BankTransactionType = 112
	BankTransactionType_BTT_CARD_PURCHASE_REFUND_CREDIT BankTransactionType = 113
	BankTransactionType_BTT_PROMO_CREDIT                BankTransactionType = 114
	BankTransactionType_BTT_OTHER_CREDIT                BankTransactionType = 115
	BankTransactionType_BTT_DEPOSIT_CREDIT              BankTransactionType = 116
	BankTransactionType_BTT_HOLD_CREDIT                 BankTransactionType = 117
	// Debits
	BankTransactionType_BTT_CARD_PURCHASE_DEBIT        BankTransactionType = 200
	BankTransactionType_BTT_CARD_PURCHASE_ONLINE_DEBIT BankTransactionType = 201
	BankTransactionType_BTT_INTRABANK_DEBIT            BankTransactionType = 202
	BankTransactionType_BTT_ACH_DEBIT                  BankTransactionType = 203
	BankTransactionType_BTT_WIRE_DEBIT                 BankTransactionType = 204
	BankTransactionType_BTT_CARD_ATM_DEBIT             BankTransactionType = 205
	BankTransactionType_BTT_CARD_PUSH_DEBIT            BankTransactionType = 206
	BankTransactionType_BTT_CARD_PULL_DEBIT            BankTransactionType = 207
	BankTransactionType_BTT_CHECK_DEBIT                BankTransactionType = 208
	BankTransactionType_BTT_CARD_PAYMENT_REFUND_DEBIT  BankTransactionType = 209
	BankTransactionType_BTT_FEE_DEBIT                  BankTransactionType = 210
	BankTransactionType_BTT_OTHER_DEBIT                BankTransactionType = 211
	// Clearing
	BankTransactionType_BTT_CLEARING_CREDIT BankTransactionType = 300
	BankTransactionType_BTT_CLEARING_DEBIT  BankTransactionType = 301
)

// Enum value maps for BankTransactionType.
var (
	BankTransactionType_name = map[int32]string{
		0:   "BTT_UNSPECIFIED",
		100: "BTT_ORIGINATION",
		101: "BTT_INTEREST_CREDIT",
		102: "BTT_INTRABANK_CREDIT",
		103: "BTT_ACH_CREDIT",
		104: "BTT_WIRE_CREDIT",
		105: "BTT_CARD_PULL_CREDIT",
		106: "BTT_CARD_PUSH_CREDIT",
		107: "BTT_CARD_PAYMENT_READER_CREDIT",
		108: "BTT_CARD_PAYMENT_ONLINE_CREDIT",
		109: "BTT_INTRABANK_ONLINE_CREDIT",
		110: "BTT_ACH_ONLINE_CREDIT",
		111: "BTT_CHECK_CREDIT",
		112: "BTT_CHECK_ONLINE_CREDIT",
		113: "BTT_CARD_PURCHASE_REFUND_CREDIT",
		114: "BTT_PROMO_CREDIT",
		115: "BTT_OTHER_CREDIT",
		116: "BTT_DEPOSIT_CREDIT",
		117: "BTT_HOLD_CREDIT",
		200: "BTT_CARD_PURCHASE_DEBIT",
		201: "BTT_CARD_PURCHASE_ONLINE_DEBIT",
		202: "BTT_INTRABANK_DEBIT",
		203: "BTT_ACH_DEBIT",
		204: "BTT_WIRE_DEBIT",
		205: "BTT_CARD_ATM_DEBIT",
		206: "BTT_CARD_PUSH_DEBIT",
		207: "BTT_CARD_PULL_DEBIT",
		208: "BTT_CHECK_DEBIT",
		209: "BTT_CARD_PAYMENT_REFUND_DEBIT",
		210: "BTT_FEE_DEBIT",
		211: "BTT_OTHER_DEBIT",
		300: "BTT_CLEARING_CREDIT",
		301: "BTT_CLEARING_DEBIT",
	}
	BankTransactionType_value = map[string]int32{
		"BTT_UNSPECIFIED":                 0,
		"BTT_ORIGINATION":                 100,
		"BTT_INTEREST_CREDIT":             101,
		"BTT_INTRABANK_CREDIT":            102,
		"BTT_ACH_CREDIT":                  103,
		"BTT_WIRE_CREDIT":                 104,
		"BTT_CARD_PULL_CREDIT":            105,
		"BTT_CARD_PUSH_CREDIT":            106,
		"BTT_CARD_PAYMENT_READER_CREDIT":  107,
		"BTT_CARD_PAYMENT_ONLINE_CREDIT":  108,
		"BTT_INTRABANK_ONLINE_CREDIT":     109,
		"BTT_ACH_ONLINE_CREDIT":           110,
		"BTT_CHECK_CREDIT":                111,
		"BTT_CHECK_ONLINE_CREDIT":         112,
		"BTT_CARD_PURCHASE_REFUND_CREDIT": 113,
		"BTT_PROMO_CREDIT":                114,
		"BTT_OTHER_CREDIT":                115,
		"BTT_DEPOSIT_CREDIT":              116,
		"BTT_HOLD_CREDIT":                 117,
		"BTT_CARD_PURCHASE_DEBIT":         200,
		"BTT_CARD_PURCHASE_ONLINE_DEBIT":  201,
		"BTT_INTRABANK_DEBIT":             202,
		"BTT_ACH_DEBIT":                   203,
		"BTT_WIRE_DEBIT":                  204,
		"BTT_CARD_ATM_DEBIT":              205,
		"BTT_CARD_PUSH_DEBIT":             206,
		"BTT_CARD_PULL_DEBIT":             207,
		"BTT_CHECK_DEBIT":                 208,
		"BTT_CARD_PAYMENT_REFUND_DEBIT":   209,
		"BTT_FEE_DEBIT":                   210,
		"BTT_OTHER_DEBIT":                 211,
		"BTT_CLEARING_CREDIT":             300,
		"BTT_CLEARING_DEBIT":              301,
	}
)

func (x BankTransactionType) Enum() *BankTransactionType {
	p := new(BankTransactionType)
	*p = x
	return p
}

func (x BankTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BankTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_bank_transaction_proto_enumTypes[2].Descriptor()
}

func (BankTransactionType) Type() protoreflect.EnumType {
	return &file_transaction_bank_transaction_proto_enumTypes[2]
}

func (x BankTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BankTransactionType.Descriptor instead.
func (BankTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_bank_transaction_proto_rawDescGZIP(), []int{2}
}

type BankTransactionCounterpartyType int32

const (
	BankTransactionCounterpartyType_BTCT_UNSPECIFIED BankTransactionCounterpartyType = 0
	// Shopping
	BankTransactionCounterpartyType_BTCT_SHOPPING_SHOPIFY_PAYOUT BankTransactionCounterpartyType = 100
	BankTransactionCounterpartyType_BTCT_SHOPPING_SHOPIFY_REFUND BankTransactionCounterpartyType = 101
	// Payout/Payments Credits
	BankTransactionCounterpartyType_BTCT_ACCOUNT_CLOSURE_CREDIT     BankTransactionCounterpartyType = 200
	BankTransactionCounterpartyType_BTCT_STRIPE_PAYOUT_CREDIT       BankTransactionCounterpartyType = 201
	BankTransactionCounterpartyType_BTCT_CARD_PAYMENT_REFUND_CREDIT BankTransactionCounterpartyType = 202
	// Payments Debit
	BankTransactionCounterpartyType_BTCT_ACCOUNT_CLOSURE_DEBIT BankTransactionCounterpartyType = 300
	BankTransactionCounterpartyType_BTCT_INTEREST_PAYOUT_DEBIT BankTransactionCounterpartyType = 301
	BankTransactionCounterpartyType_BTCT_PROMO_DEBIT           BankTransactionCounterpartyType = 302
	BankTransactionCounterpartyType_BTCT_CARD_PAYMENT_DEBIT    BankTransactionCounterpartyType = 303
)

// Enum value maps for BankTransactionCounterpartyType.
var (
	BankTransactionCounterpartyType_name = map[int32]string{
		0:   "BTCT_UNSPECIFIED",
		100: "BTCT_SHOPPING_SHOPIFY_PAYOUT",
		101: "BTCT_SHOPPING_SHOPIFY_REFUND",
		200: "BTCT_ACCOUNT_CLOSURE_CREDIT",
		201: "BTCT_STRIPE_PAYOUT_CREDIT",
		202: "BTCT_CARD_PAYMENT_REFUND_CREDIT",
		300: "BTCT_ACCOUNT_CLOSURE_DEBIT",
		301: "BTCT_INTEREST_PAYOUT_DEBIT",
		302: "BTCT_PROMO_DEBIT",
		303: "BTCT_CARD_PAYMENT_DEBIT",
	}
	BankTransactionCounterpartyType_value = map[string]int32{
		"BTCT_UNSPECIFIED":                0,
		"BTCT_SHOPPING_SHOPIFY_PAYOUT":    100,
		"BTCT_SHOPPING_SHOPIFY_REFUND":    101,
		"BTCT_ACCOUNT_CLOSURE_CREDIT":     200,
		"BTCT_STRIPE_PAYOUT_CREDIT":       201,
		"BTCT_CARD_PAYMENT_REFUND_CREDIT": 202,
		"BTCT_ACCOUNT_CLOSURE_DEBIT":      300,
		"BTCT_INTEREST_PAYOUT_DEBIT":      301,
		"BTCT_PROMO_DEBIT":                302,
		"BTCT_CARD_PAYMENT_DEBIT":         303,
	}
)

func (x BankTransactionCounterpartyType) Enum() *BankTransactionCounterpartyType {
	p := new(BankTransactionCounterpartyType)
	*p = x
	return p
}

func (x BankTransactionCounterpartyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BankTransactionCounterpartyType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_bank_transaction_proto_enumTypes[3].Descriptor()
}

func (BankTransactionCounterpartyType) Type() protoreflect.EnumType {
	return &file_transaction_bank_transaction_proto_enumTypes[3]
}

func (x BankTransactionCounterpartyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BankTransactionCounterpartyType.Descriptor instead.
func (BankTransactionCounterpartyType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_bank_transaction_proto_rawDescGZIP(), []int{3}
}

var File_transaction_bank_transaction_proto protoreflect.FileDescriptor

var file_transaction_bank_transaction_proto_rawDesc = []byte{
	0x0a, 0x22, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a,
	0xce, 0x03, 0x0a, 0x15, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x54, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x42, 0x54, 0x53, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x64,
	0x12, 0x15, 0x0a, 0x11, 0x42, 0x54, 0x53, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x4c,
	0x45, 0x41, 0x53, 0x45, 0x44, 0x10, 0x65, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x54, 0x53, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0xc8,
	0x01, 0x12, 0x1b, 0x0a, 0x16, 0x42, 0x54, 0x53, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0xc9, 0x01, 0x12, 0x1b,
	0x0a, 0x16, 0x42, 0x54, 0x53, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x44, 0x10, 0xca, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x42,
	0x54, 0x53, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0xcb,
	0x01, 0x12, 0x13, 0x0a, 0x0e, 0x42, 0x54, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0xac, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x42, 0x54, 0x53, 0x5f, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x10, 0xad, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x54, 0x53, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0xae,
	0x02, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x54, 0x53, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x44,
	0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0xaf, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x54,
	0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0xb0, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x54, 0x53, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0xb1, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x42,
	0x54, 0x53, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x45, 0x44, 0x10, 0xb2, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x54, 0x53, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0xb3, 0x02, 0x12,
	0x18, 0x0a, 0x13, 0x42, 0x54, 0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xb4, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x54, 0x53,
	0x5f, 0x4e, 0x4f, 0x4e, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10,
	0xb5, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x54, 0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xb6, 0x02,
	0x2a, 0xc3, 0x02, 0x0a, 0x17, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x0f,
	0x42, 0x54, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x54, 0x43, 0x5f, 0x41, 0x43, 0x48, 0x10, 0x64, 0x12, 0x12,
	0x0a, 0x0e, 0x42, 0x54, 0x43, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x54, 0x43, 0x5f, 0x41, 0x54, 0x4d, 0x10, 0x66, 0x12,
	0x0d, 0x0a, 0x09, 0x42, 0x54, 0x43, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x67, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x54, 0x43, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x68, 0x12,
	0x0b, 0x0a, 0x07, 0x42, 0x54, 0x43, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x69, 0x12, 0x14, 0x0a, 0x10,
	0x42, 0x54, 0x43, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x10, 0x6a, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x54, 0x43, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0x6b, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x54, 0x43, 0x5f, 0x50,
	0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x54, 0x43,
	0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x54, 0x43,
	0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x54, 0x43,
	0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x41, 0x4c, 0x10, 0x6f, 0x12, 0x11, 0x0a, 0x0d, 0x42,
	0x54, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x70, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x54, 0x43, 0x5f, 0x56, 0x49, 0x53, 0x41, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49,
	0x54, 0x10, 0x71, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x54, 0x43, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44,
	0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x54, 0x43, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x73, 0x2a, 0xee, 0x06, 0x0a, 0x13, 0x42, 0x61, 0x6e, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x54, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x54, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x54, 0x54, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x54, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x42, 0x41,
	0x4e, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x66, 0x12, 0x12, 0x0a, 0x0e, 0x42,
	0x54, 0x54, 0x5f, 0x41, 0x43, 0x48, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x67, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x54, 0x54, 0x5f, 0x57, 0x49, 0x52, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44,
	0x49, 0x54, 0x10, 0x68, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x54, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x69, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x54, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x6a, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x54, 0x54, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x6b, 0x12, 0x22, 0x0a, 0x1e,
	0x42, 0x54, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x6c,
	0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x54, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10,
	0x6d, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x54, 0x54, 0x5f, 0x41, 0x43, 0x48, 0x5f, 0x4f, 0x4e, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x6e, 0x12, 0x14, 0x0a, 0x10,
	0x42, 0x54, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x10, 0x6f, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x54, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x70, 0x12,
	0x23, 0x0a, 0x1f, 0x42, 0x54, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x55, 0x52, 0x43,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44,
	0x49, 0x54, 0x10, 0x71, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x54, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4d,
	0x4f, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x54,
	0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x42, 0x54, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x54, 0x54, 0x5f,
	0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x75, 0x12, 0x1c, 0x0a,
	0x17, 0x42, 0x54, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0xc8, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x42,
	0x54, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0xc9, 0x01,
	0x12, 0x18, 0x0a, 0x13, 0x42, 0x54, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0xca, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x42, 0x54,
	0x54, 0x5f, 0x41, 0x43, 0x48, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0xcb, 0x01, 0x12, 0x13,
	0x0a, 0x0e, 0x42, 0x54, 0x54, 0x5f, 0x57, 0x49, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54,
	0x10, 0xcc, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x54, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x41, 0x54, 0x4d, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0xcd, 0x01, 0x12, 0x18, 0x0a, 0x13,
	0x42, 0x54, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x44, 0x45,
	0x42, 0x49, 0x54, 0x10, 0xce, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x54, 0x54, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0xcf, 0x01,
	0x12, 0x14, 0x0a, 0x0f, 0x42, 0x54, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x45,
	0x42, 0x49, 0x54, 0x10, 0xd0, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x42, 0x54, 0x54, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e,
	0x44, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0xd1, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x42, 0x54,
	0x54, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0xd2, 0x01, 0x12, 0x14,
	0x0a, 0x0f, 0x42, 0x54, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x42, 0x49,
	0x54, 0x10, 0xd3, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x54, 0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0xac, 0x02, 0x12, 0x17,
	0x0a, 0x12, 0x42, 0x54, 0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x45, 0x42, 0x49, 0x54, 0x10, 0xad, 0x02, 0x2a, 0xda, 0x02, 0x0a, 0x1f, 0x42, 0x61, 0x6e, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x42,
	0x54, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x54, 0x43, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x50, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55,
	0x54, 0x10, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x54, 0x43, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x46,
	0x55, 0x4e, 0x44, 0x10, 0x65, 0x12, 0x20, 0x0a, 0x1b, 0x42, 0x54, 0x43, 0x54, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x44, 0x49, 0x54, 0x10, 0xc8, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x42, 0x54, 0x43, 0x54, 0x5f,
	0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x52,
	0x45, 0x44, 0x49, 0x54, 0x10, 0xc9, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x42, 0x54, 0x43, 0x54, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46,
	0x55, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0xca, 0x01, 0x12, 0x1f, 0x0a,
	0x1a, 0x42, 0x54, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0xac, 0x02, 0x12, 0x1f,
	0x0a, 0x1a, 0x42, 0x54, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f,
	0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0xad, 0x02, 0x12,
	0x15, 0x0a, 0x10, 0x42, 0x54, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x5f, 0x44, 0x45,
	0x42, 0x49, 0x54, 0x10, 0xae, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x54, 0x43, 0x54, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x49,
	0x54, 0x10, 0xaf, 0x02, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x77, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_bank_transaction_proto_rawDescOnce sync.Once
	file_transaction_bank_transaction_proto_rawDescData = file_transaction_bank_transaction_proto_rawDesc
)

func file_transaction_bank_transaction_proto_rawDescGZIP() []byte {
	file_transaction_bank_transaction_proto_rawDescOnce.Do(func() {
		file_transaction_bank_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_bank_transaction_proto_rawDescData)
	})
	return file_transaction_bank_transaction_proto_rawDescData
}

var file_transaction_bank_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_transaction_bank_transaction_proto_goTypes = []interface{}{
	(BankTransactionStatus)(0),           // 0: wise.protobuf.transaction.BankTransactionStatus
	(BankTransactionCategory)(0),         // 1: wise.protobuf.transaction.BankTransactionCategory
	(BankTransactionType)(0),             // 2: wise.protobuf.transaction.BankTransactionType
	(BankTransactionCounterpartyType)(0), // 3: wise.protobuf.transaction.BankTransactionCounterpartyType
}
var file_transaction_bank_transaction_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_transaction_bank_transaction_proto_init() }
func file_transaction_bank_transaction_proto_init() {
	if File_transaction_bank_transaction_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_bank_transaction_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transaction_bank_transaction_proto_goTypes,
		DependencyIndexes: file_transaction_bank_transaction_proto_depIdxs,
		EnumInfos:         file_transaction_bank_transaction_proto_enumTypes,
	}.Build()
	File_transaction_bank_transaction_proto = out.File
	file_transaction_bank_transaction_proto_rawDesc = nil
	file_transaction_bank_transaction_proto_goTypes = nil
	file_transaction_bank_transaction_proto_depIdxs = nil
}
