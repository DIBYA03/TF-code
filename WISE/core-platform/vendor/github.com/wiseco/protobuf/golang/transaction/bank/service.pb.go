// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: transaction/bank/service.proto

package bank

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	golang "github.com/wiseco/protobuf/golang"
	banking "github.com/wiseco/protobuf/golang/banking"
	transaction "github.com/wiseco/protobuf/golang/transaction"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SortFieldName int32

const (
	SortFieldName_SFN_UNSPECIFIED      SortFieldName = 0
	SortFieldName_SFN_TRANSACTION_DATE SortFieldName = 100
	SortFieldName_SFN_AMOUNT           SortFieldName = 101
)

// Enum value maps for SortFieldName.
var (
	SortFieldName_name = map[int32]string{
		0:   "SFN_UNSPECIFIED",
		100: "SFN_TRANSACTION_DATE",
		101: "SFN_AMOUNT",
	}
	SortFieldName_value = map[string]int32{
		"SFN_UNSPECIFIED":      0,
		"SFN_TRANSACTION_DATE": 100,
		"SFN_AMOUNT":           101,
	}
)

func (x SortFieldName) Enum() *SortFieldName {
	p := new(SortFieldName)
	*p = x
	return p
}

func (x SortFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_bank_service_proto_enumTypes[0].Descriptor()
}

func (SortFieldName) Type() protoreflect.EnumType {
	return &file_transaction_bank_service_proto_enumTypes[0]
}

func (x SortFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortFieldName.Descriptor instead.
func (SortFieldName) EnumDescriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{0}
}

type DateRangeFilter int32

const (
	DateRangeFilter_DRF_UNSPECIFIED DateRangeFilter = 0
	DateRangeFilter_DRF_START       DateRangeFilter = 100
	DateRangeFilter_DRF_END         DateRangeFilter = 101
	DateRangeFilter_DRF_START_END   DateRangeFilter = 102
)

// Enum value maps for DateRangeFilter.
var (
	DateRangeFilter_name = map[int32]string{
		0:   "DRF_UNSPECIFIED",
		100: "DRF_START",
		101: "DRF_END",
		102: "DRF_START_END",
	}
	DateRangeFilter_value = map[string]int32{
		"DRF_UNSPECIFIED": 0,
		"DRF_START":       100,
		"DRF_END":         101,
		"DRF_START_END":   102,
	}
)

func (x DateRangeFilter) Enum() *DateRangeFilter {
	p := new(DateRangeFilter)
	*p = x
	return p
}

func (x DateRangeFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateRangeFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_bank_service_proto_enumTypes[1].Descriptor()
}

func (DateRangeFilter) Type() protoreflect.EnumType {
	return &file_transaction_bank_service_proto_enumTypes[1]
}

func (x DateRangeFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateRangeFilter.Descriptor instead.
func (DateRangeFilter) EnumDescriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{1}
}

type AmountRangeFilter int32

const (
	AmountRangeFilter_ARF_UNSPECIFIED AmountRangeFilter = 0
	AmountRangeFilter_ARF_MIN         AmountRangeFilter = 100
	AmountRangeFilter_ARF_MAX         AmountRangeFilter = 101
	AmountRangeFilter_ARF_MIN_MAX     AmountRangeFilter = 102
)

// Enum value maps for AmountRangeFilter.
var (
	AmountRangeFilter_name = map[int32]string{
		0:   "ARF_UNSPECIFIED",
		100: "ARF_MIN",
		101: "ARF_MAX",
		102: "ARF_MIN_MAX",
	}
	AmountRangeFilter_value = map[string]int32{
		"ARF_UNSPECIFIED": 0,
		"ARF_MIN":         100,
		"ARF_MAX":         101,
		"ARF_MIN_MAX":     102,
	}
)

func (x AmountRangeFilter) Enum() *AmountRangeFilter {
	p := new(AmountRangeFilter)
	*p = x
	return p
}

func (x AmountRangeFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AmountRangeFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_bank_service_proto_enumTypes[2].Descriptor()
}

func (AmountRangeFilter) Type() protoreflect.EnumType {
	return &file_transaction_bank_service_proto_enumTypes[2]
}

func (x AmountRangeFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AmountRangeFilter.Descriptor instead.
func (AmountRangeFilter) EnumDescriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{2}
}

type AmountRangeType int32

const (
	AmountRangeType_ART_UNSPECIFIED AmountRangeType = 0
	AmountRangeType_ART_CREDIT      AmountRangeType = 100
	AmountRangeType_ART_DEBIT       AmountRangeType = 101
)

// Enum value maps for AmountRangeType.
var (
	AmountRangeType_name = map[int32]string{
		0:   "ART_UNSPECIFIED",
		100: "ART_CREDIT",
		101: "ART_DEBIT",
	}
	AmountRangeType_value = map[string]int32{
		"ART_UNSPECIFIED": 0,
		"ART_CREDIT":      100,
		"ART_DEBIT":       101,
	}
)

func (x AmountRangeType) Enum() *AmountRangeType {
	p := new(AmountRangeType)
	*p = x
	return p
}

func (x AmountRangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AmountRangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_bank_service_proto_enumTypes[3].Descriptor()
}

func (AmountRangeType) Type() protoreflect.EnumType {
	return &file_transaction_bank_service_proto_enumTypes[3]
}

func (x AmountRangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AmountRangeType.Descriptor instead.
func (AmountRangeType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{3}
}

type TransactionIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TransactionIDRequest) Reset() {
	*x = TransactionIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionIDRequest) ProtoMessage() {}

func (x *TransactionIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionIDRequest.ProtoReflect.Descriptor instead.
func (*TransactionIDRequest) Descriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PartnerTransactionIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerName          banking.PartnerName `protobuf:"varint,1,opt,name=partner_name,json=partnerName,proto3,enum=wise.protobuf.banking.PartnerName" json:"partner_name,omitempty"`
	PartnerTransactionId string              `protobuf:"bytes,2,opt,name=partner_transaction_id,json=partnerTransactionId,proto3" json:"partner_transaction_id,omitempty"`
}

func (x *PartnerTransactionIDRequest) Reset() {
	*x = PartnerTransactionIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerTransactionIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerTransactionIDRequest) ProtoMessage() {}

func (x *PartnerTransactionIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerTransactionIDRequest.ProtoReflect.Descriptor instead.
func (*PartnerTransactionIDRequest) Descriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{1}
}

func (x *PartnerTransactionIDRequest) GetPartnerName() banking.PartnerName {
	if x != nil {
		return x.PartnerName
	}
	return banking.PartnerName_PN_UNSPECIFIED
}

func (x *PartnerTransactionIDRequest) GetPartnerTransactionId() string {
	if x != nil {
		return x.PartnerTransactionId
	}
	return ""
}

type BankTransferIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankTransferId string `protobuf:"bytes,1,opt,name=bank_transfer_id,json=bankTransferId,proto3" json:"bank_transfer_id,omitempty"`
}

func (x *BankTransferIDRequest) Reset() {
	*x = BankTransferIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankTransferIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankTransferIDRequest) ProtoMessage() {}

func (x *BankTransferIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankTransferIDRequest.ProtoReflect.Descriptor instead.
func (*BankTransferIDRequest) Descriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{2}
}

func (x *BankTransferIDRequest) GetBankTransferId() string {
	if x != nil {
		return x.BankTransferId
	}
	return ""
}

type SortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      SortFieldName        `protobuf:"varint,1,opt,name=name,proto3,enum=wise.protobuf.transaction.bank.SortFieldName" json:"name,omitempty"`
	Direction golang.SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=wise.protobuf.SortDirection" json:"direction,omitempty"`
}

func (x *SortRequest) Reset() {
	*x = SortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortRequest) ProtoMessage() {}

func (x *SortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortRequest.ProtoReflect.Descriptor instead.
func (*SortRequest) Descriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{3}
}

func (x *SortRequest) GetName() SortFieldName {
	if x != nil {
		return x.Name
	}
	return SortFieldName_SFN_UNSPECIFIED
}

func (x *SortRequest) GetDirection() golang.SortDirection {
	if x != nil {
		return x.Direction
	}
	return golang.SortDirection_SD_UNSPECIFIED
}

type DateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter DateRangeFilter      `protobuf:"varint,1,opt,name=filter,proto3,enum=wise.protobuf.transaction.bank.DateRangeFilter" json:"filter,omitempty"`
	Start  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End    *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *DateRange) Reset() {
	*x = DateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRange) ProtoMessage() {}

func (x *DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRange.ProtoReflect.Descriptor instead.
func (*DateRange) Descriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{4}
}

func (x *DateRange) GetFilter() DateRangeFilter {
	if x != nil {
		return x.Filter
	}
	return DateRangeFilter_DRF_UNSPECIFIED
}

func (x *DateRange) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *DateRange) GetEnd() *timestamp.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type AmountRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountMin string            `protobuf:"bytes,1,opt,name=amount_min,json=amountMin,proto3" json:"amount_min,omitempty"`
	AmountMax string            `protobuf:"bytes,2,opt,name=amount_max,json=amountMax,proto3" json:"amount_max,omitempty"`
	Filter    AmountRangeFilter `protobuf:"varint,3,opt,name=filter,proto3,enum=wise.protobuf.transaction.bank.AmountRangeFilter" json:"filter,omitempty"`
	Type      AmountRangeType   `protobuf:"varint,4,opt,name=type,proto3,enum=wise.protobuf.transaction.bank.AmountRangeType" json:"type,omitempty"`
}

func (x *AmountRange) Reset() {
	*x = AmountRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmountRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountRange) ProtoMessage() {}

func (x *AmountRange) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountRange.ProtoReflect.Descriptor instead.
func (*AmountRange) Descriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{5}
}

func (x *AmountRange) GetAmountMin() string {
	if x != nil {
		return x.AmountMin
	}
	return ""
}

func (x *AmountRange) GetAmountMax() string {
	if x != nil {
		return x.AmountMax
	}
	return ""
}

func (x *AmountRange) GetFilter() AmountRangeFilter {
	if x != nil {
		return x.Filter
	}
	return AmountRangeFilter_ARF_UNSPECIFIED
}

func (x *AmountRange) GetType() AmountRangeType {
	if x != nil {
		return x.Type
	}
	return AmountRangeType_ART_UNSPECIFIED
}

type TransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset                 int32                                         `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                  int32                                         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	BusinessId             string                                        `protobuf:"bytes,3,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ConsumerId             string                                        `protobuf:"bytes,4,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	AccountId              string                                        `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	DebitCardId            string                                        `protobuf:"bytes,6,opt,name=debit_card_id,json=debitCardId,proto3" json:"debit_card_id,omitempty"`
	ContactId              string                                        `protobuf:"bytes,7,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	SearchTerms            string                                        `protobuf:"bytes,8,opt,name=search_terms,json=searchTerms,proto3" json:"search_terms,omitempty"`
	StatusFilter           []transaction.BankTransactionStatus           `protobuf:"varint,10,rep,packed,name=status_filter,json=statusFilter,proto3,enum=wise.protobuf.transaction.BankTransactionStatus" json:"status_filter,omitempty"`
	DateRange              *DateRange                                    `protobuf:"bytes,11,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	SortRequests           []*SortRequest                                `protobuf:"bytes,12,rep,name=sort_requests,json=sortRequests,proto3" json:"sort_requests,omitempty"`
	AmountRange            *AmountRange                                  `protobuf:"bytes,13,opt,name=amount_range,json=amountRange,proto3" json:"amount_range,omitempty"`
	TypeFilter             []transaction.BankTransactionType             `protobuf:"varint,14,rep,packed,name=type_filter,json=typeFilter,proto3,enum=wise.protobuf.transaction.BankTransactionType" json:"type_filter,omitempty"`
	CounterpartyTypeFilter []transaction.BankTransactionCounterpartyType `protobuf:"varint,15,rep,packed,name=counterparty_type_filter,json=counterpartyTypeFilter,proto3,enum=wise.protobuf.transaction.BankTransactionCounterpartyType" json:"counterparty_type_filter,omitempty"`
}

func (x *TransactionsRequest) Reset() {
	*x = TransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsRequest) ProtoMessage() {}

func (x *TransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsRequest.ProtoReflect.Descriptor instead.
func (*TransactionsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{6}
}

func (x *TransactionsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TransactionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TransactionsRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *TransactionsRequest) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *TransactionsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TransactionsRequest) GetDebitCardId() string {
	if x != nil {
		return x.DebitCardId
	}
	return ""
}

func (x *TransactionsRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *TransactionsRequest) GetSearchTerms() string {
	if x != nil {
		return x.SearchTerms
	}
	return ""
}

func (x *TransactionsRequest) GetStatusFilter() []transaction.BankTransactionStatus {
	if x != nil {
		return x.StatusFilter
	}
	return nil
}

func (x *TransactionsRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *TransactionsRequest) GetSortRequests() []*SortRequest {
	if x != nil {
		return x.SortRequests
	}
	return nil
}

func (x *TransactionsRequest) GetAmountRange() *AmountRange {
	if x != nil {
		return x.AmountRange
	}
	return nil
}

func (x *TransactionsRequest) GetTypeFilter() []transaction.BankTransactionType {
	if x != nil {
		return x.TypeFilter
	}
	return nil
}

func (x *TransactionsRequest) GetCounterpartyTypeFilter() []transaction.BankTransactionCounterpartyType {
	if x != nil {
		return x.CounterpartyTypeFilter
	}
	return nil
}

type TransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Transaction `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *TransactionsResponse) Reset() {
	*x = TransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsResponse) ProtoMessage() {}

func (x *TransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsResponse.ProtoReflect.Descriptor instead.
func (*TransactionsResponse) Descriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionsResponse) GetResults() []*Transaction {
	if x != nil {
		return x.Results
	}
	return nil
}

type StatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId string     `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	ConsumerId string     `protobuf:"bytes,2,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	AccountId  string     `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	DateRange  *DateRange `protobuf:"bytes,4,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
}

func (x *StatsRequest) Reset() {
	*x = StatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsRequest) ProtoMessage() {}

func (x *StatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsRequest.ProtoReflect.Descriptor instead.
func (*StatsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{8}
}

func (x *StatsRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *StatsRequest) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *StatsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *StatsRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

type TypeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   transaction.BankTransactionType `protobuf:"varint,1,opt,name=type,proto3,enum=wise.protobuf.transaction.BankTransactionType" json:"type,omitempty"`
	Count  int32                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Amount string                          `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TypeStats) Reset() {
	*x = TypeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeStats) ProtoMessage() {}

func (x *TypeStats) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeStats.ProtoReflect.Descriptor instead.
func (*TypeStats) Descriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{9}
}

func (x *TypeStats) GetType() transaction.BankTransactionType {
	if x != nil {
		return x.Type
	}
	return transaction.BankTransactionType_BTT_UNSPECIFIED
}

func (x *TypeStats) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TypeStats) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type CounterpartyTypeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   transaction.BankTransactionCounterpartyType `protobuf:"varint,1,opt,name=type,proto3,enum=wise.protobuf.transaction.BankTransactionCounterpartyType" json:"type,omitempty"`
	Count  int32                                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Amount string                                      `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CounterpartyTypeStats) Reset() {
	*x = CounterpartyTypeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterpartyTypeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterpartyTypeStats) ProtoMessage() {}

func (x *CounterpartyTypeStats) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterpartyTypeStats.ProtoReflect.Descriptor instead.
func (*CounterpartyTypeStats) Descriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{10}
}

func (x *CounterpartyTypeStats) GetType() transaction.BankTransactionCounterpartyType {
	if x != nil {
		return x.Type
	}
	return transaction.BankTransactionCounterpartyType_BTCT_UNSPECIFIED
}

func (x *CounterpartyTypeStats) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CounterpartyTypeStats) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type StatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count                 int32                    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	AmountCredited        string                   `protobuf:"bytes,2,opt,name=amount_credited,json=amountCredited,proto3" json:"amount_credited,omitempty"`
	AmountDebited         string                   `protobuf:"bytes,3,opt,name=amount_debited,json=amountDebited,proto3" json:"amount_debited,omitempty"`
	TypeStats             []*TypeStats             `protobuf:"bytes,4,rep,name=type_stats,json=typeStats,proto3" json:"type_stats,omitempty"`
	CounterpartyTypeStats []*CounterpartyTypeStats `protobuf:"bytes,5,rep,name=counterparty_type_stats,json=counterpartyTypeStats,proto3" json:"counterparty_type_stats,omitempty"`
}

func (x *StatsResponse) Reset() {
	*x = StatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_bank_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResponse) ProtoMessage() {}

func (x *StatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_bank_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResponse.ProtoReflect.Descriptor instead.
func (*StatsResponse) Descriptor() ([]byte, []int) {
	return file_transaction_bank_service_proto_rawDescGZIP(), []int{11}
}

func (x *StatsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StatsResponse) GetAmountCredited() string {
	if x != nil {
		return x.AmountCredited
	}
	return ""
}

func (x *StatsResponse) GetAmountDebited() string {
	if x != nil {
		return x.AmountDebited
	}
	return ""
}

func (x *StatsResponse) GetTypeStats() []*TypeStats {
	if x != nil {
		return x.TypeStats
	}
	return nil
}

func (x *StatsResponse) GetCounterpartyTypeStats() []*CounterpartyTypeStats {
	if x != nil {
		return x.CounterpartyTypeStats
	}
	return nil
}

var File_transaction_bank_service_proto protoreflect.FileDescriptor

var file_transaction_bank_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x61,
	0x6e, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x1a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x26, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x15, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x53, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22,
	0xdb, 0x01, 0x0a, 0x0b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x49, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x94, 0x06,
	0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x62,
	0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0c, 0x73, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4e, 0x0a,
	0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4f, 0x0a,
	0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x74,
	0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x7d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x95,
	0x01, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xae, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x65, 0x64, 0x12, 0x48,
	0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x17, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x15, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2a, 0x4e, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x46, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x46, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x46, 0x4e, 0x5f, 0x41,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x65, 0x2a, 0x55, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x52,
	0x46, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x52, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x64, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x52, 0x46, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x52, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x66, 0x2a, 0x53,
	0x0a, 0x11, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x46, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x46, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x46, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x52, 0x46, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x66, 0x2a, 0x45, 0x0a, 0x0f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x52, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x52, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0x65, 0x32, 0xe1, 0x07, 0x0a, 0x12, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x6c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x34, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x74, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x12, 0x34,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79,
	0x12, 0x33, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3b, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x44, 0x12, 0x35, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x67, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x06, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x38, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x46, 0x75,
	0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x40, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x34,
	0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x62, 0x61, 0x6e, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_bank_service_proto_rawDescOnce sync.Once
	file_transaction_bank_service_proto_rawDescData = file_transaction_bank_service_proto_rawDesc
)

func file_transaction_bank_service_proto_rawDescGZIP() []byte {
	file_transaction_bank_service_proto_rawDescOnce.Do(func() {
		file_transaction_bank_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_bank_service_proto_rawDescData)
	})
	return file_transaction_bank_service_proto_rawDescData
}

var file_transaction_bank_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_transaction_bank_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_transaction_bank_service_proto_goTypes = []interface{}{
	(SortFieldName)(0),                               // 0: wise.protobuf.transaction.bank.SortFieldName
	(DateRangeFilter)(0),                             // 1: wise.protobuf.transaction.bank.DateRangeFilter
	(AmountRangeFilter)(0),                           // 2: wise.protobuf.transaction.bank.AmountRangeFilter
	(AmountRangeType)(0),                             // 3: wise.protobuf.transaction.bank.AmountRangeType
	(*TransactionIDRequest)(nil),                     // 4: wise.protobuf.transaction.bank.TransactionIDRequest
	(*PartnerTransactionIDRequest)(nil),              // 5: wise.protobuf.transaction.bank.PartnerTransactionIDRequest
	(*BankTransferIDRequest)(nil),                    // 6: wise.protobuf.transaction.bank.BankTransferIDRequest
	(*SortRequest)(nil),                              // 7: wise.protobuf.transaction.bank.SortRequest
	(*DateRange)(nil),                                // 8: wise.protobuf.transaction.bank.DateRange
	(*AmountRange)(nil),                              // 9: wise.protobuf.transaction.bank.AmountRange
	(*TransactionsRequest)(nil),                      // 10: wise.protobuf.transaction.bank.TransactionsRequest
	(*TransactionsResponse)(nil),                     // 11: wise.protobuf.transaction.bank.TransactionsResponse
	(*StatsRequest)(nil),                             // 12: wise.protobuf.transaction.bank.StatsRequest
	(*TypeStats)(nil),                                // 13: wise.protobuf.transaction.bank.TypeStats
	(*CounterpartyTypeStats)(nil),                    // 14: wise.protobuf.transaction.bank.CounterpartyTypeStats
	(*StatsResponse)(nil),                            // 15: wise.protobuf.transaction.bank.StatsResponse
	(banking.PartnerName)(0),                         // 16: wise.protobuf.banking.PartnerName
	(golang.SortDirection)(0),                        // 17: wise.protobuf.SortDirection
	(*timestamp.Timestamp)(nil),                      // 18: google.protobuf.Timestamp
	(transaction.BankTransactionStatus)(0),           // 19: wise.protobuf.transaction.BankTransactionStatus
	(transaction.BankTransactionType)(0),             // 20: wise.protobuf.transaction.BankTransactionType
	(transaction.BankTransactionCounterpartyType)(0), // 21: wise.protobuf.transaction.BankTransactionCounterpartyType
	(*Transaction)(nil),                              // 22: wise.protobuf.transaction.bank.Transaction
	(*UpsertTransactionRequest)(nil),                 // 23: wise.protobuf.transaction.bank.UpsertTransactionRequest
	(*UpdateTransactionPropertyRequest)(nil),         // 24: wise.protobuf.transaction.bank.UpdateTransactionPropertyRequest
	(*FullTransaction)(nil),                          // 25: wise.protobuf.transaction.bank.FullTransaction
}
var file_transaction_bank_service_proto_depIdxs = []int32{
	16, // 0: wise.protobuf.transaction.bank.PartnerTransactionIDRequest.partner_name:type_name -> wise.protobuf.banking.PartnerName
	0,  // 1: wise.protobuf.transaction.bank.SortRequest.name:type_name -> wise.protobuf.transaction.bank.SortFieldName
	17, // 2: wise.protobuf.transaction.bank.SortRequest.direction:type_name -> wise.protobuf.SortDirection
	1,  // 3: wise.protobuf.transaction.bank.DateRange.filter:type_name -> wise.protobuf.transaction.bank.DateRangeFilter
	18, // 4: wise.protobuf.transaction.bank.DateRange.start:type_name -> google.protobuf.Timestamp
	18, // 5: wise.protobuf.transaction.bank.DateRange.end:type_name -> google.protobuf.Timestamp
	2,  // 6: wise.protobuf.transaction.bank.AmountRange.filter:type_name -> wise.protobuf.transaction.bank.AmountRangeFilter
	3,  // 7: wise.protobuf.transaction.bank.AmountRange.type:type_name -> wise.protobuf.transaction.bank.AmountRangeType
	19, // 8: wise.protobuf.transaction.bank.TransactionsRequest.status_filter:type_name -> wise.protobuf.transaction.BankTransactionStatus
	8,  // 9: wise.protobuf.transaction.bank.TransactionsRequest.date_range:type_name -> wise.protobuf.transaction.bank.DateRange
	7,  // 10: wise.protobuf.transaction.bank.TransactionsRequest.sort_requests:type_name -> wise.protobuf.transaction.bank.SortRequest
	9,  // 11: wise.protobuf.transaction.bank.TransactionsRequest.amount_range:type_name -> wise.protobuf.transaction.bank.AmountRange
	20, // 12: wise.protobuf.transaction.bank.TransactionsRequest.type_filter:type_name -> wise.protobuf.transaction.BankTransactionType
	21, // 13: wise.protobuf.transaction.bank.TransactionsRequest.counterparty_type_filter:type_name -> wise.protobuf.transaction.BankTransactionCounterpartyType
	22, // 14: wise.protobuf.transaction.bank.TransactionsResponse.results:type_name -> wise.protobuf.transaction.bank.Transaction
	8,  // 15: wise.protobuf.transaction.bank.StatsRequest.date_range:type_name -> wise.protobuf.transaction.bank.DateRange
	20, // 16: wise.protobuf.transaction.bank.TypeStats.type:type_name -> wise.protobuf.transaction.BankTransactionType
	21, // 17: wise.protobuf.transaction.bank.CounterpartyTypeStats.type:type_name -> wise.protobuf.transaction.BankTransactionCounterpartyType
	13, // 18: wise.protobuf.transaction.bank.StatsResponse.type_stats:type_name -> wise.protobuf.transaction.bank.TypeStats
	14, // 19: wise.protobuf.transaction.bank.StatsResponse.counterparty_type_stats:type_name -> wise.protobuf.transaction.bank.CounterpartyTypeStats
	4,  // 20: wise.protobuf.transaction.bank.TransactionService.GetByID:input_type -> wise.protobuf.transaction.bank.TransactionIDRequest
	4,  // 21: wise.protobuf.transaction.bank.TransactionService.GetFullByID:input_type -> wise.protobuf.transaction.bank.TransactionIDRequest
	10, // 22: wise.protobuf.transaction.bank.TransactionService.GetMany:input_type -> wise.protobuf.transaction.bank.TransactionsRequest
	5,  // 23: wise.protobuf.transaction.bank.TransactionService.GetManyByPartnerTransactionID:input_type -> wise.protobuf.transaction.bank.PartnerTransactionIDRequest
	6,  // 24: wise.protobuf.transaction.bank.TransactionService.GetByBankTransferID:input_type -> wise.protobuf.transaction.bank.BankTransferIDRequest
	12, // 25: wise.protobuf.transaction.bank.TransactionService.GetStats:input_type -> wise.protobuf.transaction.bank.StatsRequest
	23, // 26: wise.protobuf.transaction.bank.TransactionService.Upsert:input_type -> wise.protobuf.transaction.bank.UpsertTransactionRequest
	24, // 27: wise.protobuf.transaction.bank.TransactionService.UpdateProperty:input_type -> wise.protobuf.transaction.bank.UpdateTransactionPropertyRequest
	22, // 28: wise.protobuf.transaction.bank.TransactionService.GetByID:output_type -> wise.protobuf.transaction.bank.Transaction
	25, // 29: wise.protobuf.transaction.bank.TransactionService.GetFullByID:output_type -> wise.protobuf.transaction.bank.FullTransaction
	11, // 30: wise.protobuf.transaction.bank.TransactionService.GetMany:output_type -> wise.protobuf.transaction.bank.TransactionsResponse
	11, // 31: wise.protobuf.transaction.bank.TransactionService.GetManyByPartnerTransactionID:output_type -> wise.protobuf.transaction.bank.TransactionsResponse
	25, // 32: wise.protobuf.transaction.bank.TransactionService.GetByBankTransferID:output_type -> wise.protobuf.transaction.bank.FullTransaction
	15, // 33: wise.protobuf.transaction.bank.TransactionService.GetStats:output_type -> wise.protobuf.transaction.bank.StatsResponse
	25, // 34: wise.protobuf.transaction.bank.TransactionService.Upsert:output_type -> wise.protobuf.transaction.bank.FullTransaction
	22, // 35: wise.protobuf.transaction.bank.TransactionService.UpdateProperty:output_type -> wise.protobuf.transaction.bank.Transaction
	28, // [28:36] is the sub-list for method output_type
	20, // [20:28] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_transaction_bank_service_proto_init() }
func file_transaction_bank_service_proto_init() {
	if File_transaction_bank_service_proto != nil {
		return
	}
	file_transaction_bank_transaction_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_transaction_bank_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerTransactionIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankTransferIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmountRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterpartyTypeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_bank_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_bank_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transaction_bank_service_proto_goTypes,
		DependencyIndexes: file_transaction_bank_service_proto_depIdxs,
		EnumInfos:         file_transaction_bank_service_proto_enumTypes,
		MessageInfos:      file_transaction_bank_service_proto_msgTypes,
	}.Build()
	File_transaction_bank_service_proto = out.File
	file_transaction_bank_service_proto_rawDesc = nil
	file_transaction_bank_service_proto_goTypes = nil
	file_transaction_bank_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionServiceClient interface {
	// Get Transactions
	GetByID(ctx context.Context, in *TransactionIDRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetFullByID(ctx context.Context, in *TransactionIDRequest, opts ...grpc.CallOption) (*FullTransaction, error)
	GetMany(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error)
	GetManyByPartnerTransactionID(ctx context.Context, in *PartnerTransactionIDRequest, opts ...grpc.CallOption) (*TransactionsResponse, error)
	GetByBankTransferID(ctx context.Context, in *BankTransferIDRequest, opts ...grpc.CallOption) (*FullTransaction, error)
	// Get Stats
	GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	// Add or Update Transactions
	Upsert(ctx context.Context, in *UpsertTransactionRequest, opts ...grpc.CallOption) (*FullTransaction, error)
	UpdateProperty(ctx context.Context, in *UpdateTransactionPropertyRequest, opts ...grpc.CallOption) (*Transaction, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) GetByID(ctx context.Context, in *TransactionIDRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.bank.TransactionService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetFullByID(ctx context.Context, in *TransactionIDRequest, opts ...grpc.CallOption) (*FullTransaction, error) {
	out := new(FullTransaction)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.bank.TransactionService/GetFullByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetMany(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error) {
	out := new(TransactionsResponse)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.bank.TransactionService/GetMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetManyByPartnerTransactionID(ctx context.Context, in *PartnerTransactionIDRequest, opts ...grpc.CallOption) (*TransactionsResponse, error) {
	out := new(TransactionsResponse)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.bank.TransactionService/GetManyByPartnerTransactionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetByBankTransferID(ctx context.Context, in *BankTransferIDRequest, opts ...grpc.CallOption) (*FullTransaction, error) {
	out := new(FullTransaction)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.bank.TransactionService/GetByBankTransferID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.bank.TransactionService/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) Upsert(ctx context.Context, in *UpsertTransactionRequest, opts ...grpc.CallOption) (*FullTransaction, error) {
	out := new(FullTransaction)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.bank.TransactionService/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdateProperty(ctx context.Context, in *UpdateTransactionPropertyRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/wise.protobuf.transaction.bank.TransactionService/UpdateProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
type TransactionServiceServer interface {
	// Get Transactions
	GetByID(context.Context, *TransactionIDRequest) (*Transaction, error)
	GetFullByID(context.Context, *TransactionIDRequest) (*FullTransaction, error)
	GetMany(context.Context, *TransactionsRequest) (*TransactionsResponse, error)
	GetManyByPartnerTransactionID(context.Context, *PartnerTransactionIDRequest) (*TransactionsResponse, error)
	GetByBankTransferID(context.Context, *BankTransferIDRequest) (*FullTransaction, error)
	// Get Stats
	GetStats(context.Context, *StatsRequest) (*StatsResponse, error)
	// Add or Update Transactions
	Upsert(context.Context, *UpsertTransactionRequest) (*FullTransaction, error)
	UpdateProperty(context.Context, *UpdateTransactionPropertyRequest) (*Transaction, error)
}

// UnimplementedTransactionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (*UnimplementedTransactionServiceServer) GetByID(context.Context, *TransactionIDRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (*UnimplementedTransactionServiceServer) GetFullByID(context.Context, *TransactionIDRequest) (*FullTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullByID not implemented")
}
func (*UnimplementedTransactionServiceServer) GetMany(context.Context, *TransactionsRequest) (*TransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}
func (*UnimplementedTransactionServiceServer) GetManyByPartnerTransactionID(context.Context, *PartnerTransactionIDRequest) (*TransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManyByPartnerTransactionID not implemented")
}
func (*UnimplementedTransactionServiceServer) GetByBankTransferID(context.Context, *BankTransferIDRequest) (*FullTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByBankTransferID not implemented")
}
func (*UnimplementedTransactionServiceServer) GetStats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (*UnimplementedTransactionServiceServer) Upsert(context.Context, *UpsertTransactionRequest) (*FullTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (*UnimplementedTransactionServiceServer) UpdateProperty(context.Context, *UpdateTransactionPropertyRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProperty not implemented")
}

func RegisterTransactionServiceServer(s *grpc.Server, srv TransactionServiceServer) {
	s.RegisterService(&_TransactionService_serviceDesc, srv)
}

func _TransactionService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.bank.TransactionService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetByID(ctx, req.(*TransactionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetFullByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetFullByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.bank.TransactionService/GetFullByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetFullByID(ctx, req.(*TransactionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.bank.TransactionService/GetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetMany(ctx, req.(*TransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetManyByPartnerTransactionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerTransactionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetManyByPartnerTransactionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.bank.TransactionService/GetManyByPartnerTransactionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetManyByPartnerTransactionID(ctx, req.(*PartnerTransactionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetByBankTransferID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankTransferIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetByBankTransferID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.bank.TransactionService/GetByBankTransferID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetByBankTransferID(ctx, req.(*BankTransferIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.bank.TransactionService/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetStats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.bank.TransactionService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).Upsert(ctx, req.(*UpsertTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdateProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wise.protobuf.transaction.bank.TransactionService/UpdateProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdateProperty(ctx, req.(*UpdateTransactionPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wise.protobuf.transaction.bank.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _TransactionService_GetByID_Handler,
		},
		{
			MethodName: "GetFullByID",
			Handler:    _TransactionService_GetFullByID_Handler,
		},
		{
			MethodName: "GetMany",
			Handler:    _TransactionService_GetMany_Handler,
		},
		{
			MethodName: "GetManyByPartnerTransactionID",
			Handler:    _TransactionService_GetManyByPartnerTransactionID_Handler,
		},
		{
			MethodName: "GetByBankTransferID",
			Handler:    _TransactionService_GetByBankTransferID_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _TransactionService_GetStats_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _TransactionService_Upsert_Handler,
		},
		{
			MethodName: "UpdateProperty",
			Handler:    _TransactionService_UpdateProperty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/bank/service.proto",
}
